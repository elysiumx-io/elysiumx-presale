import {
  useWeb3AuthDisconnect
} from "./chunk-LCU7ZLMF.js";
import {
  Web3AuthInnerContext,
  Web3AuthInnerProvider,
  useWeb3Auth,
  useWeb3AuthInner
} from "./chunk-NXA6LXAN.js";
import {
  EVM_PLUGINS,
  PLUGIN_EVENTS,
  WalletServicesPluginError
} from "./chunk-D3TJF7RS.js";
import "./chunk-I6FMYGNX.js";
import "./chunk-MMSGLE56.js";
import "./chunk-XJJJAC74.js";
import "./chunk-E37ZTJS5.js";
import "./chunk-QEJAXTE2.js";
import "./chunk-ANJCMEYS.js";
import "./chunk-O2AZ2MYW.js";
import "./chunk-6BO67BC2.js";
import "./chunk-JI2BVKAP.js";
import "./chunk-P5PBSPNF.js";
import "./chunk-6XWWGOVT.js";
import "./chunk-W4XGBCC6.js";
import "./chunk-3NUX7GKE.js";
import "./chunk-JJ4R2GYE.js";
import "./chunk-T76UJC3V.js";
import "./chunk-KVGG4UNH.js";
import "./chunk-64SD37WF.js";
import "./chunk-YZ25BAVE.js";
import "./chunk-JBLZOY4W.js";
import "./chunk-BXZIFEFM.js";
import "./chunk-7AISMB4O.js";
import {
  CONNECTOR_STATUS
} from "./chunk-A6MZY642.js";
import "./chunk-NSXL3SWJ.js";
import "./chunk-XLWISUI2.js";
import {
  WalletInitializationError
} from "./chunk-VBPUSRQJ.js";
import "./chunk-B2N4C5QO.js";
import "./chunk-F57LR762.js";
import "./chunk-AQ6AFSCK.js";
import "./chunk-CQQ7RDSY.js";
import "./chunk-NPY75PGV.js";
import "./chunk-Z2JNO6L5.js";
import "./chunk-AV6CGRXD.js";
import "./chunk-4W5QYKQT.js";
import "./chunk-E7YZTEZA.js";
import "./chunk-FF6U6DXW.js";
import "./chunk-HVBN44Z7.js";
import "./chunk-OOI2S6FZ.js";
import "./chunk-RT3OGE7I.js";
import "./chunk-EQGYQIU5.js";
import "./chunk-I4LZO3IN.js";
import "./chunk-ZO7VJ2KK.js";
import "./chunk-FQ3RDL7Q.js";
import "./chunk-5WOPONXG.js";
import "./chunk-M2Y7NS7B.js";
import "./chunk-RJHKLZND.js";
import "./chunk-LWLUVSGB.js";
import "./chunk-6XNWDSHI.js";
import "./chunk-X5OROSC7.js";
import "./chunk-O3KV2FKV.js";
import "./chunk-LCA5K6LN.js";
import "./chunk-HXWRQBIO.js";
import "./chunk-NSFS2AGI.js";
import "./chunk-OCPNNEU4.js";
import "./chunk-3LQ52NAQ.js";
import "./chunk-3T47BPSV.js";
import "./chunk-TWULWKBH.js";
import "./chunk-J4YIASWV.js";
import "./chunk-TLG7CTPL.js";
import {
  require_react
} from "./chunk-VT65UQWK.js";
import {
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useCheckout.js
var import_react3 = __toESM(require_react());

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useWalletServicesPlugin.js
var import_react2 = __toESM(require_react());

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/context/WalletServicesInnerContext.js
var import_react = __toESM(require_react());
var WalletServicesContext = (0, import_react.createContext)(null);
function WalletServicesContextProvider({
  children,
  context
}) {
  const web3AuthContext = (0, import_react.useContext)(context);
  const {
    getPlugin,
    isInitialized,
    isConnected
  } = web3AuthContext;
  const [ready, setReady] = (0, import_react.useState)(false);
  const [connecting, setConnecting] = (0, import_react.useState)(false);
  const [walletServicesPlugin, setWalletServicesPlugin] = (0, import_react.useState)(null);
  (0, import_react.useEffect)(() => {
    if (isInitialized) {
      const plugin = getPlugin(EVM_PLUGINS.WALLET_SERVICES);
      setWalletServicesPlugin(plugin);
    }
  }, [isInitialized, getPlugin]);
  (0, import_react.useEffect)(() => {
    if (isConnected) {
      const plugin = getPlugin(EVM_PLUGINS.WALLET_SERVICES);
      setWalletServicesPlugin(plugin);
      if ((plugin === null || plugin === void 0 ? void 0 : plugin.status) === CONNECTOR_STATUS.CONNECTED) setReady(true);
    }
  }, [isConnected, getPlugin, walletServicesPlugin]);
  (0, import_react.useEffect)(() => {
    const connectedListener = () => {
      setReady(true);
      setConnecting(false);
    };
    const disconnectedListener = () => {
      setReady(false);
      setConnecting(false);
    };
    const connectingListener = () => {
      setConnecting(true);
    };
    if (walletServicesPlugin) {
      walletServicesPlugin.on(PLUGIN_EVENTS.CONNECTED, connectedListener);
      walletServicesPlugin.on(PLUGIN_EVENTS.DISCONNECTED, disconnectedListener);
      walletServicesPlugin.on(PLUGIN_EVENTS.CONNECTING, connectingListener);
    }
    return () => {
      if (walletServicesPlugin) {
        walletServicesPlugin.off(PLUGIN_EVENTS.CONNECTED, connectedListener);
        walletServicesPlugin.off(PLUGIN_EVENTS.DISCONNECTED, disconnectedListener);
        walletServicesPlugin.off(PLUGIN_EVENTS.CONNECTING, connectingListener);
      }
    };
  }, [walletServicesPlugin]);
  const value = (0, import_react.useMemo)(() => {
    return {
      plugin: walletServicesPlugin,
      ready,
      connecting
    };
  }, [walletServicesPlugin, ready, connecting]);
  return (0, import_react.createElement)(WalletServicesContext.Provider, {
    value
  }, children);
}

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useWalletServicesPlugin.js
var useWalletServicesPlugin = () => {
  const context = (0, import_react2.useContext)(WalletServicesContext);
  if (!context) throw WalletInitializationError.fromCode(1e3, "usage of useWalletServicesPlugin not wrapped in `WalletServicesContextProvider`.");
  return context;
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useCheckout.js
var useCheckout = () => {
  const {
    plugin,
    ready
  } = useWalletServicesPlugin();
  const [loading, setLoading] = (0, import_react3.useState)(false);
  const [error, setError] = (0, import_react3.useState)(null);
  const showCheckout = (0, import_react3.useCallback)(async (showCheckoutParams) => {
    setLoading(true);
    setError(null);
    try {
      if (!plugin) throw WalletServicesPluginError.notInitialized();
      if (!ready) throw WalletServicesPluginError.walletPluginNotConnected();
      await plugin.showCheckout(showCheckoutParams);
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [plugin, ready]);
  return {
    loading,
    error,
    showCheckout
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useEnableMFA.js
var import_react4 = __toESM(require_react());
var useEnableMFA = () => {
  const {
    web3Auth
  } = useWeb3AuthInner();
  const [loading, setLoading] = (0, import_react4.useState)(false);
  const [error, setError] = (0, import_react4.useState)(null);
  const enableMFA = (0, import_react4.useCallback)(async (params) => {
    setLoading(true);
    setError(null);
    try {
      await web3Auth.enableMFA(params);
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [web3Auth]);
  return {
    loading,
    error,
    enableMFA
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useIdentityToken.js
var import_react5 = __toESM(require_react());
var useIdentityToken = () => {
  const {
    web3Auth,
    isConnected
  } = useWeb3AuthInner();
  const [loading, setLoading] = (0, import_react5.useState)(false);
  const [error, setError] = (0, import_react5.useState)(null);
  const [token, setToken] = (0, import_react5.useState)(null);
  const getIdentityToken = (0, import_react5.useCallback)(async () => {
    setLoading(true);
    setError(null);
    try {
      const userAuthInfo = await web3Auth.getIdentityToken();
      if (userAuthInfo !== null && userAuthInfo !== void 0 && userAuthInfo.idToken) {
        setToken(userAuthInfo.idToken);
      }
      return userAuthInfo === null || userAuthInfo === void 0 ? void 0 : userAuthInfo.idToken;
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [web3Auth]);
  (0, import_react5.useEffect)(() => {
    if (!isConnected && token) {
      setToken(null);
    }
  }, [isConnected, token]);
  return {
    loading,
    error,
    token,
    getIdentityToken
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useManageMFA.js
var import_react6 = __toESM(require_react());
var useManageMFA = () => {
  const {
    web3Auth
  } = useWeb3AuthInner();
  const [loading, setLoading] = (0, import_react6.useState)(false);
  const [error, setError] = (0, import_react6.useState)(null);
  const manageMFA = (0, import_react6.useCallback)(async (params) => {
    setLoading(true);
    setError(null);
    try {
      await web3Auth.manageMFA(params);
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [web3Auth]);
  return {
    loading,
    error,
    manageMFA
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useSwap.js
var import_react7 = __toESM(require_react());
var useSwap = () => {
  const {
    plugin,
    ready
  } = useWalletServicesPlugin();
  const [loading, setLoading] = (0, import_react7.useState)(false);
  const [error, setError] = (0, import_react7.useState)(null);
  const showSwap = (0, import_react7.useCallback)(async (showSwapParams) => {
    setLoading(true);
    setError(null);
    try {
      if (!plugin) throw WalletServicesPluginError.notInitialized();
      if (!ready) throw WalletServicesPluginError.walletPluginNotConnected();
      await plugin.showSwap(showSwapParams);
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [plugin, ready]);
  return {
    loading,
    error,
    showSwap
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useSwitchChain.js
var import_react8 = __toESM(require_react());
var useSwitchChain = () => {
  const {
    web3Auth
  } = useWeb3AuthInner();
  const [loading, setLoading] = (0, import_react8.useState)(false);
  const [error, setError] = (0, import_react8.useState)(null);
  const switchChain = (0, import_react8.useCallback)(async (chainId) => {
    setLoading(true);
    setError(null);
    try {
      await web3Auth.switchChain({
        chainId
      });
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [web3Auth]);
  return {
    loading,
    error,
    switchChain
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useWalletConnectScanner.js
var import_react9 = __toESM(require_react());
var useWalletConnectScanner = () => {
  const {
    plugin,
    ready
  } = useWalletServicesPlugin();
  const [loading, setLoading] = (0, import_react9.useState)(false);
  const [error, setError] = (0, import_react9.useState)(null);
  const showWalletConnectScanner = (0, import_react9.useCallback)(async (showWalletConnectScannerParams) => {
    setLoading(true);
    setError(null);
    try {
      if (!plugin) throw WalletServicesPluginError.notInitialized();
      if (!ready) throw WalletServicesPluginError.walletPluginNotConnected();
      await plugin.showWalletConnectScanner(showWalletConnectScannerParams);
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [plugin, ready]);
  return {
    loading,
    error,
    showWalletConnectScanner
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useWalletUI.js
var import_react10 = __toESM(require_react());
var useWalletUI = () => {
  const {
    plugin,
    ready
  } = useWalletServicesPlugin();
  const [loading, setLoading] = (0, import_react10.useState)(false);
  const [error, setError] = (0, import_react10.useState)(null);
  const showWalletUI = (0, import_react10.useCallback)(async (showWalletUiParams) => {
    setLoading(true);
    setError(null);
    try {
      if (!plugin) throw WalletServicesPluginError.notInitialized();
      if (!ready) throw WalletServicesPluginError.walletPluginNotConnected();
      await plugin.showWalletUi(showWalletUiParams);
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [plugin, ready]);
  return {
    loading,
    error,
    showWalletUI
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useWeb3AuthConnect.js
var import_react11 = __toESM(require_react());
var useWeb3AuthConnect = () => {
  const {
    web3Auth,
    isConnected
  } = useWeb3AuthInner();
  const [loading, setLoading] = (0, import_react11.useState)(false);
  const [error, setError] = (0, import_react11.useState)(null);
  const [connectorName, setConnectorName] = (0, import_react11.useState)(null);
  (0, import_react11.useEffect)(() => {
    if (!web3Auth) return;
    if (!isConnected && connectorName) {
      setConnectorName(null);
    }
    if (isConnected && !connectorName) {
      setConnectorName(web3Auth.connectedConnectorName);
    }
  }, [isConnected, connectorName, web3Auth]);
  const connect = (0, import_react11.useCallback)(async () => {
    setLoading(true);
    setError(null);
    try {
      const provider = await web3Auth.connect();
      if (provider) {
        setConnectorName(web3Auth.connectedConnectorName);
      }
      return provider;
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [web3Auth]);
  const connectTo = (0, import_react11.useCallback)(async (connector, params) => {
    setLoading(true);
    setError(null);
    try {
      const provider = await web3Auth.connectTo(connector, params);
      if (provider) {
        setConnectorName(web3Auth.connectedConnectorName);
      }
      return provider;
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [web3Auth]);
  return {
    isConnected,
    loading,
    error,
    connectorName,
    connect,
    connectTo
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useWeb3AuthUser.js
var import_react12 = __toESM(require_react());
var useWeb3AuthUser = () => {
  const {
    web3Auth,
    isConnected,
    isMFAEnabled,
    setIsMFAEnabled
  } = useWeb3AuthInner();
  const [userInfo, setUserInfo] = (0, import_react12.useState)(null);
  const [loading, setLoading] = (0, import_react12.useState)(false);
  const [error, setError] = (0, import_react12.useState)(null);
  const getUserInfo = (0, import_react12.useCallback)(async () => {
    setLoading(true);
    setError(null);
    try {
      const userInfo2 = await web3Auth.getUserInfo();
      setUserInfo(userInfo2);
      return userInfo2;
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [web3Auth]);
  (0, import_react12.useEffect)(() => {
    const saveUserInfo = async () => {
      const userInfo2 = await getUserInfo();
      setUserInfo(userInfo2);
      setIsMFAEnabled((userInfo2 === null || userInfo2 === void 0 ? void 0 : userInfo2.isMfaEnabled) || false);
    };
    if (isConnected && !userInfo) saveUserInfo();
    if (!isConnected && userInfo) {
      setUserInfo(null);
      setIsMFAEnabled(false);
    }
  }, [isConnected, userInfo, getUserInfo, setIsMFAEnabled]);
  return {
    loading,
    error,
    userInfo,
    isMFAEnabled,
    getUserInfo
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/Web3AuthProvider.js
var import_react13 = __toESM(require_react());
function Web3AuthProvider({
  config,
  initialState,
  children
}) {
  const pluginChild = (0, import_react13.createElement)(WalletServicesContextProvider, {
    context: Web3AuthInnerContext
  }, children);
  return (0, import_react13.createElement)(Web3AuthInnerProvider, {
    config,
    initialState
  }, pluginChild);
}
export {
  Web3AuthProvider,
  useCheckout,
  useEnableMFA,
  useIdentityToken,
  useManageMFA,
  useSwap,
  useSwitchChain,
  useWalletConnectScanner,
  useWalletServicesPlugin,
  useWalletUI,
  useWeb3Auth,
  useWeb3AuthConnect,
  useWeb3AuthDisconnect,
  useWeb3AuthUser
};
//# sourceMappingURL=@web3auth_modal_react.js.map
