{
  "version": 3,
  "sources": ["../../@web3auth/no-modal/dist/lib.esm/providers/solana-provider/rpc/JrpcClient.js", "../../@web3auth/no-modal/dist/lib.esm/providers/solana-provider/rpc/solanaRpcMiddlewares.js"],
  "sourcesContent": ["import { createFetchMiddleware } from '@toruslabs/base-controllers';\nimport { mergeMiddleware } from '@web3auth/auth';\n\nfunction createSolanaChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createSolanaProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createConfigMiddleware(providerConfig) {\n  const {\n    chainId\n  } = providerConfig;\n  return mergeMiddleware([createSolanaChainIdMiddleware(chainId), createSolanaProviderConfigMiddleware(providerConfig)]);\n}\nfunction createSolanaJsonRpcClient(providerConfig) {\n  const {\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nexport { createConfigMiddleware, createSolanaChainIdMiddleware, createSolanaJsonRpcClient, createSolanaProviderConfigMiddleware };\n", "import { createAsyncMiddleware, mergeMiddleware } from '@web3auth/auth';\nimport { SOLANA_METHOD_TYPES } from '@web3auth/ws-embed';\n\nfunction createGetAccountsMiddleware({\n  getAccounts\n}) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== SOLANA_METHOD_TYPES.GET_ACCOUNTS) return next();\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createGetPublicKeyMiddleware({\n  getPublicKey\n}) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"getPublicKey\") return next();\n    if (!getPublicKey) throw new Error(\"WalletMiddleware - opts.getPublicKey not provided\");\n    const publicKey = await getPublicKey(request);\n    response.result = publicKey;\n    return undefined;\n  });\n}\nfunction createRequestAccountsMiddleware({\n  requestAccounts\n}) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== SOLANA_METHOD_TYPES.SOLANA_REQUEST_ACCOUNTS) return next();\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n    const result = await handler(request);\n    response.result = result;\n    return undefined;\n  });\n}\nfunction createSolanaMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    requestAccounts,\n    signTransaction,\n    signAndSendTransaction,\n    signAllTransactions,\n    signMessage,\n    getPrivateKey,\n    getSecretKey,\n    getPublicKey\n  } = providerHandlers;\n  return mergeMiddleware([createRequestAccountsMiddleware({\n    requestAccounts\n  }), createGetAccountsMiddleware({\n    getAccounts\n  }), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.SIGN_TRANSACTION, signTransaction), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.SEND_TRANSACTION, signAndSendTransaction), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.SIGN_ALL_TRANSACTIONS, signAllTransactions), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.SIGN_MESSAGE, signMessage), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.SOLANA_PRIVATE_KEY, getPrivateKey), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.PRIVATE_KEY, getPrivateKey), createGenericJRPCMiddleware(\"public_key\", getPublicKey), createGenericJRPCMiddleware(\"solanaPublicKey\", getPublicKey), createGenericJRPCMiddleware(\"solanaSecretKey\", getSecretKey)]);\n}\nfunction createSolanaChainSwitchMiddleware({\n  switchSolanaChain\n}) {\n  return mergeMiddleware([createGenericJRPCMiddleware(\"switchSolanaChain\", switchSolanaChain)]);\n}\nfunction createSolanaAccountMiddleware({\n  updatePrivatekey\n}) {\n  return mergeMiddleware([createGenericJRPCMiddleware(\"updateAccount\", updatePrivatekey)]);\n}\n\nexport { createGenericJRPCMiddleware, createGetAccountsMiddleware, createGetPublicKeyMiddleware, createRequestAccountsMiddleware, createSolanaAccountMiddleware, createSolanaChainSwitchMiddleware, createSolanaMiddleware };\n"],
  "mappings": "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",
  "names": []
}
