import {
  SOLANA_METHOD_TYPES
} from "./chunk-XLWISUI2.js";
import {
  createAsyncMiddleware,
  createFetchMiddleware,
  mergeMiddleware
} from "./chunk-B2N4C5QO.js";

// node_modules/@web3auth/no-modal/dist/lib.esm/providers/solana-provider/rpc/JrpcClient.js
function createSolanaChainIdMiddleware(chainId) {
  return (req, res, next, end) => {
    if (req.method === "solana_chainId") {
      res.result = chainId;
      return end();
    }
    return next();
  };
}
function createSolanaProviderConfigMiddleware(providerConfig) {
  return (req, res, next, end) => {
    if (req.method === "solana_provider_config") {
      res.result = providerConfig;
      return end();
    }
    return next();
  };
}
function createConfigMiddleware(providerConfig) {
  const {
    chainId
  } = providerConfig;
  return mergeMiddleware([createSolanaChainIdMiddleware(chainId), createSolanaProviderConfigMiddleware(providerConfig)]);
}
function createSolanaJsonRpcClient(providerConfig) {
  const {
    rpcTarget
  } = providerConfig;
  const fetchMiddleware = createFetchMiddleware({
    rpcTarget
  });
  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);
  return {
    networkMiddleware,
    fetchMiddleware
  };
}

// node_modules/@web3auth/no-modal/dist/lib.esm/providers/solana-provider/rpc/solanaRpcMiddlewares.js
function createGetAccountsMiddleware({
  getAccounts
}) {
  return createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== SOLANA_METHOD_TYPES.GET_ACCOUNTS) return next();
    if (!getAccounts) throw new Error("WalletMiddleware - opts.getAccounts not provided");
    const accounts = await getAccounts(request);
    response.result = accounts;
    return void 0;
  });
}
function createGetPublicKeyMiddleware({
  getPublicKey
}) {
  return createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== "getPublicKey") return next();
    if (!getPublicKey) throw new Error("WalletMiddleware - opts.getPublicKey not provided");
    const publicKey = await getPublicKey(request);
    response.result = publicKey;
    return void 0;
  });
}
function createRequestAccountsMiddleware({
  requestAccounts
}) {
  return createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== SOLANA_METHOD_TYPES.SOLANA_REQUEST_ACCOUNTS) return next();
    if (!requestAccounts) throw new Error("WalletMiddleware - opts.requestAccounts not provided");
    const accounts = await requestAccounts(request);
    response.result = accounts;
    return void 0;
  });
}
function createGenericJRPCMiddleware(targetMethod, handler) {
  return createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== targetMethod) return next();
    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);
    const result = await handler(request);
    response.result = result;
    return void 0;
  });
}
function createSolanaMiddleware(providerHandlers) {
  const {
    getAccounts,
    requestAccounts,
    signTransaction,
    signAndSendTransaction,
    signAllTransactions,
    signMessage,
    getPrivateKey,
    getSecretKey,
    getPublicKey
  } = providerHandlers;
  return mergeMiddleware([createRequestAccountsMiddleware({
    requestAccounts
  }), createGetAccountsMiddleware({
    getAccounts
  }), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.SIGN_TRANSACTION, signTransaction), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.SEND_TRANSACTION, signAndSendTransaction), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.SIGN_ALL_TRANSACTIONS, signAllTransactions), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.SIGN_MESSAGE, signMessage), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.SOLANA_PRIVATE_KEY, getPrivateKey), createGenericJRPCMiddleware(SOLANA_METHOD_TYPES.PRIVATE_KEY, getPrivateKey), createGenericJRPCMiddleware("public_key", getPublicKey), createGenericJRPCMiddleware("solanaPublicKey", getPublicKey), createGenericJRPCMiddleware("solanaSecretKey", getSecretKey)]);
}
function createSolanaChainSwitchMiddleware({
  switchSolanaChain
}) {
  return mergeMiddleware([createGenericJRPCMiddleware("switchSolanaChain", switchSolanaChain)]);
}
function createSolanaAccountMiddleware({
  updatePrivatekey
}) {
  return mergeMiddleware([createGenericJRPCMiddleware("updateAccount", updatePrivatekey)]);
}

export {
  createSolanaChainIdMiddleware,
  createSolanaProviderConfigMiddleware,
  createConfigMiddleware,
  createSolanaJsonRpcClient,
  createGetAccountsMiddleware,
  createGetPublicKeyMiddleware,
  createRequestAccountsMiddleware,
  createGenericJRPCMiddleware,
  createSolanaMiddleware,
  createSolanaChainSwitchMiddleware,
  createSolanaAccountMiddleware
};
//# sourceMappingURL=chunk-YZ25BAVE.js.map
