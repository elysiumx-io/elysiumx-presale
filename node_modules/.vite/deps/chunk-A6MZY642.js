import {
  WalletInitializationError,
  WalletLoginError,
  Web3AuthError
} from "./chunk-VBPUSRQJ.js";
import {
  CHAIN_NAMESPACES,
  SIGNER_MAP,
  SafeEventEmitter,
  WEB3AUTH_NETWORK,
  jwtDecode
} from "./chunk-B2N4C5QO.js";
import {
  _defineProperty,
  _objectSpread2,
  get
} from "./chunk-Z2JNO6L5.js";

// node_modules/@web3auth/no-modal/dist/lib.esm/base/constants.js
var SMART_ACCOUNT_WALLET_SCOPE = {
  EMBEDDED: "embedded",
  ALL: "all"
};
var MODAL_SIGN_IN_METHODS = {
  SOCIAL: "social",
  PASSWORDLESS: "passwordless",
  EXTERNAL_WALLETS: "externalWallets"
};
var WIDGET_TYPE = {
  MODAL: "modal",
  EMBED: "embed"
};
var WEB3AUTH_STATE_STORAGE_KEY = "Web3Auth-state";
var LOGIN_MODE = {
  MODAL: "modal",
  NO_MODAL: "no-modal"
};
var SOLANA_CAIP_CHAIN_MAP = {
  "0x65": "5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",
  "0x66": "4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z",
  "0x67": "EtWTRABZaYq6iMfeYKouRu166VU2xqa1"
};

// node_modules/@web3auth/no-modal/dist/lib.esm/base/utils.js
var isHexStrict = (hex) => {
  return (typeof hex === "string" || typeof hex === "number") && /^(-)?0x[0-9a-f]*$/i.test(hex);
};
var signerHost = (web3AuthNetwork = WEB3AUTH_NETWORK.SAPPHIRE_MAINNET) => {
  return SIGNER_MAP[web3AuthNetwork];
};
var fetchProjectConfig = async ({
  clientId,
  web3AuthNetwork,
  aaProvider,
  authBuildEnv
}) => {
  const url = new URL(`${signerHost(web3AuthNetwork)}/api/v2/configuration`);
  url.searchParams.append("project_id", clientId);
  url.searchParams.append("network", web3AuthNetwork);
  if (authBuildEnv) url.searchParams.append("build_env", authBuildEnv);
  if (aaProvider) url.searchParams.append("aa_provider", aaProvider);
  const res = await get(url.href);
  return res;
};
var fetchWalletRegistry = async (url) => {
  const res = await get(url || "https://assets.web3auth.io/v1/wallet-registry.json");
  return res;
};
var normalizeWalletName = (name) => {
  let normalizedName = name.toLowerCase();
  normalizedName = normalizedName.split("|")[0];
  normalizedName = normalizedName.replace(/-/g, " ");
  normalizedName = normalizedName.replace(/\s+/g, " ");
  normalizedName = normalizedName.replace(/wallet$/i, "").trim();
  normalizedName = normalizedName.replace(/\s/g, "-");
  return normalizedName;
};
var fromWagmiChain = (chain) => {
  var _chain$blockExplorers, _chain$rpcUrls$defaul;
  return {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    chainId: `0x${chain.id.toString(16)}`,
    rpcTarget: chain.rpcUrls.default.http[0],
    displayName: chain.name,
    blockExplorerUrl: ((_chain$blockExplorers = chain.blockExplorers) === null || _chain$blockExplorers === void 0 ? void 0 : _chain$blockExplorers.default.url) || "",
    ticker: chain.nativeCurrency.symbol,
    tickerName: chain.nativeCurrency.name,
    logo: "",
    decimals: chain.nativeCurrency.decimals,
    isTestnet: chain.testnet,
    wsTarget: (_chain$rpcUrls$defaul = chain.rpcUrls.default.webSocket) === null || _chain$rpcUrls$defaul === void 0 ? void 0 : _chain$rpcUrls$defaul[0]
  };
};
function withAbort(fn, signal, onAbort) {
  if (!signal) return fn();
  if (signal.aborted) return Promise.reject(new DOMException("Aborted", "AbortError"));
  return new Promise((resolve, reject) => {
    const abort = () => {
      onAbort === null || onAbort === void 0 || onAbort();
      reject(new DOMException("Aborted", "AbortError"));
    };
    signal.addEventListener("abort", abort);
    return Promise.resolve().then(() => fn()).then(resolve, reject).finally(() => {
      signal.removeEventListener("abort", abort);
    });
  });
}
var isBrowser = () => typeof window !== "undefined" && typeof document !== "undefined";
var fromViemChain = fromWagmiChain;
var getWhitelabelAnalyticsProperties = (uiConfig) => {
  var _uiConfig$theme, _uiConfig$theme2;
  return {
    whitelabel_app_name: uiConfig === null || uiConfig === void 0 ? void 0 : uiConfig.appName,
    whitelabel_app_url: uiConfig === null || uiConfig === void 0 ? void 0 : uiConfig.appUrl,
    whitelabel_logo_light_enabled: Boolean(uiConfig === null || uiConfig === void 0 ? void 0 : uiConfig.logoLight),
    whitelabel_logo_dark_enabled: Boolean(uiConfig === null || uiConfig === void 0 ? void 0 : uiConfig.logoDark),
    whitelabel_default_language: uiConfig === null || uiConfig === void 0 ? void 0 : uiConfig.defaultLanguage,
    whitelabel_theme_mode: uiConfig === null || uiConfig === void 0 ? void 0 : uiConfig.mode,
    whitelabel_use_logo_loader: uiConfig === null || uiConfig === void 0 ? void 0 : uiConfig.useLogoLoader,
    whitelabel_theme_primary: uiConfig === null || uiConfig === void 0 || (_uiConfig$theme = uiConfig.theme) === null || _uiConfig$theme === void 0 ? void 0 : _uiConfig$theme.primary,
    whitelabel_theme_on_primary: uiConfig === null || uiConfig === void 0 || (_uiConfig$theme2 = uiConfig.theme) === null || _uiConfig$theme2 === void 0 ? void 0 : _uiConfig$theme2.onPrimary,
    whitelabel_tnc_link_enabled: Boolean(uiConfig === null || uiConfig === void 0 ? void 0 : uiConfig.tncLink),
    whitelabel_privacy_policy_enabled: Boolean(uiConfig === null || uiConfig === void 0 ? void 0 : uiConfig.privacyPolicy)
  };
};
var getAaAnalyticsProperties = (accountAbstractionConfig) => {
  var _accountAbstractionCo, _accountAbstractionCo2, _accountAbstractionCo3, _accountAbstractionCo4, _accountAbstractionCo5;
  const bundlerHostnames = Array.from(new Set(accountAbstractionConfig === null || accountAbstractionConfig === void 0 || (_accountAbstractionCo = accountAbstractionConfig.chains) === null || _accountAbstractionCo === void 0 ? void 0 : _accountAbstractionCo.map((chain) => {
    var _chain$bundlerConfig;
    return getHostname((_chain$bundlerConfig = chain.bundlerConfig) === null || _chain$bundlerConfig === void 0 ? void 0 : _chain$bundlerConfig.url);
  }).filter(Boolean)));
  const paymasterHostnames = Array.from(new Set(accountAbstractionConfig === null || accountAbstractionConfig === void 0 || (_accountAbstractionCo2 = accountAbstractionConfig.chains) === null || _accountAbstractionCo2 === void 0 ? void 0 : _accountAbstractionCo2.map((chain) => {
    var _chain$paymasterConfi;
    return getHostname((_chain$paymasterConfi = chain.paymasterConfig) === null || _chain$paymasterConfi === void 0 ? void 0 : _chain$paymasterConfi.url);
  }).filter(Boolean)));
  return {
    aa_smart_account_type: accountAbstractionConfig === null || accountAbstractionConfig === void 0 ? void 0 : accountAbstractionConfig.smartAccountType,
    aa_chain_ids: accountAbstractionConfig === null || accountAbstractionConfig === void 0 || (_accountAbstractionCo3 = accountAbstractionConfig.chains) === null || _accountAbstractionCo3 === void 0 ? void 0 : _accountAbstractionCo3.map((chain) => getCaipChainId({
      chainId: chain.chainId,
      chainNamespace: CHAIN_NAMESPACES.EIP155
    })),
    aa_bundler_urls: bundlerHostnames,
    aa_paymaster_urls: paymasterHostnames,
    aa_paymaster_enabled: paymasterHostnames.length > 0,
    aa_paymaster_context_enabled: accountAbstractionConfig === null || accountAbstractionConfig === void 0 || (_accountAbstractionCo4 = accountAbstractionConfig.chains) === null || _accountAbstractionCo4 === void 0 ? void 0 : _accountAbstractionCo4.some((chain) => {
      var _chain$bundlerConfig2;
      return (_chain$bundlerConfig2 = chain.bundlerConfig) === null || _chain$bundlerConfig2 === void 0 ? void 0 : _chain$bundlerConfig2.paymasterContext;
    }),
    aa_erc20_paymaster_enabled: accountAbstractionConfig === null || accountAbstractionConfig === void 0 || (_accountAbstractionCo5 = accountAbstractionConfig.chains) === null || _accountAbstractionCo5 === void 0 ? void 0 : _accountAbstractionCo5.some((chain) => {
      var _chain$bundlerConfig3;
      return (_chain$bundlerConfig3 = chain.bundlerConfig) === null || _chain$bundlerConfig3 === void 0 || (_chain$bundlerConfig3 = _chain$bundlerConfig3.paymasterContext) === null || _chain$bundlerConfig3 === void 0 ? void 0 : _chain$bundlerConfig3.token;
    })
  };
};
var getWalletServicesAnalyticsProperties = (walletServicesConfig) => {
  var _walletServicesConfig, _walletServicesConfig2, _walletServicesConfig3, _walletServicesConfig4, _walletServicesConfig5, _walletServicesConfig6, _walletServicesConfig7, _walletServicesConfig8, _walletServicesConfig9, _walletServicesConfig0, _walletServicesConfig1;
  return {
    ws_confirmation_strategy: walletServicesConfig === null || walletServicesConfig === void 0 ? void 0 : walletServicesConfig.confirmationStrategy,
    ws_enable_key_export: walletServicesConfig === null || walletServicesConfig === void 0 ? void 0 : walletServicesConfig.enableKeyExport,
    ws_show_widget_button: walletServicesConfig === null || walletServicesConfig === void 0 || (_walletServicesConfig = walletServicesConfig.whiteLabel) === null || _walletServicesConfig === void 0 ? void 0 : _walletServicesConfig.showWidgetButton,
    ws_button_position: walletServicesConfig === null || walletServicesConfig === void 0 || (_walletServicesConfig2 = walletServicesConfig.whiteLabel) === null || _walletServicesConfig2 === void 0 ? void 0 : _walletServicesConfig2.buttonPosition,
    ws_hide_nft_display: walletServicesConfig === null || walletServicesConfig === void 0 || (_walletServicesConfig3 = walletServicesConfig.whiteLabel) === null || _walletServicesConfig3 === void 0 ? void 0 : _walletServicesConfig3.hideNftDisplay,
    ws_hide_token_display: walletServicesConfig === null || walletServicesConfig === void 0 || (_walletServicesConfig4 = walletServicesConfig.whiteLabel) === null || _walletServicesConfig4 === void 0 ? void 0 : _walletServicesConfig4.hideTokenDisplay,
    ws_hide_transfers: walletServicesConfig === null || walletServicesConfig === void 0 || (_walletServicesConfig5 = walletServicesConfig.whiteLabel) === null || _walletServicesConfig5 === void 0 ? void 0 : _walletServicesConfig5.hideTransfers,
    ws_hide_topup: walletServicesConfig === null || walletServicesConfig === void 0 || (_walletServicesConfig6 = walletServicesConfig.whiteLabel) === null || _walletServicesConfig6 === void 0 ? void 0 : _walletServicesConfig6.hideTopup,
    ws_hide_receive: walletServicesConfig === null || walletServicesConfig === void 0 || (_walletServicesConfig7 = walletServicesConfig.whiteLabel) === null || _walletServicesConfig7 === void 0 ? void 0 : _walletServicesConfig7.hideReceive,
    ws_hide_swap: walletServicesConfig === null || walletServicesConfig === void 0 || (_walletServicesConfig8 = walletServicesConfig.whiteLabel) === null || _walletServicesConfig8 === void 0 ? void 0 : _walletServicesConfig8.hideSwap,
    ws_hide_show_all_tokens: walletServicesConfig === null || walletServicesConfig === void 0 || (_walletServicesConfig9 = walletServicesConfig.whiteLabel) === null || _walletServicesConfig9 === void 0 ? void 0 : _walletServicesConfig9.hideShowAllTokens,
    ws_hide_wallet_connect: walletServicesConfig === null || walletServicesConfig === void 0 || (_walletServicesConfig0 = walletServicesConfig.whiteLabel) === null || _walletServicesConfig0 === void 0 ? void 0 : _walletServicesConfig0.hideWalletConnect,
    ws_default_portfolio: walletServicesConfig === null || walletServicesConfig === void 0 || (_walletServicesConfig1 = walletServicesConfig.whiteLabel) === null || _walletServicesConfig1 === void 0 ? void 0 : _walletServicesConfig1.defaultPortfolio
  };
};
var sdkVersion = "10.0.6";
var getErrorAnalyticsProperties = (error) => {
  try {
    const code = error instanceof Web3AuthError ? error.code : error === null || error === void 0 ? void 0 : error.code;
    const message = error instanceof Error ? error.message : (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString());
    return {
      error_message: message,
      error_code: code
    };
  } catch {
    return {
      error_message: "Unknown error",
      error_code: void 0
    };
  }
};
var getHostname = (url) => {
  try {
    return new URL(url).hostname;
  } catch {
    return "";
  }
};
var getCaipChainId = (chain) => {
  if (chain.chainNamespace === CHAIN_NAMESPACES.EIP155) {
    return `${chain.chainNamespace}:${parseInt(chain.chainId, 16)}`;
  }
  if (chain.chainNamespace === CHAIN_NAMESPACES.SOLANA) {
    return `${chain.chainNamespace}:${SOLANA_CAIP_CHAIN_MAP[chain.chainId]}`;
  }
  return `${chain.chainNamespace}:${chain.chainId}`;
};

// node_modules/@web3auth/no-modal/dist/lib.esm/base/chain/IChainInterface.js
var CONNECTOR_NAMESPACES = {
  EIP155: "eip155",
  SOLANA: "solana",
  CASPER: "casper",
  XRPL: "xrpl",
  MULTICHAIN: "multichain"
};

// node_modules/@web3auth/no-modal/dist/lib.esm/base/wallet/index.js
var MULTI_CHAIN_CONNECTORS = {
  AUTH: "auth",
  WALLET_CONNECT_V2: "wallet-connect-v2",
  METAMASK: "metamask"
};
var SOLANA_CONNECTORS = _objectSpread2({}, MULTI_CHAIN_CONNECTORS);
var EVM_CONNECTORS = _objectSpread2({
  COINBASE: "coinbase"
}, MULTI_CHAIN_CONNECTORS);
var WALLET_CONNECTORS = _objectSpread2(_objectSpread2({}, EVM_CONNECTORS), SOLANA_CONNECTORS);
var CONNECTOR_NAMES = {
  [MULTI_CHAIN_CONNECTORS.AUTH]: "Auth",
  [MULTI_CHAIN_CONNECTORS.WALLET_CONNECT_V2]: "Wallet Connect v2",
  [EVM_CONNECTORS.COINBASE]: "Coinbase Smart Wallet",
  [EVM_CONNECTORS.METAMASK]: "MetaMask"
};

// node_modules/@web3auth/no-modal/dist/lib.esm/base/connector/constants.js
var CONNECTOR_STATUS = {
  NOT_READY: "not_ready",
  READY: "ready",
  CONNECTING: "connecting",
  CONNECTED: "connected",
  DISCONNECTING: "disconnecting",
  DISCONNECTED: "disconnected",
  ERRORED: "errored"
};
var CONNECTOR_EVENTS = _objectSpread2(_objectSpread2({}, CONNECTOR_STATUS), {}, {
  CONNECTOR_DATA_UPDATED: "connector_data_updated",
  CACHE_CLEAR: "cache_clear",
  CONNECTORS_UPDATED: "connectors_updated",
  MFA_ENABLED: "mfa_enabled",
  REHYDRATION_ERROR: "rehydration_error"
});
var CONNECTOR_CATEGORY = {
  EXTERNAL: "external",
  IN_APP: "in_app"
};

// node_modules/@web3auth/no-modal/dist/lib.esm/base/connector/baseConnector.js
var BaseConnector = class extends SafeEventEmitter {
  constructor(options) {
    super();
    _defineProperty(this, "connectorData", {});
    _defineProperty(this, "isInjected", void 0);
    _defineProperty(this, "icon", void 0);
    _defineProperty(this, "coreOptions", void 0);
    _defineProperty(this, "rehydrated", false);
    _defineProperty(this, "connectorNamespace", void 0);
    _defineProperty(this, "type", void 0);
    _defineProperty(this, "name", void 0);
    _defineProperty(this, "status", void 0);
    this.coreOptions = options.coreOptions;
  }
  get connnected() {
    return this.status === CONNECTOR_STATUS.CONNECTED;
  }
  checkConnectionRequirements() {
    if (this.name === WALLET_CONNECTORS.WALLET_CONNECT_V2 && this.status === CONNECTOR_STATUS.CONNECTING) return;
    if (this.name === WALLET_CONNECTORS.METAMASK && !this.isInjected && this.status === CONNECTOR_STATUS.CONNECTING) return;
    if (this.status === CONNECTOR_STATUS.CONNECTING) throw WalletInitializationError.notReady("Already connecting");
    if (this.status === CONNECTOR_STATUS.CONNECTED) throw WalletLoginError.connectionError("Already connected");
    if (this.status !== CONNECTOR_STATUS.READY) throw WalletLoginError.connectionError("Wallet connector is not ready yet, Please wait for init function to resolve before calling connect/connectTo function");
  }
  checkInitializationRequirements({
    chainConfig
  }) {
    if (!this.coreOptions.clientId) throw WalletInitializationError.invalidParams("Please initialize Web3Auth with a valid clientId in constructor");
    if (!chainConfig) throw WalletInitializationError.invalidParams("chainConfig is required before initialization");
    if (!chainConfig.rpcTarget && chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {
      throw WalletInitializationError.invalidParams("rpcTarget is required in chainConfig");
    }
    if (!chainConfig.chainId && chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {
      throw WalletInitializationError.invalidParams("chainID is required in chainConfig");
    }
    if (this.connectorNamespace !== CONNECTOR_NAMESPACES.MULTICHAIN && this.connectorNamespace !== chainConfig.chainNamespace) throw WalletInitializationError.invalidParams("Connector doesn't support this chain namespace");
    if (this.status === CONNECTOR_STATUS.NOT_READY) return;
    if (this.status === CONNECTOR_STATUS.CONNECTED) throw WalletInitializationError.notReady("Already connected");
    if (this.status === CONNECTOR_STATUS.READY) throw WalletInitializationError.notReady("Connector is already initialized");
  }
  checkDisconnectionRequirements() {
    if (this.status !== CONNECTOR_STATUS.CONNECTED) throw WalletLoginError.disconnectionError("Not connected with wallet");
  }
  checkSwitchChainRequirements(params, init = false) {
    if (!init && !this.provider) throw WalletLoginError.notConnectedError("Not connected with wallet.");
    if (!this.coreOptions.chains) throw WalletInitializationError.invalidParams("chainConfigs is required");
    const doesChainExist = this.coreOptions.chains.some((x) => x.chainId === params.chainId && (x.chainNamespace === this.connectorNamespace || this.connectorNamespace === CONNECTOR_NAMESPACES.MULTICHAIN));
    if (!doesChainExist) throw WalletInitializationError.invalidParams("Invalid chainId");
  }
  updateConnectorData(data) {
    this.connectorData = data;
    this.emit(CONNECTOR_EVENTS.CONNECTOR_DATA_UPDATED, {
      connectorName: this.name,
      data
    });
  }
};

// node_modules/@web3auth/no-modal/dist/lib.esm/base/connector/utils.js
function storageAvailable(type) {
  let storageExists = false;
  let storageLength = 0;
  let storage;
  try {
    storage = window[type];
    storageExists = true;
    storageLength = storage.length;
    const x = "__storage_test__";
    storage.setItem(x, x);
    storage.removeItem(x);
    return true;
  } catch (err) {
    const error = err;
    return !!(error && // everything except Firefox
    (error.code === 22 || // Firefox
    error.code === 1014 || // test name field too, because code might not be present
    // everything except Firefox
    error.name === "QuotaExceededError" || // Firefox
    error.name === "NS_ERROR_DOM_QUOTA_REACHED") && // acknowledge QuotaExceededError only if there's something already stored
    storageExists && storageLength !== 0);
  }
}
var checkIfTokenIsExpired = (token) => {
  const decoded = jwtDecode(token);
  if (!decoded.exp) {
    return true;
  }
  if (decoded.exp < Math.floor(Date.now() / 1e3)) {
    return true;
  }
  return false;
};
var getSavedToken = (userAddress, issuer) => {
  if (storageAvailable("localStorage")) {
    return localStorage.getItem(`${userAddress.toLowerCase()}_${issuer}`);
  }
  return null;
};
var saveToken = (userAddress, issuer, token) => {
  if (storageAvailable("localStorage")) {
    return localStorage.setItem(`${userAddress.toLowerCase()}_${issuer}`, token);
  }
  return null;
};
var clearToken = (userAddress, issuer) => {
  if (storageAvailable("localStorage")) {
    return localStorage.removeItem(`${userAddress.toLowerCase()}_${issuer}`);
  }
  return null;
};

export {
  SMART_ACCOUNT_WALLET_SCOPE,
  MODAL_SIGN_IN_METHODS,
  WIDGET_TYPE,
  WEB3AUTH_STATE_STORAGE_KEY,
  LOGIN_MODE,
  SOLANA_CAIP_CHAIN_MAP,
  isHexStrict,
  signerHost,
  fetchProjectConfig,
  fetchWalletRegistry,
  normalizeWalletName,
  fromWagmiChain,
  withAbort,
  isBrowser,
  fromViemChain,
  getWhitelabelAnalyticsProperties,
  getAaAnalyticsProperties,
  getWalletServicesAnalyticsProperties,
  sdkVersion,
  getErrorAnalyticsProperties,
  getHostname,
  getCaipChainId,
  CONNECTOR_NAMESPACES,
  MULTI_CHAIN_CONNECTORS,
  SOLANA_CONNECTORS,
  EVM_CONNECTORS,
  WALLET_CONNECTORS,
  CONNECTOR_NAMES,
  CONNECTOR_STATUS,
  CONNECTOR_EVENTS,
  CONNECTOR_CATEGORY,
  BaseConnector,
  storageAvailable,
  checkIfTokenIsExpired,
  getSavedToken,
  saveToken,
  clearToken
};
//# sourceMappingURL=chunk-A6MZY642.js.map
