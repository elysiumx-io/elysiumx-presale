import {
  BaseConnector,
  CONNECTOR_CATEGORY,
  CONNECTOR_EVENTS,
  CONNECTOR_NAMESPACES,
  CONNECTOR_STATUS,
  checkIfTokenIsExpired,
  clearToken,
  getSavedToken,
  normalizeWalletName,
  saveToken
} from "./chunk-A6MZY642.js";
import {
  log
} from "./chunk-NSXL3SWJ.js";
import {
  EVM_METHOD_TYPES
} from "./chunk-XLWISUI2.js";
import {
  WalletInitializationError,
  WalletLoginError,
  Web3AuthError
} from "./chunk-VBPUSRQJ.js";
import {
  CHAIN_NAMESPACES,
  signChallenge,
  verifySignedChallenge
} from "./chunk-B2N4C5QO.js";
import {
  _defineProperty
} from "./chunk-Z2JNO6L5.js";

// node_modules/@web3auth/no-modal/dist/lib.esm/connectors/base-evm-connector/baseEvmConnector.js
var BaseEvmConnector = class extends BaseConnector {
  async init(_) {
  }
  async getIdentityToken() {
    if (!this.provider || this.status !== CONNECTOR_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();
    if (!this.coreOptions) throw WalletInitializationError.invalidParams("Please initialize Web3Auth with valid options");
    const accounts = await this.provider.request({
      method: EVM_METHOD_TYPES.GET_ACCOUNTS
    });
    if (accounts && accounts.length > 0) {
      const existingToken = getSavedToken(accounts[0], this.name);
      if (existingToken) {
        const isExpired = checkIfTokenIsExpired(existingToken);
        if (!isExpired) {
          return {
            idToken: existingToken
          };
        }
      }
      const chainId = await this.provider.request({
        method: "eth_chainId"
      });
      const currentChainConfig = this.coreOptions.chains.find((x) => x.chainId === chainId);
      if (!currentChainConfig) throw WalletInitializationError.invalidParams("chainConfig is required before authentication");
      const {
        chainNamespace
      } = currentChainConfig;
      const payload = {
        domain: window.location.origin,
        uri: window.location.href,
        address: accounts[0],
        chainId: parseInt(chainId, 16),
        version: "1",
        nonce: Math.random().toString(36).slice(2),
        issuedAt: (/* @__PURE__ */ new Date()).toISOString()
      };
      const challenge = await signChallenge(payload, chainNamespace);
      const hexChallenge = `0x${Buffer.from(challenge, "utf8").toString("hex")}`;
      const signedMessage = await this.provider.request({
        method: EVM_METHOD_TYPES.PERSONAL_SIGN,
        params: [hexChallenge, accounts[0]]
      });
      const idToken = await verifySignedChallenge(chainNamespace, signedMessage, challenge, this.name, this.coreOptions.sessionTime, this.coreOptions.clientId, this.coreOptions.web3AuthNetwork);
      saveToken(accounts[0], this.name, idToken);
      return {
        idToken
      };
    }
    throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
  }
  async disconnectSession() {
    super.checkDisconnectionRequirements();
    const accounts = await this.provider.request({
      method: "eth_accounts"
    });
    if (accounts && accounts.length > 0) {
      clearToken(accounts[0], this.name);
    }
  }
  async disconnect() {
    this.rehydrated = false;
    this.emit(CONNECTOR_EVENTS.DISCONNECTED);
  }
};

// node_modules/@web3auth/no-modal/dist/lib.esm/connectors/injected-evm-connector/injectedEvmConnector.js
var InjectedEvmConnector = class extends BaseEvmConnector {
  constructor(options) {
    super(options);
    _defineProperty(this, "connectorNamespace", CONNECTOR_NAMESPACES.EIP155);
    _defineProperty(this, "currentChainNamespace", CHAIN_NAMESPACES.EIP155);
    _defineProperty(this, "type", CONNECTOR_CATEGORY.EXTERNAL);
    _defineProperty(this, "name", void 0);
    _defineProperty(this, "isInjected", true);
    _defineProperty(this, "status", CONNECTOR_STATUS.NOT_READY);
    _defineProperty(this, "injectedProvider", null);
    this.name = options.name;
    this.injectedProvider = options.provider;
    this.icon = options.icon;
  }
  get provider() {
    if (this.status !== CONNECTOR_STATUS.NOT_READY && this.injectedProvider) {
      return this.injectedProvider;
    }
    return null;
  }
  set provider(_) {
    throw new Error("Not implemented");
  }
  async init(options) {
    await super.init(options);
    const chainConfig = this.coreOptions.chains.find((x) => x.chainId === options.chainId);
    super.checkInitializationRequirements({
      chainConfig
    });
    this.status = CONNECTOR_STATUS.READY;
    this.emit(CONNECTOR_EVENTS.READY, this.name);
    try {
      log.debug(`initializing ${this.name} injected connector`);
      if (options.autoConnect) {
        this.rehydrated = true;
        const provider = await this.connect({
          chainId: options.chainId
        });
        if (!provider) {
          this.rehydrated = false;
          throw WalletLoginError.connectionError("Failed to rehydrate.");
        }
      }
    } catch (error) {
      this.emit(CONNECTOR_EVENTS.REHYDRATION_ERROR, error);
    }
  }
  async connect({
    chainId
  }) {
    super.checkConnectionRequirements();
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    const chainConfig = this.coreOptions.chains.find((x) => x.chainId === chainId);
    if (!chainConfig) throw WalletLoginError.connectionError("Chain config is not available");
    this.status = CONNECTOR_STATUS.CONNECTING;
    this.emit(CONNECTOR_EVENTS.CONNECTING, {
      connector: this.name
    });
    try {
      await this.injectedProvider.request({
        method: "eth_requestAccounts"
      });
      if (this.injectedProvider.chainId !== chainConfig.chainId) {
        try {
          await this.switchChain(chainConfig, true);
        } catch {
          await this.addChain(chainConfig, true);
          await this.switchChain(chainConfig, true);
        }
      }
      this.status = CONNECTOR_STATUS.CONNECTED;
      const accountDisconnectHandler = (accounts) => {
        if (accounts.length === 0) {
          var _this$injectedProvide;
          this.disconnect();
          if ((_this$injectedProvide = this.injectedProvider) !== null && _this$injectedProvide !== void 0 && _this$injectedProvide.removeListener) this.injectedProvider.removeListener("accountsChanged", accountDisconnectHandler);
        }
      };
      this.injectedProvider.on("accountsChanged", accountDisconnectHandler);
      this.emit(CONNECTOR_EVENTS.CONNECTED, {
        connector: this.name,
        reconnected: this.rehydrated,
        provider: this.injectedProvider
      });
      return this.injectedProvider;
    } catch (error) {
      this.status = CONNECTOR_STATUS.READY;
      if (!this.rehydrated) this.emit(CONNECTOR_EVENTS.ERRORED, error);
      this.rehydrated = false;
      if (error instanceof Web3AuthError) throw error;
      throw WalletLoginError.connectionError(`Failed to login with ${this.name} injected wallet`);
    }
  }
  async disconnect(options = {
    cleanup: false
  }) {
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    await super.disconnectSession();
    if (typeof this.injectedProvider.removeAllListeners !== "undefined") this.injectedProvider.removeAllListeners();
    try {
      await this.injectedProvider.request({
        method: "wallet_revokePermissions",
        params: [{
          eth_accounts: {}
        }]
      });
    } catch {
    }
    if (options.cleanup) {
      this.status = CONNECTOR_STATUS.NOT_READY;
      this.injectedProvider = null;
    } else {
      this.status = CONNECTOR_STATUS.READY;
    }
    await super.disconnect();
  }
  async getUserInfo() {
    if (this.status !== CONNECTOR_STATUS.CONNECTED) throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }
  async addChain(chainConfig, _init = false) {
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    await this.injectedProvider.request({
      method: "wallet_addEthereumChain",
      params: [{
        chainId: chainConfig.chainId,
        chainName: chainConfig.displayName,
        rpcUrls: [chainConfig.rpcTarget],
        blockExplorerUrls: [chainConfig.blockExplorerUrl],
        nativeCurrency: {
          name: chainConfig.tickerName,
          symbol: chainConfig.ticker,
          decimals: chainConfig.decimals || 18
        },
        iconUrls: [chainConfig.logo]
      }]
    });
  }
  async switchChain(params, init = false) {
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    super.checkSwitchChainRequirements(params, init);
    await this.injectedProvider.request({
      method: "wallet_switchEthereumChain",
      params: [{
        chainId: params.chainId
      }]
    });
  }
  async enableMFA() {
    throw new Error("Method Not implemented");
  }
  async manageMFA() {
    throw new Error("Method Not implemented");
  }
};
var injectedEvmConnector = (providerDetail) => {
  return ({
    coreOptions
  }) => {
    return new InjectedEvmConnector({
      name: normalizeWalletName(providerDetail.info.name),
      provider: providerDetail.provider,
      icon: providerDetail.info.icon,
      coreOptions
    });
  };
};

export {
  BaseEvmConnector,
  injectedEvmConnector
};
//# sourceMappingURL=chunk-7AISMB4O.js.map
