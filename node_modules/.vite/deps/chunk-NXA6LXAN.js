import {
  Web3Auth
} from "./chunk-D3TJF7RS.js";
import {
  ANALYTICS_INTEGRATION_TYPE
} from "./chunk-E37ZTJS5.js";
import {
  CONNECTOR_EVENTS,
  CONNECTOR_STATUS
} from "./chunk-A6MZY642.js";
import {
  WalletInitializationError
} from "./chunk-VBPUSRQJ.js";
import {
  require_react
} from "./chunk-VT65UQWK.js";
import {
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useWeb3AuthInner.js
var import_react2 = __toESM(require_react());

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/context/Web3AuthInnerContext.js
var import_react = __toESM(require_react());
var Web3AuthInnerContext = (0, import_react.createContext)(null);
function Web3AuthInnerProvider(params) {
  const {
    children,
    config,
    initialState
  } = params;
  const {
    web3AuthOptions
  } = config;
  const [isInitializing, setIsInitializing] = (0, import_react.useState)(false);
  const [initError, setInitError] = (0, import_react.useState)(null);
  const [provider, setProvider] = (0, import_react.useState)(null);
  const [isInitialized, setIsInitialized] = (0, import_react.useState)(false);
  const [isMFAEnabled, setIsMFAEnabled] = (0, import_react.useState)(false);
  const web3Auth = (0, import_react.useMemo)(() => {
    setProvider(null);
    return new Web3Auth(web3AuthOptions, initialState);
  }, [web3AuthOptions, initialState]);
  const [isConnected, setIsConnected] = (0, import_react.useState)(web3Auth.status === CONNECTOR_STATUS.CONNECTED);
  const [status, setStatus] = (0, import_react.useState)(web3Auth.status);
  const getPlugin = (0, import_react.useCallback)((name) => {
    if (!web3Auth) throw WalletInitializationError.notReady();
    return web3Auth.getPlugin(name);
  }, [web3Auth]);
  (0, import_react.useEffect)(() => {
    const controller = new AbortController();
    async function init() {
      try {
        setInitError(null);
        setIsInitializing(true);
        web3Auth.setAnalyticsProperties({
          integration_type: ANALYTICS_INTEGRATION_TYPE.REACT_HOOKS
        });
        await web3Auth.init({
          signal: controller.signal
        });
      } catch (error) {
        setInitError(error);
      } finally {
        setIsInitializing(false);
      }
    }
    if (web3Auth) init();
    return () => {
      controller.abort();
    };
  }, [web3Auth, config]);
  (0, import_react.useEffect)(() => {
    const notReadyListener = () => setStatus(web3Auth.status);
    const readyListener = () => {
      setStatus(web3Auth.status);
      setIsInitialized(true);
    };
    const connectedListener = (data) => {
      setStatus(web3Auth.status);
      if (web3Auth.status === CONNECTOR_STATUS.CONNECTED) {
        setIsInitialized(true);
        setIsConnected(true);
        setProvider(data.provider);
      }
    };
    const disconnectedListener = () => {
      setStatus(web3Auth.status);
      setIsConnected(false);
      setProvider(null);
    };
    const connectingListener = () => {
      setStatus(web3Auth.status);
    };
    const errorListener = () => {
      setStatus(web3Auth.status);
    };
    const rehydrationErrorListener = () => {
      setStatus(web3Auth.status);
      setIsConnected(false);
      setProvider(null);
    };
    const mfaEnabledListener = (isMFAEnabled2) => {
      if (typeof isMFAEnabled2 === "boolean") setIsMFAEnabled(isMFAEnabled2);
    };
    if (web3Auth) {
      setStatus(web3Auth.status);
      web3Auth.on(CONNECTOR_EVENTS.NOT_READY, notReadyListener);
      web3Auth.on(CONNECTOR_EVENTS.READY, readyListener);
      web3Auth.on(CONNECTOR_EVENTS.CONNECTED, connectedListener);
      web3Auth.on(CONNECTOR_EVENTS.DISCONNECTED, disconnectedListener);
      web3Auth.on(CONNECTOR_EVENTS.CONNECTING, connectingListener);
      web3Auth.on(CONNECTOR_EVENTS.ERRORED, errorListener);
      web3Auth.on(CONNECTOR_EVENTS.REHYDRATION_ERROR, rehydrationErrorListener);
      web3Auth.on(CONNECTOR_EVENTS.MFA_ENABLED, mfaEnabledListener);
    }
    return () => {
      if (web3Auth) {
        web3Auth.off(CONNECTOR_EVENTS.NOT_READY, notReadyListener);
        web3Auth.off(CONNECTOR_EVENTS.READY, readyListener);
        web3Auth.off(CONNECTOR_EVENTS.CONNECTED, connectedListener);
        web3Auth.off(CONNECTOR_EVENTS.DISCONNECTED, disconnectedListener);
        web3Auth.off(CONNECTOR_EVENTS.CONNECTING, connectingListener);
        web3Auth.off(CONNECTOR_EVENTS.ERRORED, errorListener);
        web3Auth.off(CONNECTOR_EVENTS.REHYDRATION_ERROR, rehydrationErrorListener);
        web3Auth.off(CONNECTOR_EVENTS.MFA_ENABLED, mfaEnabledListener);
        web3Auth.cleanup();
      }
    };
  }, [web3Auth]);
  const value = (0, import_react.useMemo)(() => {
    return {
      web3Auth,
      isConnected,
      isInitialized,
      provider,
      status,
      isInitializing,
      initError,
      isMFAEnabled,
      getPlugin,
      setIsMFAEnabled
    };
  }, [web3Auth, isConnected, isMFAEnabled, setIsMFAEnabled, isInitialized, provider, status, getPlugin, isInitializing, initError]);
  return (0, import_react.createElement)(Web3AuthInnerContext.Provider, {
    value
  }, children);
}

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useWeb3AuthInner.js
var useWeb3AuthInner = () => {
  const context = (0, import_react2.useContext)(Web3AuthInnerContext);
  if (!context) {
    throw WalletInitializationError.fromCode(1e3, "usage of useWeb3Auth not wrapped in `Web3AuthContextProvider`.");
  }
  return context;
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/hooks/useWeb3Auth.js
var useWeb3Auth = () => {
  const {
    initError,
    isConnected,
    isInitialized,
    isInitializing,
    provider,
    status,
    web3Auth,
    getPlugin
  } = useWeb3AuthInner();
  return {
    initError,
    isConnected,
    isInitialized,
    isInitializing,
    provider,
    status,
    web3Auth,
    getPlugin
  };
};

export {
  Web3AuthInnerContext,
  Web3AuthInnerProvider,
  useWeb3AuthInner,
  useWeb3Auth
};
//# sourceMappingURL=chunk-NXA6LXAN.js.map
