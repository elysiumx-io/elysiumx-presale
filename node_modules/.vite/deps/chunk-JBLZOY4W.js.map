{
  "version": 3,
  "sources": ["../../@web3auth/no-modal/dist/lib.esm/providers/base-provider/utils.js", "../../@web3auth/no-modal/dist/lib.esm/providers/base-provider/baseProvider.js"],
  "sourcesContent": ["import getCreateRandomId from 'json-rpc-random-id';\nexport { getED25519Key } from '@web3auth/auth';\n\nconst createRandomId = getCreateRandomId();\nlet EIP1193_EVENTS = /*#__PURE__*/function (EIP1193_EVENTS) {\n  EIP1193_EVENTS[\"ACCOUNTS_CHANGED\"] = \"accountsChanged\";\n  EIP1193_EVENTS[\"CHAIN_CHANGED\"] = \"chainChanged\";\n  EIP1193_EVENTS[\"CONNECT\"] = \"connect\";\n  EIP1193_EVENTS[\"DISCONNECT\"] = \"disconnect\";\n  EIP1193_EVENTS[\"MESSAGE\"] = \"message\";\n  return EIP1193_EVENTS;\n}({});\n\nexport { EIP1193_EVENTS, createRandomId };\n", "import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseController, createEventEmitterProxy } from '@toruslabs/base-controllers';\nimport { rpcErrors } from '@web3auth/auth';\nimport { EIP1193_EVENTS } from './utils.js';\nimport { WalletInitializationError, WalletProviderError } from '../../base/errors/index.js';\n\nclass BaseProvider extends BaseController {\n  constructor({\n    config,\n    state\n  }) {\n    super({\n      config,\n      state\n    });\n    // should be Assigned in setupProvider\n    _defineProperty(this, \"_providerEngineProxy\", null);\n    // set to true when the keyExportEnabled flag is set by code.\n    // This is to prevent the flag from being overridden by the dashboard config.\n    _defineProperty(this, \"keyExportFlagSetByCode\", false);\n    const {\n      chain\n    } = config;\n    if (!chain) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chain\");\n    if (!chain.chainId) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainId inside chain\");\n    if (!chain.rpcTarget) throw WalletInitializationError.invalidProviderConfigError(\"Please provide rpcTarget inside chain\");\n    if (typeof config.keyExportEnabled === \"boolean\") this.keyExportFlagSetByCode = true;\n    this.defaultState = {\n      chainId: \"loading\"\n    };\n    this.defaultConfig = {\n      chain: config.chain,\n      chains: config.chains,\n      keyExportEnabled: typeof config.keyExportEnabled === \"boolean\" ? config.keyExportEnabled : true\n    };\n    super.initialize();\n  }\n  get currentChain() {\n    return this.config.chains.find(chain => chain.chainId === this.state.chainId);\n  }\n  get provider() {\n    return this._providerEngineProxy;\n  }\n  get chainId() {\n    return this.state.chainId;\n  }\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async request(args) {\n    var _this$provider;\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw rpcErrors.invalidRequest({\n        message: WalletProviderError.invalidRequestArgs().message,\n        data: _objectSpread(_objectSpread({}, args || {}), {}, {\n          cause: WalletProviderError.invalidRequestArgs().message\n        })\n      });\n    }\n    const {\n      method,\n      params\n    } = args;\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw rpcErrors.invalidRequest({\n        message: WalletProviderError.invalidRequestMethod().message,\n        data: _objectSpread(_objectSpread({}, args || {}), {}, {\n          cause: WalletProviderError.invalidRequestMethod().message\n        })\n      });\n    }\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw rpcErrors.invalidRequest({\n        message: WalletProviderError.invalidRequestParams().message,\n        data: _objectSpread(_objectSpread({}, args || {}), {}, {\n          cause: WalletProviderError.invalidRequestParams().message\n        })\n      });\n    }\n    return (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.request(args);\n  }\n  sendAsync(req, callback) {\n    if (callback) return this.send(req, callback);\n    return this.request(req);\n  }\n  send(req, callback) {\n    this.request(req).then(res => callback(null, {\n      result: res\n    })).catch(err => callback(err, null));\n  }\n  updateProviderEngineProxy(provider) {\n    if (this._providerEngineProxy) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this._providerEngineProxy.setTarget(provider);\n\n      // we want events to propagate from Ethereum provider -> wrapper provider (e.g. CommonJRPC provider) -> SDK -> dapp\n      // ensure that only one handler is added for each event\n      const reEmitHandler = event => {\n        // skip newListener event\n        if (event === \"newListener\") return;\n\n        // listen to the event from the Ethereum provider\n        provider.on(event, (...args) => {\n          // handle chainChanged event: update chainId state\n          if (event === EIP1193_EVENTS.CHAIN_CHANGED) {\n            const chainId = args[0];\n            this.update({\n              chainId\n            });\n          }\n\n          // re-emit the event\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          this.emit(event, ...args);\n        });\n      };\n\n      // handle existing events\n      this.eventNames().forEach(event => {\n        reEmitHandler(event);\n      });\n      // handle when a new listener is added\n      this.on(\"newListener\", event => {\n        // skip if the event already exists\n        if (this.listenerCount(event) > 0) return;\n        reEmitHandler(event);\n      });\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy(provider);\n    }\n  }\n  setKeyExportFlag(flag) {\n    if (!this.keyExportFlagSetByCode) {\n      this.configure({\n        keyExportEnabled: flag\n      });\n    }\n  }\n  getProviderEngineProxy() {\n    return this._providerEngineProxy;\n  }\n  getChain(chainId) {\n    return this.config.chains.find(chain => chain.chainId === chainId);\n  }\n}\n\nexport { BaseProvider };\n"],
  "mappings": "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",
  "names": ["getCreateRandomId", "EIP1193_EVENTS"]
}
