import {
  require_json_rpc_random_id
} from "./chunk-BXZIFEFM.js";
import {
  WalletInitializationError,
  WalletProviderError
} from "./chunk-VBPUSRQJ.js";
import {
  BaseController,
  createEventEmitterProxy,
  rpcErrors
} from "./chunk-B2N4C5QO.js";
import {
  _defineProperty,
  _objectSpread2
} from "./chunk-Z2JNO6L5.js";
import {
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/@web3auth/no-modal/dist/lib.esm/providers/base-provider/utils.js
var import_json_rpc_random_id = __toESM(require_json_rpc_random_id());
var createRandomId = (0, import_json_rpc_random_id.default)();
var EIP1193_EVENTS = function(EIP1193_EVENTS2) {
  EIP1193_EVENTS2["ACCOUNTS_CHANGED"] = "accountsChanged";
  EIP1193_EVENTS2["CHAIN_CHANGED"] = "chainChanged";
  EIP1193_EVENTS2["CONNECT"] = "connect";
  EIP1193_EVENTS2["DISCONNECT"] = "disconnect";
  EIP1193_EVENTS2["MESSAGE"] = "message";
  return EIP1193_EVENTS2;
}({});

// node_modules/@web3auth/no-modal/dist/lib.esm/providers/base-provider/baseProvider.js
var BaseProvider = class extends BaseController {
  constructor({
    config,
    state
  }) {
    super({
      config,
      state
    });
    _defineProperty(this, "_providerEngineProxy", null);
    _defineProperty(this, "keyExportFlagSetByCode", false);
    const {
      chain
    } = config;
    if (!chain) throw WalletInitializationError.invalidProviderConfigError("Please provide chain");
    if (!chain.chainId) throw WalletInitializationError.invalidProviderConfigError("Please provide chainId inside chain");
    if (!chain.rpcTarget) throw WalletInitializationError.invalidProviderConfigError("Please provide rpcTarget inside chain");
    if (typeof config.keyExportEnabled === "boolean") this.keyExportFlagSetByCode = true;
    this.defaultState = {
      chainId: "loading"
    };
    this.defaultConfig = {
      chain: config.chain,
      chains: config.chains,
      keyExportEnabled: typeof config.keyExportEnabled === "boolean" ? config.keyExportEnabled : true
    };
    super.initialize();
  }
  get currentChain() {
    return this.config.chains.find((chain) => chain.chainId === this.state.chainId);
  }
  get provider() {
    return this._providerEngineProxy;
  }
  get chainId() {
    return this.state.chainId;
  }
  set provider(_) {
    throw new Error("Method not implemented.");
  }
  async request(args) {
    var _this$provider;
    if (!args || typeof args !== "object" || Array.isArray(args)) {
      throw rpcErrors.invalidRequest({
        message: WalletProviderError.invalidRequestArgs().message,
        data: _objectSpread2(_objectSpread2({}, args || {}), {}, {
          cause: WalletProviderError.invalidRequestArgs().message
        })
      });
    }
    const {
      method,
      params
    } = args;
    if (typeof method !== "string" || method.length === 0) {
      throw rpcErrors.invalidRequest({
        message: WalletProviderError.invalidRequestMethod().message,
        data: _objectSpread2(_objectSpread2({}, args || {}), {}, {
          cause: WalletProviderError.invalidRequestMethod().message
        })
      });
    }
    if (params !== void 0 && !Array.isArray(params) && (typeof params !== "object" || params === null)) {
      throw rpcErrors.invalidRequest({
        message: WalletProviderError.invalidRequestParams().message,
        data: _objectSpread2(_objectSpread2({}, args || {}), {}, {
          cause: WalletProviderError.invalidRequestParams().message
        })
      });
    }
    return (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.request(args);
  }
  sendAsync(req, callback) {
    if (callback) return this.send(req, callback);
    return this.request(req);
  }
  send(req, callback) {
    this.request(req).then((res) => callback(null, {
      result: res
    })).catch((err) => callback(err, null));
  }
  updateProviderEngineProxy(provider) {
    if (this._providerEngineProxy) {
      this._providerEngineProxy.setTarget(provider);
      const reEmitHandler = (event) => {
        if (event === "newListener") return;
        provider.on(event, (...args) => {
          if (event === EIP1193_EVENTS.CHAIN_CHANGED) {
            const chainId = args[0];
            this.update({
              chainId
            });
          }
          this.emit(event, ...args);
        });
      };
      this.eventNames().forEach((event) => {
        reEmitHandler(event);
      });
      this.on("newListener", (event) => {
        if (this.listenerCount(event) > 0) return;
        reEmitHandler(event);
      });
    } else {
      this._providerEngineProxy = createEventEmitterProxy(provider);
    }
  }
  setKeyExportFlag(flag) {
    if (!this.keyExportFlagSetByCode) {
      this.configure({
        keyExportEnabled: flag
      });
    }
  }
  getProviderEngineProxy() {
    return this._providerEngineProxy;
  }
  getChain(chainId) {
    return this.config.chains.find((chain) => chain.chainId === chainId);
  }
};

export {
  createRandomId,
  EIP1193_EVENTS,
  BaseProvider
};
//# sourceMappingURL=chunk-JBLZOY4W.js.map
