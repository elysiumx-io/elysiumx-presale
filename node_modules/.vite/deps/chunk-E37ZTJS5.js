import {
  A,
  C,
  E,
  IEvents,
  Po,
  Qe,
  Qo,
  bases,
  createStorage,
  detect,
  esm_default,
  esm_exports,
  f,
  formatJsonRpcError,
  formatJsonRpcRequest,
  formatJsonRpcResult,
  getBigIntRpcId,
  i,
  import_pino,
  isJsonRpcError,
  isJsonRpcRequest,
  isJsonRpcResponse,
  isJsonRpcResult,
  k,
  o,
  payloadId,
  r,
  require_cjs as require_cjs2,
  require_cjs2 as require_cjs3,
  require_cjs3 as require_cjs4,
  safeJsonParse,
  safeJsonStringify,
  sn,
  y
} from "./chunk-QEJAXTE2.js";
import {
  clear,
  createStore,
  del,
  get,
  keys,
  set
} from "./chunk-ANJCMEYS.js";
import {
  recoverAddress
} from "./chunk-6BO67BC2.js";
import {
  createSolanaJsonRpcClient,
  createSolanaMiddleware
} from "./chunk-YZ25BAVE.js";
import {
  BaseProvider
} from "./chunk-JBLZOY4W.js";
import {
  BaseConnector,
  CONNECTOR_CATEGORY,
  CONNECTOR_EVENTS,
  CONNECTOR_NAMESPACES,
  CONNECTOR_STATUS,
  SOLANA_CAIP_CHAIN_MAP,
  WALLET_CONNECTORS,
  checkIfTokenIsExpired,
  getCaipChainId,
  getSavedToken,
  saveToken
} from "./chunk-A6MZY642.js";
import {
  log
} from "./chunk-NSXL3SWJ.js";
import {
  EVM_METHOD_TYPES,
  SOLANA_METHOD_TYPES
} from "./chunk-XLWISUI2.js";
import {
  WalletInitializationError,
  WalletLoginError,
  Web3AuthError
} from "./chunk-VBPUSRQJ.js";
import {
  CHAIN_NAMESPACES,
  JRPCEngine,
  bs58,
  createAsyncMiddleware,
  createFetchMiddleware,
  createScaffoldMiddleware,
  getErrorAnalyticsProperties,
  mergeMiddleware,
  providerErrors,
  providerFromEngine,
  rpcErrors,
  safeatob,
  signChallenge,
  verifySignedChallenge
} from "./chunk-B2N4C5QO.js";
import {
  base32
} from "./chunk-AQ6AFSCK.js";
import {
  require_events
} from "./chunk-NPY75PGV.js";
import {
  _defineProperty,
  _objectSpread2,
  require_cjs
} from "./chunk-Z2JNO6L5.js";
import {
  gracefulDecodeURIComponent
} from "./chunk-E7YZTEZA.js";
import {
  PersistedPriorityQueue,
  isOffline,
  mergedOptions,
  pWhile,
  recordIntegrationMetric
} from "./chunk-FF6U6DXW.js";
import {
  getCDN,
  getGlobalAnalytics,
  loadScript,
  setGlobalAnalytics,
  setGlobalAnalyticsKey,
  setGlobalCDNUrl
} from "./chunk-HVBN44Z7.js";
import {
  Context,
  SEGMENT_API_HOST,
  Stats,
  applyDestinationMiddleware,
  fetch as fetch2,
  getGlobal,
  getVersionType,
  toFacade,
  version
} from "./chunk-OOI2S6FZ.js";
import {
  ContextCancelation,
  CoreEventFactory,
  CoreEventQueue,
  Emitter,
  PriorityQueue,
  attempt,
  createDeferred,
  dispatch,
  isFunction,
  isNumber,
  isPlainObject,
  isString,
  v4
} from "./chunk-EQGYQIU5.js";
import {
  __assign,
  __awaiter,
  __extends,
  __generator,
  __rest,
  __spreadArray,
  init_tslib_es6
} from "./chunk-I4LZO3IN.js";
import {
  __commonJS,
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/blakejs/util.js
var require_util = __commonJS({
  "node_modules/blakejs/util.js"(exports, module) {
    var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
    function normalizeInput(input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (typeof input === "string") {
        const encoder = new TextEncoder();
        ret = encoder.encode(input);
      } else {
        throw new Error(ERROR_MSG_INPUT);
      }
      return ret;
    }
    function toHex(bytes) {
      return Array.prototype.map.call(bytes, function(n2) {
        return (n2 < 16 ? "0" : "") + n2.toString(16);
      }).join("");
    }
    function uint32ToHex(val) {
      return (4294967296 + val).toString(16).substring(1);
    }
    function debugPrint(label, arr, size) {
      let msg = "\n" + label + " = ";
      for (let i3 = 0; i3 < arr.length; i3 += 2) {
        if (size === 32) {
          msg += uint32ToHex(arr[i3]).toUpperCase();
          msg += " ";
          msg += uint32ToHex(arr[i3 + 1]).toUpperCase();
        } else if (size === 64) {
          msg += uint32ToHex(arr[i3 + 1]).toUpperCase();
          msg += uint32ToHex(arr[i3]).toUpperCase();
        } else throw new Error("Invalid size " + size);
        if (i3 % 6 === 4) {
          msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i3 < arr.length - 2) {
          msg += " ";
        }
      }
      console.log(msg);
    }
    function testSpeed(hashFn, N4, M4) {
      let startMs = (/* @__PURE__ */ new Date()).getTime();
      const input = new Uint8Array(N4);
      for (let i3 = 0; i3 < N4; i3++) {
        input[i3] = i3 % 256;
      }
      const genMs = (/* @__PURE__ */ new Date()).getTime();
      console.log("Generated random input in " + (genMs - startMs) + "ms");
      startMs = genMs;
      for (let i3 = 0; i3 < M4; i3++) {
        const hashHex = hashFn(input);
        const hashMs = (/* @__PURE__ */ new Date()).getTime();
        const ms2 = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms2 + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(
          Math.round(N4 / (1 << 20) / (ms2 / 1e3) * 100) / 100 + " MB PER SECOND"
        );
      }
    }
    module.exports = {
      normalizeInput,
      toHex,
      debugPrint,
      testSpeed
    };
  }
});

// node_modules/blakejs/blake2b.js
var require_blake2b = __commonJS({
  "node_modules/blakejs/blake2b.js"(exports, module) {
    var util = require_util();
    function ADD64AA(v5, a2, b2) {
      const o0 = v5[a2] + v5[b2];
      let o1 = v5[a2 + 1] + v5[b2 + 1];
      if (o0 >= 4294967296) {
        o1++;
      }
      v5[a2] = o0;
      v5[a2 + 1] = o1;
    }
    function ADD64AC(v5, a2, b0, b1) {
      let o0 = v5[a2] + b0;
      if (b0 < 0) {
        o0 += 4294967296;
      }
      let o1 = v5[a2 + 1] + b1;
      if (o0 >= 4294967296) {
        o1++;
      }
      v5[a2] = o0;
      v5[a2 + 1] = o1;
    }
    function B2B_GET32(arr, i3) {
      return arr[i3] ^ arr[i3 + 1] << 8 ^ arr[i3 + 2] << 16 ^ arr[i3 + 3] << 24;
    }
    function B2B_G(a2, b2, c4, d3, ix, iy) {
      const x0 = m2[ix];
      const x1 = m2[ix + 1];
      const y0 = m2[iy];
      const y1 = m2[iy + 1];
      ADD64AA(v3, a2, b2);
      ADD64AC(v3, a2, x0, x1);
      let xor0 = v3[d3] ^ v3[a2];
      let xor1 = v3[d3 + 1] ^ v3[a2 + 1];
      v3[d3] = xor1;
      v3[d3 + 1] = xor0;
      ADD64AA(v3, c4, d3);
      xor0 = v3[b2] ^ v3[c4];
      xor1 = v3[b2 + 1] ^ v3[c4 + 1];
      v3[b2] = xor0 >>> 24 ^ xor1 << 8;
      v3[b2 + 1] = xor1 >>> 24 ^ xor0 << 8;
      ADD64AA(v3, a2, b2);
      ADD64AC(v3, a2, y0, y1);
      xor0 = v3[d3] ^ v3[a2];
      xor1 = v3[d3 + 1] ^ v3[a2 + 1];
      v3[d3] = xor0 >>> 16 ^ xor1 << 16;
      v3[d3 + 1] = xor1 >>> 16 ^ xor0 << 16;
      ADD64AA(v3, c4, d3);
      xor0 = v3[b2] ^ v3[c4];
      xor1 = v3[b2 + 1] ^ v3[c4 + 1];
      v3[b2] = xor1 >>> 31 ^ xor0 << 1;
      v3[b2 + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    var BLAKE2B_IV32 = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];
    var SIGMA82 = new Uint8Array(
      SIGMA8.map(function(x3) {
        return x3 * 2;
      })
    );
    var v3 = new Uint32Array(32);
    var m2 = new Uint32Array(32);
    function blake2bCompress(ctx, last) {
      let i3 = 0;
      for (i3 = 0; i3 < 16; i3++) {
        v3[i3] = ctx.h[i3];
        v3[i3 + 16] = BLAKE2B_IV32[i3];
      }
      v3[24] = v3[24] ^ ctx.t;
      v3[25] = v3[25] ^ ctx.t / 4294967296;
      if (last) {
        v3[28] = ~v3[28];
        v3[29] = ~v3[29];
      }
      for (i3 = 0; i3 < 32; i3++) {
        m2[i3] = B2B_GET32(ctx.b, 4 * i3);
      }
      for (i3 = 0; i3 < 12; i3++) {
        B2B_G(0, 8, 16, 24, SIGMA82[i3 * 16 + 0], SIGMA82[i3 * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i3 * 16 + 2], SIGMA82[i3 * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i3 * 16 + 4], SIGMA82[i3 * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i3 * 16 + 6], SIGMA82[i3 * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i3 * 16 + 8], SIGMA82[i3 * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i3 * 16 + 10], SIGMA82[i3 * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i3 * 16 + 12], SIGMA82[i3 * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i3 * 16 + 14], SIGMA82[i3 * 16 + 15]);
      }
      for (i3 = 0; i3 < 16; i3++) {
        ctx.h[i3] = ctx.h[i3] ^ v3[i3] ^ v3[i3 + 16];
      }
    }
    var parameterBlock = new Uint8Array([
      0,
      0,
      0,
      0,
      //  0: outlen, keylen, fanout, depth
      0,
      0,
      0,
      0,
      //  4: leaf length, sequential mode
      0,
      0,
      0,
      0,
      //  8: node offset
      0,
      0,
      0,
      0,
      // 12: node offset
      0,
      0,
      0,
      0,
      // 16: node depth, inner length, rfu
      0,
      0,
      0,
      0,
      // 20: rfu
      0,
      0,
      0,
      0,
      // 24: rfu
      0,
      0,
      0,
      0,
      // 28: rfu
      0,
      0,
      0,
      0,
      // 32: salt
      0,
      0,
      0,
      0,
      // 36: salt
      0,
      0,
      0,
      0,
      // 40: salt
      0,
      0,
      0,
      0,
      // 44: salt
      0,
      0,
      0,
      0,
      // 48: personal
      0,
      0,
      0,
      0,
      // 52: personal
      0,
      0,
      0,
      0,
      // 56: personal
      0,
      0,
      0,
      0
      // 60: personal
    ]);
    function blake2bInit(outlen, key, salt, personal) {
      if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
      }
      if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
      }
      if (salt && salt.length !== 16) {
        throw new Error("Illegal salt, expected Uint8Array with length is 16");
      }
      if (personal && personal.length !== 16) {
        throw new Error("Illegal personal, expected Uint8Array with length is 16");
      }
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        // input count
        c: 0,
        // pointer within buffer
        outlen
        // output length in bytes
      };
      parameterBlock.fill(0);
      parameterBlock[0] = outlen;
      if (key) parameterBlock[1] = key.length;
      parameterBlock[2] = 1;
      parameterBlock[3] = 1;
      if (salt) parameterBlock.set(salt, 32);
      if (personal) parameterBlock.set(personal, 48);
      for (let i3 = 0; i3 < 16; i3++) {
        ctx.h[i3] = BLAKE2B_IV32[i3] ^ B2B_GET32(parameterBlock, i3 * 4);
      }
      if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
      }
      return ctx;
    }
    function blake2bUpdate(ctx, input) {
      for (let i3 = 0; i3 < input.length; i3++) {
        if (ctx.c === 128) {
          ctx.t += ctx.c;
          blake2bCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i3];
      }
    }
    function blake2bFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 128) {
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i3 = 0; i3 < ctx.outlen; i3++) {
        out[i3] = ctx.h[i3 >> 2] >> 8 * (i3 & 3);
      }
      return out;
    }
    function blake2b(input, key, outlen, salt, personal) {
      outlen = outlen || 64;
      input = util.normalizeInput(input);
      if (salt) {
        salt = util.normalizeInput(salt);
      }
      if (personal) {
        personal = util.normalizeInput(personal);
      }
      const ctx = blake2bInit(outlen, key, salt, personal);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx);
    }
    function blake2bHex(input, key, outlen, salt, personal) {
      const output = blake2b(input, key, outlen, salt, personal);
      return util.toHex(output);
    }
    module.exports = {
      blake2b,
      blake2bHex,
      blake2bInit,
      blake2bUpdate,
      blake2bFinal
    };
  }
});

// node_modules/blakejs/blake2s.js
var require_blake2s = __commonJS({
  "node_modules/blakejs/blake2s.js"(exports, module) {
    var util = require_util();
    function B2S_GET32(v5, i3) {
      return v5[i3] ^ v5[i3 + 1] << 8 ^ v5[i3 + 2] << 16 ^ v5[i3 + 3] << 24;
    }
    function B2S_G(a2, b2, c4, d3, x3, y4) {
      v3[a2] = v3[a2] + v3[b2] + x3;
      v3[d3] = ROTR32(v3[d3] ^ v3[a2], 16);
      v3[c4] = v3[c4] + v3[d3];
      v3[b2] = ROTR32(v3[b2] ^ v3[c4], 12);
      v3[a2] = v3[a2] + v3[b2] + y4;
      v3[d3] = ROTR32(v3[d3] ^ v3[a2], 8);
      v3[c4] = v3[c4] + v3[d3];
      v3[b2] = ROTR32(v3[b2] ^ v3[c4], 7);
    }
    function ROTR32(x3, y4) {
      return x3 >>> y4 ^ x3 << 32 - y4;
    }
    var BLAKE2S_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);
    var v3 = new Uint32Array(16);
    var m2 = new Uint32Array(16);
    function blake2sCompress(ctx, last) {
      let i3 = 0;
      for (i3 = 0; i3 < 8; i3++) {
        v3[i3] = ctx.h[i3];
        v3[i3 + 8] = BLAKE2S_IV[i3];
      }
      v3[12] ^= ctx.t;
      v3[13] ^= ctx.t / 4294967296;
      if (last) {
        v3[14] = ~v3[14];
      }
      for (i3 = 0; i3 < 16; i3++) {
        m2[i3] = B2S_GET32(ctx.b, 4 * i3);
      }
      for (i3 = 0; i3 < 10; i3++) {
        B2S_G(0, 4, 8, 12, m2[SIGMA[i3 * 16 + 0]], m2[SIGMA[i3 * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m2[SIGMA[i3 * 16 + 2]], m2[SIGMA[i3 * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m2[SIGMA[i3 * 16 + 4]], m2[SIGMA[i3 * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m2[SIGMA[i3 * 16 + 6]], m2[SIGMA[i3 * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m2[SIGMA[i3 * 16 + 8]], m2[SIGMA[i3 * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m2[SIGMA[i3 * 16 + 10]], m2[SIGMA[i3 * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m2[SIGMA[i3 * 16 + 12]], m2[SIGMA[i3 * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m2[SIGMA[i3 * 16 + 14]], m2[SIGMA[i3 * 16 + 15]]);
      }
      for (i3 = 0; i3 < 8; i3++) {
        ctx.h[i3] ^= v3[i3] ^ v3[i3 + 8];
      }
    }
    function blake2sInit(outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
      }
      const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        // hash state
        b: new Uint8Array(64),
        // input block
        c: 0,
        // pointer within block
        t: 0,
        // input count
        outlen
        // output length in bytes
      };
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
      }
      return ctx;
    }
    function blake2sUpdate(ctx, input) {
      for (let i3 = 0; i3 < input.length; i3++) {
        if (ctx.c === 64) {
          ctx.t += ctx.c;
          blake2sCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i3];
      }
    }
    function blake2sFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 64) {
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i3 = 0; i3 < ctx.outlen; i3++) {
        out[i3] = ctx.h[i3 >> 2] >> 8 * (i3 & 3) & 255;
      }
      return out;
    }
    function blake2s(input, key, outlen) {
      outlen = outlen || 32;
      input = util.normalizeInput(input);
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx);
    }
    function blake2sHex(input, key, outlen) {
      const output = blake2s(input, key, outlen);
      return util.toHex(output);
    }
    module.exports = {
      blake2s,
      blake2sHex,
      blake2sInit,
      blake2sUpdate,
      blake2sFinal
    };
  }
});

// node_modules/blakejs/index.js
var require_blakejs = __commonJS({
  "node_modules/blakejs/index.js"(exports, module) {
    var b2b = require_blake2b();
    var b2s = require_blake2s();
    module.exports = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };
  }
});

// node_modules/@segment/analytics-next/dist/pkg/core/analytics/index.js
init_tslib_es6();

// node_modules/@segment/analytics-next/dist/pkg/core/arguments-resolver/index.js
function resolveArguments(eventName, properties, options, callback) {
  var _a3;
  var args = [eventName, properties, options, callback];
  var name = isPlainObject(eventName) ? eventName.event : eventName;
  if (!name || !isString(name)) {
    throw new Error("Event missing");
  }
  var data = isPlainObject(eventName) ? (_a3 = eventName.properties) !== null && _a3 !== void 0 ? _a3 : {} : isPlainObject(properties) ? properties : {};
  var opts = {};
  if (!isFunction(options)) {
    opts = options !== null && options !== void 0 ? options : {};
  }
  if (isPlainObject(eventName) && !isFunction(properties)) {
    opts = properties !== null && properties !== void 0 ? properties : {};
  }
  var cb = args.find(isFunction);
  return [name, data, opts, cb];
}
function resolvePageArguments(category, name, properties, options, callback) {
  var resolvedProperties;
  var resolvedOptions;
  var resolvedCategory = null;
  var resolvedName = null;
  var args = [category, name, properties, options, callback];
  var strings = args.filter(isString);
  if (strings.length === 1) {
    if (isString(args[1])) {
      resolvedName = args[1];
      resolvedCategory = null;
    } else {
      resolvedName = strings[0];
      resolvedCategory = null;
    }
  } else if (strings.length === 2) {
    if (typeof args[0] === "string") {
      resolvedCategory = args[0];
    }
    if (typeof args[1] === "string") {
      resolvedName = args[1];
    }
  }
  var resolvedCallback = args.find(isFunction);
  var objects = args.filter(isPlainObject);
  if (objects.length === 1) {
    if (isPlainObject(args[2])) {
      resolvedOptions = {};
      resolvedProperties = args[2];
    } else if (isPlainObject(args[3])) {
      resolvedProperties = {};
      resolvedOptions = args[3];
    } else {
      resolvedProperties = objects[0];
      resolvedOptions = {};
    }
  } else if (objects.length === 2) {
    resolvedProperties = objects[0];
    resolvedOptions = objects[1];
  }
  return [
    resolvedCategory,
    resolvedName,
    resolvedProperties !== null && resolvedProperties !== void 0 ? resolvedProperties : resolvedProperties = {},
    resolvedOptions !== null && resolvedOptions !== void 0 ? resolvedOptions : resolvedOptions = {},
    resolvedCallback
  ];
}
var resolveUserArguments = function(user) {
  return function() {
    var _a3, _b2, _c2;
    var args = [];
    for (var _i3 = 0; _i3 < arguments.length; _i3++) {
      args[_i3] = arguments[_i3];
    }
    var values = {};
    var orderStack = [
      "callback",
      "options",
      "traits",
      "id"
    ];
    for (var _d = 0, args_1 = args; _d < args_1.length; _d++) {
      var arg = args_1[_d];
      var current = orderStack.pop();
      if (current === "id") {
        if (isString(arg) || isNumber(arg)) {
          values.id = arg.toString();
          continue;
        }
        if (arg === null || arg === void 0) {
          continue;
        }
        current = orderStack.pop();
      }
      if ((current === "traits" || current === "options") && (arg === null || arg === void 0 || isPlainObject(arg))) {
        values[current] = arg;
      }
      if (isFunction(arg)) {
        values.callback = arg;
        break;
      }
    }
    return [
      (_a3 = values.id) !== null && _a3 !== void 0 ? _a3 : user.id(),
      (_b2 = values.traits) !== null && _b2 !== void 0 ? _b2 : {},
      (_c2 = values.options) !== null && _c2 !== void 0 ? _c2 : {},
      values.callback
    ];
  };
};
function resolveAliasArguments(to3, from, options, callback) {
  if (isNumber(to3))
    to3 = to3.toString();
  if (isNumber(from))
    from = from.toString();
  var args = [to3, from, options, callback];
  var _a3 = args.filter(isString), _b2 = _a3[0], aliasTo = _b2 === void 0 ? to3 : _b2, _c2 = _a3[1], aliasFrom = _c2 === void 0 ? null : _c2;
  var _d = args.filter(isPlainObject)[0], opts = _d === void 0 ? {} : _d;
  var resolvedCallback = args.find(isFunction);
  return [aliasTo, aliasFrom, opts, resolvedCallback];
}

// node_modules/@segment/analytics-next/dist/pkg/core/events/index.js
init_tslib_es6();

// node_modules/@segment/analytics-page-tools/dist/esm/index.mjs
function isPlainObject2(obj) {
  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase() === "object";
}
var BufferedPageContextDiscriminant = "bpc";
var createBufferedPageContext = function(url, canonicalUrl, search, path, title, referrer) {
  return {
    __t: BufferedPageContextDiscriminant,
    c: canonicalUrl,
    p: path,
    u: url,
    s: search,
    t: title,
    r: referrer
  };
};
var BUFFERED_PAGE_CONTEXT_KEYS = Object.keys(createBufferedPageContext("", "", "", "", "", ""));
function isBufferedPageContext(bufferedPageCtx) {
  if (!isPlainObject2(bufferedPageCtx)) return false;
  if (bufferedPageCtx.__t !== BufferedPageContextDiscriminant) return false;
  for (var k4 in bufferedPageCtx) {
    if (!BUFFERED_PAGE_CONTEXT_KEYS.includes(k4)) {
      return false;
    }
  }
  return true;
}
var createCanonicalURL = function(canonicalUrl, searchParams) {
  return canonicalUrl.indexOf("?") > -1 ? canonicalUrl : canonicalUrl + searchParams;
};
var removeHash = function(href) {
  var hashIdx = href.indexOf("#");
  return hashIdx === -1 ? href : href.slice(0, hashIdx);
};
var parseCanonicalPath = function(canonicalUrl) {
  try {
    return new URL(canonicalUrl).pathname;
  } catch (_e3) {
    return canonicalUrl[0] === "/" ? canonicalUrl : "/" + canonicalUrl;
  }
};
var createPageContext = function(param) {
  var canonicalUrl = param.c, pathname = param.p, search = param.s, url = param.u, referrer = param.r, title = param.t;
  var newPath = canonicalUrl ? parseCanonicalPath(canonicalUrl) : pathname;
  var newUrl = canonicalUrl ? createCanonicalURL(canonicalUrl, search) : removeHash(url);
  return {
    path: newPath,
    referrer,
    search,
    title,
    url: newUrl
  };
};
var getDefaultBufferedPageContext = function() {
  var c4 = document.querySelector("link[rel='canonical']");
  return createBufferedPageContext(location.href, c4 && c4.getAttribute("href") || void 0, location.search, location.pathname, document.title, document.referrer);
};
var getDefaultPageContext = function() {
  return createPageContext(getDefaultBufferedPageContext());
};

// node_modules/@segment/analytics-next/dist/pkg/core/page/add-page-context.js
init_tslib_es6();

// node_modules/@segment/analytics-next/dist/pkg/lib/pick.js
init_tslib_es6();
function pick(object, keys2) {
  return Object.assign.apply(Object, __spreadArray([{}], keys2.map(function(key) {
    var _a3;
    if (object && Object.prototype.hasOwnProperty.call(object, key)) {
      return _a3 = {}, _a3[key] = object[key], _a3;
    }
  }), false));
}

// node_modules/@segment/analytics-next/dist/pkg/core/page/add-page-context.js
var addPageContext = function(event, pageCtx) {
  if (pageCtx === void 0) {
    pageCtx = getDefaultPageContext();
  }
  var evtCtx = event.context;
  var pageContextFromEventProps;
  if (event.type === "page") {
    pageContextFromEventProps = event.properties && pick(event.properties, Object.keys(pageCtx));
    event.properties = __assign(__assign(__assign({}, pageCtx), event.properties), event.name ? { name: event.name } : {});
  }
  evtCtx.page = __assign(__assign(__assign({}, pageCtx), pageContextFromEventProps), evtCtx.page);
};

// node_modules/@segment/analytics-next/dist/pkg/core/events/index.js
var EventFactory = (
  /** @class */
  function(_super) {
    __extends(EventFactory2, _super);
    function EventFactory2(user) {
      var _this = _super.call(this, {
        createMessageId: function() {
          return "ajs-next-".concat(Date.now(), "-").concat(v4());
        },
        onEventMethodCall: function(_a3) {
          var options = _a3.options;
          _this.maybeUpdateAnonId(options);
        },
        onFinishedEvent: function(event) {
          _this.addIdentity(event);
          return event;
        }
      }) || this;
      _this.user = user;
      return _this;
    }
    EventFactory2.prototype.maybeUpdateAnonId = function(options) {
      (options === null || options === void 0 ? void 0 : options.anonymousId) && this.user.anonymousId(options.anonymousId);
    };
    EventFactory2.prototype.addIdentity = function(event) {
      if (this.user.id()) {
        event.userId = this.user.id();
      }
      if (this.user.anonymousId()) {
        event.anonymousId = this.user.anonymousId();
      }
    };
    EventFactory2.prototype.track = function(event, properties, options, integrationsOptions, pageCtx) {
      var ev = _super.prototype.track.call(this, event, properties, options, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    EventFactory2.prototype.page = function(category, page, properties, options, integrationsOptions, pageCtx) {
      var ev = _super.prototype.page.call(this, category, page, properties, options, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    EventFactory2.prototype.screen = function(category, screen, properties, options, integrationsOptions, pageCtx) {
      var ev = _super.prototype.screen.call(this, category, screen, properties, options, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    EventFactory2.prototype.identify = function(userId, traits, options, integrationsOptions, pageCtx) {
      var ev = _super.prototype.identify.call(this, userId, traits, options, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    EventFactory2.prototype.group = function(groupId, traits, options, integrationsOptions, pageCtx) {
      var ev = _super.prototype.group.call(this, groupId, traits, options, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    EventFactory2.prototype.alias = function(to3, from, options, integrationsOptions, pageCtx) {
      var ev = _super.prototype.alias.call(this, to3, from, options, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    return EventFactory2;
  }(CoreEventFactory)
);

// node_modules/@segment/analytics-next/dist/pkg/core/plugin/index.js
var isDestinationPluginWithAddMiddleware = function(plugin) {
  return "addMiddleware" in plugin && plugin.type === "destination";
};

// node_modules/@segment/analytics-next/dist/pkg/core/queue/event-queue.js
init_tslib_es6();
var EventQueue = (
  /** @class */
  function(_super) {
    __extends(EventQueue2, _super);
    function EventQueue2(nameOrQueue) {
      return _super.call(this, typeof nameOrQueue === "string" ? new PersistedPriorityQueue(4, nameOrQueue) : nameOrQueue) || this;
    }
    EventQueue2.prototype.flush = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          if (isOffline())
            return [2, []];
          return [2, _super.prototype.flush.call(this)];
        });
      });
    };
    return EventQueue2;
  }(CoreEventQueue)
);

// node_modules/@segment/analytics-next/dist/pkg/core/user/index.js
init_tslib_es6();

// node_modules/@segment/analytics-next/dist/pkg/lib/bind-all.js
function bindAll(obj) {
  var proto = obj.constructor.prototype;
  for (var _i3 = 0, _a3 = Object.getOwnPropertyNames(proto); _i3 < _a3.length; _i3++) {
    var key = _a3[_i3];
    if (key !== "constructor") {
      var desc = Object.getOwnPropertyDescriptor(obj.constructor.prototype, key);
      if (!!desc && typeof desc.value === "function") {
        obj[key] = obj[key].bind(obj);
      }
    }
  }
  return obj;
}

// node_modules/@segment/analytics-next/dist/pkg/core/storage/cookieStorage.js
init_tslib_es6();

// node_modules/js-cookie/dist/js.cookie.mjs
function assign(target) {
  for (var i3 = 1; i3 < arguments.length; i3++) {
    var source = arguments[i3];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target;
}
var defaultConverter = {
  read: function(value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
  },
  write: function(value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    );
  }
};
function init(converter, defaultAttributes) {
  function set2(key, value, attributes) {
    if (typeof document === "undefined") {
      return;
    }
    attributes = assign({}, defaultAttributes, attributes);
    if (typeof attributes.expires === "number") {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }
    key = encodeURIComponent(key).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
    var stringifiedAttributes = "";
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue;
      }
      stringifiedAttributes += "; " + attributeName;
      if (attributes[attributeName] === true) {
        continue;
      }
      stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
    }
    return document.cookie = key + "=" + converter.write(value, key) + stringifiedAttributes;
  }
  function get2(key) {
    if (typeof document === "undefined" || arguments.length && !key) {
      return;
    }
    var cookies = document.cookie ? document.cookie.split("; ") : [];
    var jar = {};
    for (var i3 = 0; i3 < cookies.length; i3++) {
      var parts = cookies[i3].split("=");
      var value = parts.slice(1).join("=");
      try {
        var foundKey = decodeURIComponent(parts[0]);
        jar[foundKey] = converter.read(value, foundKey);
        if (key === foundKey) {
          break;
        }
      } catch (e) {
      }
    }
    return key ? jar[key] : jar;
  }
  return Object.create(
    {
      set: set2,
      get: get2,
      remove: function(key, attributes) {
        set2(
          key,
          "",
          assign({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function(attributes) {
        return init(this.converter, assign({}, this.attributes, attributes));
      },
      withConverter: function(converter2) {
        return init(assign({}, this.converter, converter2), this.attributes);
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  );
}
var api = init(defaultConverter, { path: "/" });
var js_cookie_default = api;

// node_modules/@segment/analytics-next/dist/pkg/core/user/tld.js
function levels(url) {
  var host = url.hostname;
  var parts = host.split(".");
  var last = parts[parts.length - 1];
  var levels2 = [];
  if (parts.length === 4 && parseInt(last, 10) > 0) {
    return levels2;
  }
  if (parts.length <= 1) {
    return levels2;
  }
  for (var i3 = parts.length - 2; i3 >= 0; --i3) {
    levels2.push(parts.slice(i3).join("."));
  }
  return levels2;
}
function parseUrl(url) {
  try {
    return new URL(url);
  } catch (_a3) {
    return;
  }
}
function tld(url) {
  var parsedUrl = parseUrl(url);
  if (!parsedUrl)
    return;
  var lvls = levels(parsedUrl);
  for (var i3 = 0; i3 < lvls.length; ++i3) {
    var cname = "__tld__";
    var domain = lvls[i3];
    var opts = { domain: "." + domain };
    try {
      js_cookie_default.set(cname, "1", opts);
      if (js_cookie_default.get(cname)) {
        js_cookie_default.remove(cname, opts);
        return domain;
      }
    } catch (_2) {
      return;
    }
  }
}

// node_modules/@segment/analytics-next/dist/pkg/core/storage/cookieStorage.js
var ONE_YEAR = 365;
var CookieStorage = (
  /** @class */
  function() {
    function CookieStorage2(options) {
      if (options === void 0) {
        options = CookieStorage2.defaults;
      }
      this.options = __assign(__assign({}, CookieStorage2.defaults), options);
    }
    Object.defineProperty(CookieStorage2, "defaults", {
      get: function() {
        return {
          maxage: ONE_YEAR,
          domain: tld(window.location.href),
          path: "/",
          sameSite: "Lax"
        };
      },
      enumerable: false,
      configurable: true
    });
    CookieStorage2.prototype.opts = function() {
      return {
        sameSite: this.options.sameSite,
        expires: this.options.maxage,
        domain: this.options.domain,
        path: this.options.path,
        secure: this.options.secure
      };
    };
    CookieStorage2.prototype.get = function(key) {
      var _a3;
      try {
        var value = js_cookie_default.get(key);
        if (value === void 0 || value === null) {
          return null;
        }
        try {
          return (_a3 = JSON.parse(value)) !== null && _a3 !== void 0 ? _a3 : null;
        } catch (e) {
          return value !== null && value !== void 0 ? value : null;
        }
      } catch (e) {
        return null;
      }
    };
    CookieStorage2.prototype.set = function(key, value) {
      if (typeof value === "string") {
        js_cookie_default.set(key, value, this.opts());
      } else if (value === null) {
        js_cookie_default.remove(key, this.opts());
      } else {
        js_cookie_default.set(key, JSON.stringify(value), this.opts());
      }
    };
    CookieStorage2.prototype.remove = function(key) {
      return js_cookie_default.remove(key, this.opts());
    };
    return CookieStorage2;
  }()
);

// node_modules/@segment/analytics-next/dist/pkg/core/storage/localStorage.js
var LocalStorage = (
  /** @class */
  function() {
    function LocalStorage2() {
    }
    LocalStorage2.prototype.localStorageWarning = function(key, state) {
      console.warn("Unable to access ".concat(key, ", localStorage may be ").concat(state));
    };
    LocalStorage2.prototype.get = function(key) {
      var _a3;
      try {
        var val = localStorage.getItem(key);
        if (val === null) {
          return null;
        }
        try {
          return (_a3 = JSON.parse(val)) !== null && _a3 !== void 0 ? _a3 : null;
        } catch (e) {
          return val !== null && val !== void 0 ? val : null;
        }
      } catch (err) {
        this.localStorageWarning(key, "unavailable");
        return null;
      }
    };
    LocalStorage2.prototype.set = function(key, value) {
      try {
        localStorage.setItem(key, JSON.stringify(value));
      } catch (_a3) {
        this.localStorageWarning(key, "full");
      }
    };
    LocalStorage2.prototype.remove = function(key) {
      try {
        return localStorage.removeItem(key);
      } catch (err) {
        this.localStorageWarning(key, "unavailable");
      }
    };
    return LocalStorage2;
  }()
);

// node_modules/@segment/analytics-next/dist/pkg/core/storage/memoryStorage.js
var MemoryStorage = (
  /** @class */
  function() {
    function MemoryStorage2() {
      this.cache = {};
    }
    MemoryStorage2.prototype.get = function(key) {
      var _a3;
      return (_a3 = this.cache[key]) !== null && _a3 !== void 0 ? _a3 : null;
    };
    MemoryStorage2.prototype.set = function(key, value) {
      this.cache[key] = value;
    };
    MemoryStorage2.prototype.remove = function(key) {
      delete this.cache[key];
    };
    return MemoryStorage2;
  }()
);

// node_modules/@segment/analytics-next/dist/pkg/core/storage/types.js
var StoreType = {
  Cookie: "cookie",
  LocalStorage: "localStorage",
  Memory: "memory"
};

// node_modules/@segment/analytics-next/dist/pkg/core/storage/settings.js
function isArrayOfStoreType(s) {
  return s && s.stores && Array.isArray(s.stores) && s.stores.every(function(e) {
    return Object.values(StoreType).includes(e);
  });
}
function isStoreTypeWithSettings(s) {
  return typeof s === "object" && s.name !== void 0;
}

// node_modules/@segment/analytics-next/dist/pkg/core/storage/universalStorage.js
var _logStoreKeyError = function(store, action, key, err) {
  console.warn("".concat(store.constructor.name, ": Can't ").concat(action, ' key "').concat(key, '" | Err: ').concat(err));
};
var UniversalStorage = (
  /** @class */
  function() {
    function UniversalStorage2(stores) {
      this.stores = stores;
    }
    UniversalStorage2.prototype.get = function(key) {
      var val = null;
      for (var _i3 = 0, _a3 = this.stores; _i3 < _a3.length; _i3++) {
        var store = _a3[_i3];
        try {
          val = store.get(key);
          if (val !== void 0 && val !== null) {
            return val;
          }
        } catch (e) {
          _logStoreKeyError(store, "get", key, e);
        }
      }
      return null;
    };
    UniversalStorage2.prototype.set = function(key, value) {
      this.stores.forEach(function(store) {
        try {
          store.set(key, value);
        } catch (e) {
          _logStoreKeyError(store, "set", key, e);
        }
      });
    };
    UniversalStorage2.prototype.clear = function(key) {
      this.stores.forEach(function(store) {
        try {
          store.remove(key);
        } catch (e) {
          _logStoreKeyError(store, "remove", key, e);
        }
      });
    };
    UniversalStorage2.prototype.getAndSync = function(key) {
      var val = this.get(key);
      var coercedValue = typeof val === "number" ? val.toString() : val;
      this.set(key, coercedValue);
      return coercedValue;
    };
    return UniversalStorage2;
  }()
);

// node_modules/@segment/analytics-next/dist/pkg/core/storage/index.js
function initializeStorages(args) {
  var storages = args.map(function(s) {
    var type;
    var settings;
    if (isStoreTypeWithSettings(s)) {
      type = s.name;
      settings = s.settings;
    } else {
      type = s;
    }
    switch (type) {
      case StoreType.Cookie:
        return new CookieStorage(settings);
      case StoreType.LocalStorage:
        return new LocalStorage();
      case StoreType.Memory:
        return new MemoryStorage();
      default:
        throw new Error("Unknown Store Type: ".concat(s));
    }
  });
  return storages;
}
function applyCookieOptions(storeTypes, cookieOptions2) {
  return storeTypes.map(function(s) {
    if (cookieOptions2 && s === StoreType.Cookie) {
      return {
        name: s,
        settings: cookieOptions2
      };
    }
    return s;
  });
}

// node_modules/@segment/analytics-next/dist/pkg/core/user/index.js
var defaults = {
  persist: true,
  cookie: {
    key: "ajs_user_id",
    oldKey: "ajs_user"
  },
  localStorage: {
    key: "ajs_user_traits"
  }
};
var User = (
  /** @class */
  function() {
    function User2(options, cookieOptions2) {
      if (options === void 0) {
        options = defaults;
      }
      var _this = this;
      var _a3, _b2, _c2, _d;
      this.options = {};
      this.id = function(id) {
        if (_this.options.disable) {
          return null;
        }
        var prevId = _this.identityStore.getAndSync(_this.idKey);
        if (id !== void 0) {
          _this.identityStore.set(_this.idKey, id);
          var changingIdentity = id !== prevId && prevId !== null && id !== null;
          if (changingIdentity) {
            _this.anonymousId(null);
          }
        }
        var retId = _this.identityStore.getAndSync(_this.idKey);
        if (retId)
          return retId;
        var retLeg = _this.legacyUserStore.get(defaults.cookie.oldKey);
        return retLeg ? typeof retLeg === "object" ? retLeg.id : retLeg : null;
      };
      this.anonymousId = function(id) {
        var _a4, _b3;
        if (_this.options.disable) {
          return null;
        }
        if (id === void 0) {
          var val = (_a4 = _this.identityStore.getAndSync(_this.anonKey)) !== null && _a4 !== void 0 ? _a4 : (_b3 = _this.legacySIO()) === null || _b3 === void 0 ? void 0 : _b3[0];
          if (val) {
            return val;
          }
        }
        if (id === null) {
          _this.identityStore.set(_this.anonKey, null);
          return _this.identityStore.getAndSync(_this.anonKey);
        }
        _this.identityStore.set(_this.anonKey, id !== null && id !== void 0 ? id : v4());
        return _this.identityStore.getAndSync(_this.anonKey);
      };
      this.traits = function(traits) {
        var _a4;
        if (_this.options.disable) {
          return;
        }
        if (traits === null) {
          traits = {};
        }
        if (traits) {
          _this.traitsStore.set(_this.traitsKey, traits !== null && traits !== void 0 ? traits : {});
        }
        return (_a4 = _this.traitsStore.get(_this.traitsKey)) !== null && _a4 !== void 0 ? _a4 : {};
      };
      this.options = __assign(__assign({}, defaults), options);
      this.cookieOptions = cookieOptions2;
      this.idKey = (_b2 = (_a3 = options.cookie) === null || _a3 === void 0 ? void 0 : _a3.key) !== null && _b2 !== void 0 ? _b2 : defaults.cookie.key;
      this.traitsKey = (_d = (_c2 = options.localStorage) === null || _c2 === void 0 ? void 0 : _c2.key) !== null && _d !== void 0 ? _d : defaults.localStorage.key;
      this.anonKey = "ajs_anonymous_id";
      this.identityStore = this.createStorage(this.options, cookieOptions2);
      this.legacyUserStore = this.createStorage(this.options, cookieOptions2, function(s) {
        return s === StoreType.Cookie;
      });
      this.traitsStore = this.createStorage(this.options, cookieOptions2, function(s) {
        return s !== StoreType.Cookie;
      });
      var legacyUser = this.legacyUserStore.get(defaults.cookie.oldKey);
      if (legacyUser && typeof legacyUser === "object") {
        legacyUser.id && this.id(legacyUser.id);
        legacyUser.traits && this.traits(legacyUser.traits);
      }
      bindAll(this);
    }
    User2.prototype.legacySIO = function() {
      var val = this.legacyUserStore.get("_sio");
      if (!val) {
        return null;
      }
      var _a3 = val.split("----"), anon = _a3[0], user = _a3[1];
      return [anon, user];
    };
    User2.prototype.identify = function(id, traits) {
      if (this.options.disable) {
        return;
      }
      traits = traits !== null && traits !== void 0 ? traits : {};
      var currentId = this.id();
      if (currentId === null || currentId === id) {
        traits = __assign(__assign({}, this.traits()), traits);
      }
      if (id) {
        this.id(id);
      }
      this.traits(traits);
    };
    User2.prototype.logout = function() {
      this.anonymousId(null);
      this.id(null);
      this.traits({});
    };
    User2.prototype.reset = function() {
      this.logout();
      this.identityStore.clear(this.idKey);
      this.identityStore.clear(this.anonKey);
      this.traitsStore.clear(this.traitsKey);
    };
    User2.prototype.load = function() {
      return new User2(this.options, this.cookieOptions);
    };
    User2.prototype.save = function() {
      return true;
    };
    User2.prototype.createStorage = function(options, cookieOpts, filterStores) {
      var stores = [
        StoreType.LocalStorage,
        StoreType.Cookie,
        StoreType.Memory
      ];
      if (options.disable) {
        return new UniversalStorage([]);
      }
      if (!options.persist) {
        return new UniversalStorage([new MemoryStorage()]);
      }
      if (options.storage !== void 0 && options.storage !== null) {
        if (isArrayOfStoreType(options.storage)) {
          stores = options.storage.stores;
        }
      }
      if (options.localStorageFallbackDisabled) {
        stores = stores.filter(function(s) {
          return s !== StoreType.LocalStorage;
        });
      }
      if (filterStores) {
        stores = stores.filter(filterStores);
      }
      return new UniversalStorage(initializeStorages(applyCookieOptions(stores, cookieOpts)));
    };
    User2.defaults = defaults;
    return User2;
  }()
);
var groupDefaults = {
  persist: true,
  cookie: {
    key: "ajs_group_id"
  },
  localStorage: {
    key: "ajs_group_properties"
  }
};
var Group = (
  /** @class */
  function(_super) {
    __extends(Group2, _super);
    function Group2(options, cookie) {
      if (options === void 0) {
        options = groupDefaults;
      }
      var _this = _super.call(this, __assign(__assign({}, groupDefaults), options), cookie) || this;
      _this.anonymousId = function(_id) {
        return void 0;
      };
      bindAll(_this);
      return _this;
    }
    return Group2;
  }(User)
);

// node_modules/@segment/analytics-next/dist/pkg/core/buffer/index.js
init_tslib_es6();

// node_modules/@segment/analytics-next/dist/pkg/lib/is-thenable.js
var isThenable = function(value) {
  return typeof value === "object" && value !== null && "then" in value && typeof value.then === "function";
};

// node_modules/@segment/analytics-next/dist/pkg/core/buffer/index.js
var flushSyncAnalyticsCalls = function(name, analytics, buffer) {
  buffer.getAndRemove(name).forEach(function(c4) {
    callAnalyticsMethod(analytics, c4).catch(console.error);
  });
};
var flushAddSourceMiddleware = function(analytics, buffer) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _i3, _a3, c4;
    return __generator(this, function(_b2) {
      switch (_b2.label) {
        case 0:
          _i3 = 0, _a3 = buffer.getAndRemove("addSourceMiddleware");
          _b2.label = 1;
        case 1:
          if (!(_i3 < _a3.length)) return [3, 4];
          c4 = _a3[_i3];
          return [4, callAnalyticsMethod(analytics, c4).catch(console.error)];
        case 2:
          _b2.sent();
          _b2.label = 3;
        case 3:
          _i3++;
          return [3, 1];
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
var flushRegister = function(analytics, buffer) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _i3, _a3, c4;
    return __generator(this, function(_b2) {
      switch (_b2.label) {
        case 0:
          _i3 = 0, _a3 = buffer.getAndRemove("register");
          _b2.label = 1;
        case 1:
          if (!(_i3 < _a3.length)) return [3, 4];
          c4 = _a3[_i3];
          return [4, callAnalyticsMethod(analytics, c4).catch(console.error)];
        case 2:
          _b2.sent();
          _b2.label = 3;
        case 3:
          _i3++;
          return [3, 1];
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
var flushOn = flushSyncAnalyticsCalls.bind(void 0, "on");
var flushSetAnonymousID = flushSyncAnalyticsCalls.bind(void 0, "setAnonymousId");
var flushAnalyticsCallsInNewTask = function(analytics, buffer) {
  ;
  Object.keys(buffer.calls).forEach(function(m2) {
    buffer.getAndRemove(m2).forEach(function(c4) {
      setTimeout(function() {
        callAnalyticsMethod(analytics, c4).catch(console.error);
      }, 0);
    });
  });
};
var popPageContext = function(args) {
  if (hasBufferedPageContextAsLastArg(args)) {
    var ctx = args.pop();
    return createPageContext(ctx);
  }
};
var hasBufferedPageContextAsLastArg = function(args) {
  var lastArg = args[args.length - 1];
  return isBufferedPageContext(lastArg);
};
var PreInitMethodCall = (
  /** @class */
  /* @__PURE__ */ function() {
    function PreInitMethodCall2(method, args, resolve, reject) {
      if (resolve === void 0) {
        resolve = function() {
        };
      }
      if (reject === void 0) {
        reject = console.error;
      }
      this.method = method;
      this.resolve = resolve;
      this.reject = reject;
      this.called = false;
      this.args = args;
    }
    return PreInitMethodCall2;
  }()
);
var PreInitMethodCallBuffer = (
  /** @class */
  function() {
    function PreInitMethodCallBuffer2() {
      var calls = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        calls[_i3] = arguments[_i3];
      }
      this._callMap = {};
      this.add.apply(this, calls);
    }
    Object.defineProperty(PreInitMethodCallBuffer2.prototype, "calls", {
      /**
       * Pull any buffered method calls from the window object, and use them to hydrate the instance buffer.
       */
      get: function() {
        this._pushSnippetWindowBuffer();
        return this._callMap;
      },
      set: function(calls) {
        this._callMap = calls;
      },
      enumerable: false,
      configurable: true
    });
    PreInitMethodCallBuffer2.prototype.get = function(methodName) {
      var _a3;
      return (_a3 = this.calls[methodName]) !== null && _a3 !== void 0 ? _a3 : [];
    };
    PreInitMethodCallBuffer2.prototype.getAndRemove = function(methodName) {
      var calls = this.get(methodName);
      this.calls[methodName] = [];
      return calls;
    };
    PreInitMethodCallBuffer2.prototype.add = function() {
      var _this = this;
      var calls = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        calls[_i3] = arguments[_i3];
      }
      calls.forEach(function(call) {
        var eventsExpectingPageContext = [
          "track",
          "screen",
          "alias",
          "group",
          "page",
          "identify"
        ];
        if (eventsExpectingPageContext.includes(call.method) && !hasBufferedPageContextAsLastArg(call.args)) {
          call.args = __spreadArray(__spreadArray([], call.args, true), [getDefaultBufferedPageContext()], false);
        }
        if (_this.calls[call.method]) {
          _this.calls[call.method].push(call);
        } else {
          _this.calls[call.method] = [call];
        }
      });
    };
    PreInitMethodCallBuffer2.prototype.clear = function() {
      this._pushSnippetWindowBuffer();
      this.calls = {};
    };
    PreInitMethodCallBuffer2.prototype.toArray = function() {
      var _a3;
      return (_a3 = []).concat.apply(_a3, Object.values(this.calls));
    };
    PreInitMethodCallBuffer2.prototype._pushSnippetWindowBuffer = function() {
      if (getVersionType() === "npm") {
        return void 0;
      }
      var wa2 = getGlobalAnalytics();
      if (!Array.isArray(wa2))
        return void 0;
      var buffered = wa2.splice(0, wa2.length);
      var calls = buffered.map(function(_a3) {
        var methodName = _a3[0], args = _a3.slice(1);
        return new PreInitMethodCall(methodName, args);
      });
      this.add.apply(this, calls);
    };
    return PreInitMethodCallBuffer2;
  }()
);
function callAnalyticsMethod(analytics, call) {
  return __awaiter(this, void 0, void 0, function() {
    var result, err_1;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          _a3.trys.push([0, 3, , 4]);
          if (call.called) {
            return [2, void 0];
          }
          call.called = true;
          result = analytics[call.method].apply(analytics, call.args);
          if (!isThenable(result)) return [3, 2];
          return [4, result];
        case 1:
          _a3.sent();
          _a3.label = 2;
        case 2:
          call.resolve(result);
          return [3, 4];
        case 3:
          err_1 = _a3.sent();
          call.reject(err_1);
          return [3, 4];
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
var AnalyticsBuffered = (
  /** @class */
  function() {
    function AnalyticsBuffered2(loader) {
      var _this = this;
      this.trackSubmit = this._createMethod("trackSubmit");
      this.trackClick = this._createMethod("trackClick");
      this.trackLink = this._createMethod("trackLink");
      this.pageView = this._createMethod("pageview");
      this.identify = this._createMethod("identify");
      this.reset = this._createMethod("reset");
      this.group = this._createMethod("group");
      this.track = this._createMethod("track");
      this.ready = this._createMethod("ready");
      this.alias = this._createMethod("alias");
      this.debug = this._createChainableMethod("debug");
      this.page = this._createMethod("page");
      this.once = this._createChainableMethod("once");
      this.off = this._createChainableMethod("off");
      this.on = this._createChainableMethod("on");
      this.addSourceMiddleware = this._createMethod("addSourceMiddleware");
      this.setAnonymousId = this._createMethod("setAnonymousId");
      this.addDestinationMiddleware = this._createMethod("addDestinationMiddleware");
      this.screen = this._createMethod("screen");
      this.register = this._createMethod("register");
      this.deregister = this._createMethod("deregister");
      this.user = this._createMethod("user");
      this.VERSION = version;
      this._preInitBuffer = new PreInitMethodCallBuffer();
      this._promise = loader(this._preInitBuffer);
      this._promise.then(function(_a3) {
        var ajs = _a3[0], ctx = _a3[1];
        _this.instance = ajs;
        _this.ctx = ctx;
      }).catch(function() {
      });
    }
    AnalyticsBuffered2.prototype.then = function() {
      var _a3;
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return (_a3 = this._promise).then.apply(_a3, args);
    };
    AnalyticsBuffered2.prototype.catch = function() {
      var _a3;
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return (_a3 = this._promise).catch.apply(_a3, args);
    };
    AnalyticsBuffered2.prototype.finally = function() {
      var _a3;
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return (_a3 = this._promise).finally.apply(_a3, args);
    };
    AnalyticsBuffered2.prototype._createMethod = function(methodName) {
      var _this = this;
      return function() {
        var _a3;
        var args = [];
        for (var _i3 = 0; _i3 < arguments.length; _i3++) {
          args[_i3] = arguments[_i3];
        }
        if (_this.instance) {
          var result = (_a3 = _this.instance)[methodName].apply(_a3, args);
          return Promise.resolve(result);
        }
        return new Promise(function(resolve, reject) {
          _this._preInitBuffer.add(new PreInitMethodCall(methodName, args, resolve, reject));
        });
      };
    };
    AnalyticsBuffered2.prototype._createChainableMethod = function(methodName) {
      var _this = this;
      return function() {
        var _a3;
        var args = [];
        for (var _i3 = 0; _i3 < arguments.length; _i3++) {
          args[_i3] = arguments[_i3];
        }
        if (_this.instance) {
          void (_a3 = _this.instance)[methodName].apply(_a3, args);
          return _this;
        } else {
          _this._preInitBuffer.add(new PreInitMethodCall(methodName, args));
        }
        return _this;
      };
    };
    return AnalyticsBuffered2;
  }()
);

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/index.js
init_tslib_es6();

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/batched-dispatcher.js
init_tslib_es6();

// node_modules/@segment/analytics-next/dist/pkg/lib/on-page-change.js
var onPageChange = function(cb) {
  var unloaded = false;
  window.addEventListener("pagehide", function() {
    if (unloaded)
      return;
    unloaded = true;
    cb(unloaded);
  });
  document.addEventListener("visibilitychange", function() {
    if (document.visibilityState == "hidden") {
      if (unloaded)
        return;
      unloaded = true;
    } else {
      unloaded = false;
    }
    cb(unloaded);
  });
};

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/ratelimit-error.js
init_tslib_es6();
var RateLimitError = (
  /** @class */
  function(_super) {
    __extends(RateLimitError2, _super);
    function RateLimitError2(message, retryTimeout) {
      var _this = _super.call(this, message) || this;
      _this.retryTimeout = retryTimeout;
      _this.name = "RateLimitError";
      return _this;
    }
    return RateLimitError2;
  }(Error)
);

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/shared-dispatcher.js
init_tslib_es6();
var createHeaders = function(headerSettings) {
  return __assign({ "Content-Type": "text/plain" }, typeof headerSettings === "function" ? headerSettings() : headerSettings);
};

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/batched-dispatcher.js
var MAX_PAYLOAD_SIZE = 500;
var MAX_KEEPALIVE_SIZE = 64;
function kilobytes(buffer) {
  var size = encodeURI(JSON.stringify(buffer)).split(/%..|./).length - 1;
  return size / 1024;
}
function approachingTrackingAPILimit(buffer) {
  return kilobytes(buffer) >= MAX_PAYLOAD_SIZE - 50;
}
function passedKeepaliveLimit(buffer) {
  return kilobytes(buffer) >= MAX_KEEPALIVE_SIZE - 10;
}
function chunks(batch2) {
  var result = [];
  var index = 0;
  batch2.forEach(function(item) {
    var size = kilobytes(result[index]);
    if (size >= 64) {
      index++;
    }
    if (result[index]) {
      result[index].push(item);
    } else {
      result[index] = [item];
    }
  });
  return result;
}
function batch(apiHost, config) {
  var _a3, _b2;
  var buffer = [];
  var pageUnloaded = false;
  var limit = (_a3 = config === null || config === void 0 ? void 0 : config.size) !== null && _a3 !== void 0 ? _a3 : 10;
  var timeout = (_b2 = config === null || config === void 0 ? void 0 : config.timeout) !== null && _b2 !== void 0 ? _b2 : 5e3;
  var rateLimitTimeout = 0;
  function sendBatch(batch2) {
    var _a4;
    if (batch2.length === 0) {
      return;
    }
    var writeKey = (_a4 = batch2[0]) === null || _a4 === void 0 ? void 0 : _a4.writeKey;
    var updatedBatch = batch2.map(function(event) {
      var _a5 = event, sentAt = _a5.sentAt, newEvent = __rest(_a5, ["sentAt"]);
      return newEvent;
    });
    return fetch2("https://".concat(apiHost, "/b"), {
      credentials: config === null || config === void 0 ? void 0 : config.credentials,
      keepalive: (config === null || config === void 0 ? void 0 : config.keepalive) || pageUnloaded,
      headers: createHeaders(config === null || config === void 0 ? void 0 : config.headers),
      method: "post",
      body: JSON.stringify({
        writeKey,
        batch: updatedBatch,
        sentAt: (/* @__PURE__ */ new Date()).toISOString()
      }),
      // @ts-ignore - not in the ts lib yet
      priority: config === null || config === void 0 ? void 0 : config.priority
    }).then(function(res) {
      var _a5;
      if (res.status >= 500) {
        throw new Error("Bad response from server: ".concat(res.status));
      }
      if (res.status === 429) {
        var retryTimeoutStringSecs = (_a5 = res.headers) === null || _a5 === void 0 ? void 0 : _a5.get("x-ratelimit-reset");
        var retryTimeoutMS = typeof retryTimeoutStringSecs == "string" ? parseInt(retryTimeoutStringSecs) * 1e3 : timeout;
        throw new RateLimitError("Rate limit exceeded: ".concat(res.status), retryTimeoutMS);
      }
    });
  }
  function flush(attempt2) {
    var _a4;
    if (attempt2 === void 0) {
      attempt2 = 1;
    }
    return __awaiter(this, void 0, void 0, function() {
      var batch_1;
      return __generator(this, function(_b3) {
        if (buffer.length) {
          batch_1 = buffer;
          buffer = [];
          return [2, (_a4 = sendBatch(batch_1)) === null || _a4 === void 0 ? void 0 : _a4.catch(function(error) {
            var _a5;
            var ctx = Context.system();
            ctx.log("error", "Error sending batch", error);
            if (attempt2 <= ((_a5 = config === null || config === void 0 ? void 0 : config.maxRetries) !== null && _a5 !== void 0 ? _a5 : 10)) {
              if (error.name === "RateLimitError") {
                rateLimitTimeout = error.retryTimeout;
              }
              buffer.push.apply(buffer, batch_1);
              buffer.map(function(event) {
                if ("_metadata" in event) {
                  var segmentEvent = event;
                  segmentEvent._metadata = __assign(__assign({}, segmentEvent._metadata), { retryCount: attempt2 });
                }
              });
              scheduleFlush2(attempt2 + 1);
            }
          })];
        }
        return [
          2
          /*return*/
        ];
      });
    });
  }
  var schedule;
  function scheduleFlush2(attempt2) {
    if (attempt2 === void 0) {
      attempt2 = 1;
    }
    if (schedule) {
      return;
    }
    schedule = setTimeout(function() {
      schedule = void 0;
      flush(attempt2).catch(console.error);
    }, rateLimitTimeout ? rateLimitTimeout : timeout);
    rateLimitTimeout = 0;
  }
  onPageChange(function(unloaded) {
    pageUnloaded = unloaded;
    if (pageUnloaded && buffer.length) {
      var reqs = chunks(buffer).map(sendBatch);
      Promise.all(reqs).catch(console.error);
    }
  });
  function dispatch2(_url, body) {
    return __awaiter(this, void 0, void 0, function() {
      var bufferOverflow;
      return __generator(this, function(_a4) {
        buffer.push(body);
        bufferOverflow = buffer.length >= limit || approachingTrackingAPILimit(buffer) || (config === null || config === void 0 ? void 0 : config.keepalive) && passedKeepaliveLimit(buffer);
        return [2, bufferOverflow || pageUnloaded ? flush() : scheduleFlush2()];
      });
    });
  }
  return {
    dispatch: dispatch2
  };
}

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/fetch-dispatcher.js
function fetch_dispatcher_default(config) {
  function dispatch2(url, body) {
    return fetch2(url, {
      credentials: config === null || config === void 0 ? void 0 : config.credentials,
      keepalive: config === null || config === void 0 ? void 0 : config.keepalive,
      headers: createHeaders(config === null || config === void 0 ? void 0 : config.headers),
      method: "post",
      body: JSON.stringify(body),
      // @ts-ignore - not in the ts lib yet
      priority: config === null || config === void 0 ? void 0 : config.priority
    }).then(function(res) {
      var _a3;
      if (res.status >= 500) {
        throw new Error("Bad response from server: ".concat(res.status));
      }
      if (res.status === 429) {
        var retryTimeoutStringSecs = (_a3 = res.headers) === null || _a3 === void 0 ? void 0 : _a3.get("x-ratelimit-reset");
        var retryTimeoutMS = retryTimeoutStringSecs ? parseInt(retryTimeoutStringSecs) * 1e3 : 5e3;
        throw new RateLimitError("Rate limit exceeded: ".concat(res.status), retryTimeoutMS);
      }
    });
  }
  return {
    dispatch: dispatch2
  };
}

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/normalize.js
init_tslib_es6();
function normalize(analytics, json, settings, integrations, ctx) {
  var _a3;
  var user = analytics.user();
  delete json.options;
  json.writeKey = settings === null || settings === void 0 ? void 0 : settings.apiKey;
  json.userId = json.userId || user.id();
  json.anonymousId = json.anonymousId || user.anonymousId();
  json.sentAt = /* @__PURE__ */ new Date();
  var failed = analytics.queue.failedInitializations || [];
  if (failed.length > 0) {
    json._metadata = { failedInitializations: failed };
  }
  if (ctx != null) {
    if (ctx.attempts > 1) {
      json._metadata = __assign(__assign({}, json._metadata), { retryCount: ctx.attempts });
    }
    ctx.attempts++;
  }
  var bundled = [];
  var unbundled = [];
  for (var key in integrations) {
    var integration = integrations[key];
    if (key === "Segment.io") {
      bundled.push(key);
    }
    if (integration.bundlingStatus === "bundled") {
      bundled.push(key);
    }
    if (integration.bundlingStatus === "unbundled") {
      unbundled.push(key);
    }
  }
  for (var _i3 = 0, _b2 = (settings === null || settings === void 0 ? void 0 : settings.unbundledIntegrations) || []; _i3 < _b2.length; _i3++) {
    var settingsUnbundled = _b2[_i3];
    if (!unbundled.includes(settingsUnbundled)) {
      unbundled.push(settingsUnbundled);
    }
  }
  var configIds = (_a3 = settings === null || settings === void 0 ? void 0 : settings.maybeBundledConfigIds) !== null && _a3 !== void 0 ? _a3 : {};
  var bundledConfigIds = [];
  bundled.sort().forEach(function(name) {
    var _a4;
    ;
    ((_a4 = configIds[name]) !== null && _a4 !== void 0 ? _a4 : []).forEach(function(id) {
      bundledConfigIds.push(id);
    });
  });
  if ((settings === null || settings === void 0 ? void 0 : settings.addBundledMetadata) !== false) {
    json._metadata = __assign(__assign({}, json._metadata), { bundled: bundled.sort(), unbundled: unbundled.sort(), bundledIds: bundledConfigIds });
  }
  return json;
}

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/schedule-flush.js
init_tslib_es6();
function flushQueue(xt3, queue) {
  return __awaiter(this, void 0, void 0, function() {
    var failedQueue;
    var _this = this;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          failedQueue = [];
          if (isOffline()) {
            return [2, queue];
          }
          return [
            4,
            pWhile(function() {
              return queue.length > 0 && !isOffline();
            }, function() {
              return __awaiter(_this, void 0, void 0, function() {
                var ctx, result, success;
                return __generator(this, function(_a4) {
                  switch (_a4.label) {
                    case 0:
                      ctx = queue.pop();
                      if (!ctx) {
                        return [
                          2
                          /*return*/
                        ];
                      }
                      return [4, attempt(ctx, xt3)];
                    case 1:
                      result = _a4.sent();
                      success = result instanceof Context;
                      if (!success) {
                        failedQueue.push(ctx);
                      }
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            })
            // re-add failed tasks
          ];
        case 1:
          _a3.sent();
          failedQueue.map(function(failed) {
            return queue.pushWithBackoff(failed);
          });
          return [2, queue];
      }
    });
  });
}
function scheduleFlush(flushing, buffer, xt3, scheduleFlush2) {
  var _this = this;
  if (flushing) {
    return;
  }
  setTimeout(function() {
    return __awaiter(_this, void 0, void 0, function() {
      var isFlushing, newBuffer;
      return __generator(this, function(_a3) {
        switch (_a3.label) {
          case 0:
            isFlushing = true;
            return [4, flushQueue(xt3, buffer)];
          case 1:
            newBuffer = _a3.sent();
            isFlushing = false;
            if (buffer.todo > 0) {
              scheduleFlush2(isFlushing, newBuffer, xt3, scheduleFlush2);
            }
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, Math.random() * 5e3);
}

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/index.js
function onAlias(analytics, json) {
  var _a3, _b2, _c2, _d;
  var user = analytics.user();
  json.previousId = (_c2 = (_b2 = (_a3 = json.previousId) !== null && _a3 !== void 0 ? _a3 : json.from) !== null && _b2 !== void 0 ? _b2 : user.id()) !== null && _c2 !== void 0 ? _c2 : user.anonymousId();
  json.userId = (_d = json.userId) !== null && _d !== void 0 ? _d : json.to;
  delete json.from;
  delete json.to;
  return json;
}
var isSegmentPlugin = function(plugin) {
  return plugin.name === "Segment.io";
};
function segmentio(analytics, settings, integrations) {
  var _a3, _b2, _c2;
  window.addEventListener("pagehide", function() {
    buffer.push.apply(buffer, Array.from(inflightEvents));
    inflightEvents.clear();
  });
  var writeKey = (_a3 = settings === null || settings === void 0 ? void 0 : settings.apiKey) !== null && _a3 !== void 0 ? _a3 : "";
  var buffer = analytics.options.disableClientPersistence ? new PriorityQueue(analytics.queue.queue.maxAttempts, []) : new PersistedPriorityQueue(analytics.queue.queue.maxAttempts, "".concat(writeKey, ":dest-Segment.io"));
  var inflightEvents = /* @__PURE__ */ new Set();
  var flushing = false;
  var apiHost = (_b2 = settings === null || settings === void 0 ? void 0 : settings.apiHost) !== null && _b2 !== void 0 ? _b2 : SEGMENT_API_HOST;
  var protocol = (_c2 = settings === null || settings === void 0 ? void 0 : settings.protocol) !== null && _c2 !== void 0 ? _c2 : "https";
  var remote = "".concat(protocol, "://").concat(apiHost);
  var deliveryStrategy = settings === null || settings === void 0 ? void 0 : settings.deliveryStrategy;
  var client = deliveryStrategy && "strategy" in deliveryStrategy && deliveryStrategy.strategy === "batching" ? batch(apiHost, deliveryStrategy.config) : fetch_dispatcher_default(deliveryStrategy === null || deliveryStrategy === void 0 ? void 0 : deliveryStrategy.config);
  function send(ctx) {
    return __awaiter(this, void 0, void 0, function() {
      var path, json;
      return __generator(this, function(_a4) {
        if (isOffline()) {
          buffer.push(ctx);
          scheduleFlush(flushing, buffer, segmentio2, scheduleFlush);
          return [2, ctx];
        }
        inflightEvents.add(ctx);
        path = ctx.event.type.charAt(0);
        json = toFacade(ctx.event).json();
        if (ctx.event.type === "track") {
          delete json.traits;
        }
        if (ctx.event.type === "alias") {
          json = onAlias(analytics, json);
        }
        if (buffer.getAttempts(ctx) >= buffer.maxAttempts) {
          inflightEvents.delete(ctx);
          return [2, ctx];
        }
        return [2, client.dispatch("".concat(remote, "/").concat(path), normalize(analytics, json, settings, integrations, ctx)).then(function() {
          return ctx;
        }).catch(function(error) {
          ctx.log("error", "Error sending event", error);
          if (error.name === "RateLimitError") {
            var timeout = error.retryTimeout;
            buffer.pushWithBackoff(ctx, timeout);
          } else {
            buffer.pushWithBackoff(ctx);
          }
          scheduleFlush(flushing, buffer, segmentio2, scheduleFlush);
          return ctx;
        }).finally(function() {
          inflightEvents.delete(ctx);
        })];
      });
    });
  }
  var segmentio2 = {
    metadata: {
      writeKey,
      apiHost,
      protocol
    },
    name: "Segment.io",
    type: "destination",
    version: "0.1.0",
    isLoaded: function() {
      return true;
    },
    load: function() {
      return Promise.resolve();
    },
    track: send,
    identify: send,
    page: send,
    alias: send,
    group: send,
    screen: send
  };
  if (buffer.todo) {
    scheduleFlush(flushing, buffer, segmentio2, scheduleFlush);
  }
  return segmentio2;
}

// node_modules/@segment/analytics-next/dist/pkg/core/analytics/index.js
var deprecationWarning = "This is being deprecated and will be not be available in future releases of Analytics JS";
var global2 = getGlobal();
var _analytics = global2 === null || global2 === void 0 ? void 0 : global2.analytics;
function createDefaultQueue(name, retryQueue, disablePersistance) {
  if (retryQueue === void 0) {
    retryQueue = false;
  }
  if (disablePersistance === void 0) {
    disablePersistance = false;
  }
  var maxAttempts = retryQueue ? 10 : 1;
  var priorityQueue = disablePersistance ? new PriorityQueue(maxAttempts, []) : new PersistedPriorityQueue(maxAttempts, name);
  return new EventQueue(priorityQueue);
}
var AnalyticsInstanceSettings = (
  /** @class */
  function() {
    function AnalyticsInstanceSettings2(settings, queue) {
      var _a3;
      this.timeout = 300;
      this._getSegmentPluginMetadata = function() {
        var _a4;
        return (_a4 = queue.plugins.find(isSegmentPlugin)) === null || _a4 === void 0 ? void 0 : _a4.metadata;
      };
      this.writeKey = settings.writeKey;
      var emptyCDNSettings = {
        integrations: {
          "Segment.io": {
            apiKey: ""
          }
        }
      };
      this.cdnSettings = (_a3 = settings.cdnSettings) !== null && _a3 !== void 0 ? _a3 : emptyCDNSettings;
      this.cdnURL = settings.cdnURL;
    }
    Object.defineProperty(AnalyticsInstanceSettings2.prototype, "apiHost", {
      get: function() {
        var _a3, _b2;
        return (_b2 = (_a3 = this._getSegmentPluginMetadata) === null || _a3 === void 0 ? void 0 : _a3.call(this)) === null || _b2 === void 0 ? void 0 : _b2.apiHost;
      },
      enumerable: false,
      configurable: true
    });
    return AnalyticsInstanceSettings2;
  }()
);
function _stub() {
  console.warn(deprecationWarning);
}
var Analytics = (
  /** @class */
  function(_super) {
    __extends(Analytics3, _super);
    function Analytics3(settings, options, queue, user, group) {
      var _this = this;
      var _a3, _b2;
      _this = _super.call(this) || this;
      _this._debug = false;
      _this.initialized = false;
      _this.user = function() {
        return _this._user;
      };
      _this.init = _this.initialize.bind(_this);
      _this.log = _stub;
      _this.addIntegrationMiddleware = _stub;
      _this.listeners = _stub;
      _this.addEventListener = _stub;
      _this.removeAllListeners = _stub;
      _this.removeListener = _stub;
      _this.removeEventListener = _stub;
      _this.hasListeners = _stub;
      _this.add = _stub;
      _this.addIntegration = _stub;
      var cookieOptions2 = options === null || options === void 0 ? void 0 : options.cookie;
      var disablePersistance = (_a3 = options === null || options === void 0 ? void 0 : options.disableClientPersistence) !== null && _a3 !== void 0 ? _a3 : false;
      _this.queue = queue !== null && queue !== void 0 ? queue : createDefaultQueue("".concat(settings.writeKey, ":event-queue"), options === null || options === void 0 ? void 0 : options.retryQueue, disablePersistance);
      _this.settings = new AnalyticsInstanceSettings(settings, _this.queue);
      var storageSetting = options === null || options === void 0 ? void 0 : options.storage;
      _this._universalStorage = _this.createStore(disablePersistance, storageSetting, cookieOptions2);
      _this._user = user !== null && user !== void 0 ? user : new User(__assign({ persist: !disablePersistance, storage: options === null || options === void 0 ? void 0 : options.storage }, options === null || options === void 0 ? void 0 : options.user), cookieOptions2).load();
      _this._group = group !== null && group !== void 0 ? group : new Group(__assign({ persist: !disablePersistance, storage: options === null || options === void 0 ? void 0 : options.storage }, options === null || options === void 0 ? void 0 : options.group), cookieOptions2).load();
      _this.eventFactory = new EventFactory(_this._user);
      _this.integrations = (_b2 = options === null || options === void 0 ? void 0 : options.integrations) !== null && _b2 !== void 0 ? _b2 : {};
      _this.options = options !== null && options !== void 0 ? options : {};
      bindAll(_this);
      return _this;
    }
    Analytics3.prototype.createStore = function(disablePersistance, storageSetting, cookieOptions2) {
      if (disablePersistance) {
        return new UniversalStorage([new MemoryStorage()]);
      } else {
        if (storageSetting) {
          if (isArrayOfStoreType(storageSetting)) {
            return new UniversalStorage(initializeStorages(applyCookieOptions(storageSetting.stores, cookieOptions2)));
          }
        }
      }
      return new UniversalStorage(initializeStorages([
        StoreType.LocalStorage,
        {
          name: StoreType.Cookie,
          settings: cookieOptions2
        },
        StoreType.Memory
      ]));
    };
    Object.defineProperty(Analytics3.prototype, "storage", {
      get: function() {
        return this._universalStorage;
      },
      enumerable: false,
      configurable: true
    });
    Analytics3.prototype.track = function() {
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return __awaiter(this, void 0, void 0, function() {
        var pageCtx, _a3, name, data, opts, cb, segmentEvent;
        var _this = this;
        return __generator(this, function(_b2) {
          pageCtx = popPageContext(args);
          _a3 = resolveArguments.apply(void 0, args), name = _a3[0], data = _a3[1], opts = _a3[2], cb = _a3[3];
          segmentEvent = this.eventFactory.track(name, data, opts, this.integrations, pageCtx);
          return [2, this._dispatch(segmentEvent, cb).then(function(ctx) {
            _this.emit("track", name, ctx.event.properties, ctx.event.options);
            return ctx;
          })];
        });
      });
    };
    Analytics3.prototype.page = function() {
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return __awaiter(this, void 0, void 0, function() {
        var pageCtx, _a3, category, page, properties, options, callback, segmentEvent;
        var _this = this;
        return __generator(this, function(_b2) {
          pageCtx = popPageContext(args);
          _a3 = resolvePageArguments.apply(void 0, args), category = _a3[0], page = _a3[1], properties = _a3[2], options = _a3[3], callback = _a3[4];
          segmentEvent = this.eventFactory.page(category, page, properties, options, this.integrations, pageCtx);
          return [2, this._dispatch(segmentEvent, callback).then(function(ctx) {
            _this.emit("page", category, page, ctx.event.properties, ctx.event.options);
            return ctx;
          })];
        });
      });
    };
    Analytics3.prototype.identify = function() {
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return __awaiter(this, void 0, void 0, function() {
        var pageCtx, _a3, id, _traits, options, callback, segmentEvent;
        var _this = this;
        return __generator(this, function(_b2) {
          pageCtx = popPageContext(args);
          _a3 = resolveUserArguments(this._user).apply(void 0, args), id = _a3[0], _traits = _a3[1], options = _a3[2], callback = _a3[3];
          this._user.identify(id, _traits);
          segmentEvent = this.eventFactory.identify(this._user.id(), this._user.traits(), options, this.integrations, pageCtx);
          return [2, this._dispatch(segmentEvent, callback).then(function(ctx) {
            _this.emit("identify", ctx.event.userId, ctx.event.traits, ctx.event.options);
            return ctx;
          })];
        });
      });
    };
    Analytics3.prototype.group = function() {
      var _this = this;
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      var pageCtx = popPageContext(args);
      if (args.length === 0) {
        return this._group;
      }
      var _a3 = resolveUserArguments(this._group).apply(void 0, args), id = _a3[0], _traits = _a3[1], options = _a3[2], callback = _a3[3];
      this._group.identify(id, _traits);
      var groupId = this._group.id();
      var groupTraits = this._group.traits();
      var segmentEvent = this.eventFactory.group(groupId, groupTraits, options, this.integrations, pageCtx);
      return this._dispatch(segmentEvent, callback).then(function(ctx) {
        _this.emit("group", ctx.event.groupId, ctx.event.traits, ctx.event.options);
        return ctx;
      });
    };
    Analytics3.prototype.alias = function() {
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return __awaiter(this, void 0, void 0, function() {
        var pageCtx, _a3, to3, from, options, callback, segmentEvent;
        var _this = this;
        return __generator(this, function(_b2) {
          pageCtx = popPageContext(args);
          _a3 = resolveAliasArguments.apply(void 0, args), to3 = _a3[0], from = _a3[1], options = _a3[2], callback = _a3[3];
          segmentEvent = this.eventFactory.alias(to3, from, options, this.integrations, pageCtx);
          return [2, this._dispatch(segmentEvent, callback).then(function(ctx) {
            _this.emit("alias", to3, from, ctx.event.options);
            return ctx;
          })];
        });
      });
    };
    Analytics3.prototype.screen = function() {
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return __awaiter(this, void 0, void 0, function() {
        var pageCtx, _a3, category, page, properties, options, callback, segmentEvent;
        var _this = this;
        return __generator(this, function(_b2) {
          pageCtx = popPageContext(args);
          _a3 = resolvePageArguments.apply(void 0, args), category = _a3[0], page = _a3[1], properties = _a3[2], options = _a3[3], callback = _a3[4];
          segmentEvent = this.eventFactory.screen(category, page, properties, options, this.integrations, pageCtx);
          return [2, this._dispatch(segmentEvent, callback).then(function(ctx) {
            _this.emit("screen", category, page, ctx.event.properties, ctx.event.options);
            return ctx;
          })];
        });
      });
    };
    Analytics3.prototype.trackClick = function() {
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return __awaiter(this, void 0, void 0, function() {
        var autotrack;
        var _a3;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              return [4, import(
                /* webpackChunkName: "auto-track" */
                "./auto-track-SWRGICZB.js"
              )];
            case 1:
              autotrack = _b2.sent();
              return [2, (_a3 = autotrack.link).call.apply(_a3, __spreadArray([this], args, false))];
          }
        });
      });
    };
    Analytics3.prototype.trackLink = function() {
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return __awaiter(this, void 0, void 0, function() {
        var autotrack;
        var _a3;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              return [4, import(
                /* webpackChunkName: "auto-track" */
                "./auto-track-SWRGICZB.js"
              )];
            case 1:
              autotrack = _b2.sent();
              return [2, (_a3 = autotrack.link).call.apply(_a3, __spreadArray([this], args, false))];
          }
        });
      });
    };
    Analytics3.prototype.trackSubmit = function() {
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return __awaiter(this, void 0, void 0, function() {
        var autotrack;
        var _a3;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              return [4, import(
                /* webpackChunkName: "auto-track" */
                "./auto-track-SWRGICZB.js"
              )];
            case 1:
              autotrack = _b2.sent();
              return [2, (_a3 = autotrack.form).call.apply(_a3, __spreadArray([this], args, false))];
          }
        });
      });
    };
    Analytics3.prototype.trackForm = function() {
      var args = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        args[_i3] = arguments[_i3];
      }
      return __awaiter(this, void 0, void 0, function() {
        var autotrack;
        var _a3;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              return [4, import(
                /* webpackChunkName: "auto-track" */
                "./auto-track-SWRGICZB.js"
              )];
            case 1:
              autotrack = _b2.sent();
              return [2, (_a3 = autotrack.form).call.apply(_a3, __spreadArray([this], args, false))];
          }
        });
      });
    };
    Analytics3.prototype.register = function() {
      var plugins = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        plugins[_i3] = arguments[_i3];
      }
      return __awaiter(this, void 0, void 0, function() {
        var ctx, registrations;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              ctx = Context.system();
              registrations = plugins.map(function(xt3) {
                return _this.queue.register(ctx, xt3, _this);
              });
              return [4, Promise.all(registrations)];
            case 1:
              _a3.sent();
              return [2, ctx];
          }
        });
      });
    };
    Analytics3.prototype.deregister = function() {
      var plugins = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        plugins[_i3] = arguments[_i3];
      }
      return __awaiter(this, void 0, void 0, function() {
        var ctx, deregistrations;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              ctx = Context.system();
              deregistrations = plugins.map(function(pl) {
                var plugin = _this.queue.plugins.find(function(p2) {
                  return p2.name === pl;
                });
                if (plugin) {
                  return _this.queue.deregister(ctx, plugin, _this);
                } else {
                  ctx.log("warn", "plugin ".concat(pl, " not found"));
                }
              });
              return [4, Promise.all(deregistrations)];
            case 1:
              _a3.sent();
              return [2, ctx];
          }
        });
      });
    };
    Analytics3.prototype.debug = function(toggle) {
      if (toggle === false && localStorage.getItem("debug")) {
        localStorage.removeItem("debug");
      }
      this._debug = toggle;
      return this;
    };
    Analytics3.prototype.reset = function() {
      this._user.reset();
      this._group.reset();
      this.emit("reset");
    };
    Analytics3.prototype.timeout = function(timeout) {
      this.settings.timeout = timeout;
    };
    Analytics3.prototype._dispatch = function(event, callback) {
      return __awaiter(this, void 0, void 0, function() {
        var ctx;
        return __generator(this, function(_a3) {
          ctx = new Context(event);
          ctx.stats.increment("analytics_js.invoke", 1, [event.type]);
          if (isOffline() && !this.options.retryQueue) {
            return [2, ctx];
          }
          return [2, dispatch(ctx, this.queue, this, {
            callback,
            debug: this._debug,
            timeout: this.settings.timeout
          })];
        });
      });
    };
    Analytics3.prototype.addSourceMiddleware = function(fn3) {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.queue.criticalTasks.run(function() {
                return __awaiter(_this, void 0, void 0, function() {
                  var sourceMiddlewarePlugin, integrations, plugin;
                  return __generator(this, function(_a4) {
                    switch (_a4.label) {
                      case 0:
                        return [4, import(
                          /* webpackChunkName: "middleware" */
                          "./middleware-AD5TH3MK.js"
                        )];
                      case 1:
                        sourceMiddlewarePlugin = _a4.sent().sourceMiddlewarePlugin;
                        integrations = {};
                        this.queue.plugins.forEach(function(plugin2) {
                          if (plugin2.type === "destination") {
                            return integrations[plugin2.name] = true;
                          }
                        });
                        plugin = sourceMiddlewarePlugin(fn3, integrations);
                        return [4, this.register(plugin)];
                      case 2:
                        _a4.sent();
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              })];
            case 1:
              _a3.sent();
              return [2, this];
          }
        });
      });
    };
    Analytics3.prototype.addDestinationMiddleware = function(integrationName) {
      var middlewares = [];
      for (var _i3 = 1; _i3 < arguments.length; _i3++) {
        middlewares[_i3 - 1] = arguments[_i3];
      }
      this.queue.plugins.filter(isDestinationPluginWithAddMiddleware).forEach(function(p2) {
        if (integrationName === "*" || p2.name.toLowerCase() === integrationName.toLowerCase()) {
          p2.addMiddleware.apply(p2, middlewares);
        }
      });
      return Promise.resolve(this);
    };
    Analytics3.prototype.setAnonymousId = function(id) {
      return this._user.anonymousId(id);
    };
    Analytics3.prototype.queryString = function(query) {
      return __awaiter(this, void 0, void 0, function() {
        var queryString;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (this.options.useQueryString === false) {
                return [2, []];
              }
              return [4, import(
                /* webpackChunkName: "queryString" */
                "./query-string-A4YZFM3O.js"
              )];
            case 1:
              queryString = _a3.sent().queryString;
              return [2, queryString(this, query)];
          }
        });
      });
    };
    Analytics3.prototype.use = function(legacyPluginFactory) {
      legacyPluginFactory(this);
      return this;
    };
    Analytics3.prototype.ready = function(callback) {
      if (callback === void 0) {
        callback = function(res) {
          return res;
        };
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          return [2, Promise.all(this.queue.plugins.map(function(i3) {
            return i3.ready ? i3.ready() : Promise.resolve();
          })).then(function(res) {
            callback(res);
            return res;
          })];
        });
      });
    };
    Analytics3.prototype.noConflict = function() {
      console.warn(deprecationWarning);
      setGlobalAnalytics(_analytics !== null && _analytics !== void 0 ? _analytics : this);
      return this;
    };
    Analytics3.prototype.normalize = function(msg) {
      console.warn(deprecationWarning);
      return this.eventFactory["normalize"](msg);
    };
    Object.defineProperty(Analytics3.prototype, "failedInitializations", {
      get: function() {
        console.warn(deprecationWarning);
        return this.queue.failedInitializations;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Analytics3.prototype, "VERSION", {
      get: function() {
        return version;
      },
      enumerable: false,
      configurable: true
    });
    Analytics3.prototype.initialize = function(_settings, _options) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          console.warn(deprecationWarning);
          return [2, Promise.resolve(this)];
        });
      });
    };
    Analytics3.prototype.pageview = function(url) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              console.warn(deprecationWarning);
              return [4, this.page({ path: url })];
            case 1:
              _a3.sent();
              return [2, this];
          }
        });
      });
    };
    Object.defineProperty(Analytics3.prototype, "plugins", {
      get: function() {
        var _a3;
        console.warn(deprecationWarning);
        return (_a3 = this._plugins) !== null && _a3 !== void 0 ? _a3 : {};
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Analytics3.prototype, "Integrations", {
      get: function() {
        console.warn(deprecationWarning);
        var integrations = this.queue.plugins.filter(function(plugin) {
          return plugin.type === "destination";
        }).reduce(function(acc, plugin) {
          var name = "".concat(plugin.name.toLowerCase().replace(".", "").split(" ").join("-"), "Integration");
          var integration = window[name];
          if (!integration) {
            return acc;
          }
          var nested = integration.Integration;
          if (nested) {
            acc[plugin.name] = nested;
            return acc;
          }
          acc[plugin.name] = integration;
          return acc;
        }, {});
        return integrations;
      },
      enumerable: false,
      configurable: true
    });
    Analytics3.prototype.push = function(args) {
      var an3 = this;
      var method = args.shift();
      if (method) {
        if (!an3[method])
          return;
      }
      an3[method].apply(this, args);
    };
    return Analytics3;
  }(Emitter)
);
var NullAnalytics = (
  /** @class */
  function(_super) {
    __extends(NullAnalytics2, _super);
    function NullAnalytics2() {
      var _this = _super.call(this, { writeKey: "" }, { disableClientPersistence: true }) || this;
      _this.initialized = true;
      return _this;
    }
    return NullAnalytics2;
  }(Analytics)
);

// node_modules/@segment/analytics-next/dist/pkg/browser/index.js
init_tslib_es6();

// node_modules/@segment/analytics-next/dist/pkg/lib/get-process-env.js
function getProcessEnv() {
  if (typeof process === "undefined" || !process.env) {
    return {};
  }
  return process.env;
}

// node_modules/@segment/analytics-next/dist/pkg/plugins/env-enrichment/index.js
init_tslib_es6();

// node_modules/@segment/analytics-next/dist/pkg/lib/client-hints/index.js
init_tslib_es6();
function clientHints(hints) {
  return __awaiter(this, void 0, void 0, function() {
    var userAgentData;
    return __generator(this, function(_a3) {
      userAgentData = navigator.userAgentData;
      if (!userAgentData)
        return [2, void 0];
      if (!hints)
        return [2, userAgentData.toJSON()];
      return [2, userAgentData.getHighEntropyValues(hints).catch(function() {
        return userAgentData.toJSON();
      })];
    });
  });
}

// node_modules/@segment/analytics-next/dist/pkg/plugins/env-enrichment/index.js
var cookieOptions;
function getCookieOptions() {
  if (cookieOptions) {
    return cookieOptions;
  }
  var domain = tld(window.location.href);
  cookieOptions = {
    expires: 31536e6,
    secure: false,
    path: "/"
  };
  if (domain) {
    cookieOptions.domain = domain;
  }
  return cookieOptions;
}
function ads(query) {
  var queryIds = {
    btid: "dataxu",
    urid: "millennial-media"
  };
  if (query.startsWith("?")) {
    query = query.substring(1);
  }
  query = query.replace(/\?/g, "&");
  var parts = query.split("&");
  for (var _i3 = 0, parts_1 = parts; _i3 < parts_1.length; _i3++) {
    var part = parts_1[_i3];
    var _a3 = part.split("="), k4 = _a3[0], v3 = _a3[1];
    if (queryIds[k4]) {
      return {
        id: v3,
        type: queryIds[k4]
      };
    }
  }
}
function utm(query) {
  if (query.startsWith("?")) {
    query = query.substring(1);
  }
  query = query.replace(/\?/g, "&");
  return query.split("&").reduce(function(acc, str) {
    var _a3 = str.split("="), k4 = _a3[0], _b2 = _a3[1], v3 = _b2 === void 0 ? "" : _b2;
    if (k4.includes("utm_") && k4.length > 4) {
      var utmParam = k4.slice(4);
      if (utmParam === "campaign") {
        utmParam = "name";
      }
      acc[utmParam] = gracefulDecodeURIComponent(v3);
    }
    return acc;
  }, {});
}
function ampId() {
  var ampId2 = js_cookie_default.get("_ga");
  if (ampId2 && ampId2.startsWith("amp")) {
    return ampId2;
  }
}
function referrerId(query, ctx, disablePersistance) {
  var _a3;
  var storage = new UniversalStorage(disablePersistance ? [] : [new CookieStorage(getCookieOptions())]);
  var stored = storage.get("s:context.referrer");
  var ad = (_a3 = ads(query)) !== null && _a3 !== void 0 ? _a3 : stored;
  if (!ad) {
    return;
  }
  if (ctx) {
    ctx.referrer = __assign(__assign({}, ctx.referrer), ad);
  }
  storage.set("s:context.referrer", ad);
}
var objectToQueryString = function(obj) {
  try {
    var searchParams_1 = new URLSearchParams();
    Object.entries(obj).forEach(function(_a3) {
      var k4 = _a3[0], v3 = _a3[1];
      if (Array.isArray(v3)) {
        v3.forEach(function(value) {
          return searchParams_1.append(k4, value);
        });
      } else {
        searchParams_1.append(k4, v3);
      }
    });
    return searchParams_1.toString();
  } catch (_a3) {
    return "";
  }
};
var EnvironmentEnrichmentPlugin = (
  /** @class */
  /* @__PURE__ */ function() {
    function EnvironmentEnrichmentPlugin2() {
      var _this = this;
      this.name = "Page Enrichment";
      this.type = "before";
      this.version = "0.1.0";
      this.isLoaded = function() {
        return true;
      };
      this.load = function(_ctx, instance) {
        return __awaiter(_this, void 0, void 0, function() {
          var _a3, _1;
          return __generator(this, function(_b2) {
            switch (_b2.label) {
              case 0:
                this.instance = instance;
                _b2.label = 1;
              case 1:
                _b2.trys.push([1, 3, , 4]);
                _a3 = this;
                return [4, clientHints(this.instance.options.highEntropyValuesClientHints)];
              case 2:
                _a3.userAgentData = _b2.sent();
                return [3, 4];
              case 3:
                _1 = _b2.sent();
                return [3, 4];
              case 4:
                return [2, Promise.resolve()];
            }
          });
        });
      };
      this.enrich = function(ctx) {
        var _a3, _b2;
        var evtCtx = ctx.event.context;
        var search = evtCtx.page.search || "";
        var query = typeof search === "object" ? objectToQueryString(search) : search;
        evtCtx.userAgent = navigator.userAgent;
        evtCtx.userAgentData = _this.userAgentData;
        var locale = navigator.userLanguage || navigator.language;
        if (typeof evtCtx.locale === "undefined" && typeof locale !== "undefined") {
          evtCtx.locale = locale;
        }
        (_a3 = evtCtx.library) !== null && _a3 !== void 0 ? _a3 : evtCtx.library = {
          name: "analytics.js",
          version: "".concat(getVersionType() === "web" ? "next" : "npm:next", "-").concat(version)
        };
        if (query && !evtCtx.campaign) {
          evtCtx.campaign = utm(query);
        }
        var amp = ampId();
        if (amp) {
          evtCtx.amp = { id: amp };
        }
        referrerId(query, evtCtx, (_b2 = _this.instance.options.disableClientPersistence) !== null && _b2 !== void 0 ? _b2 : false);
        try {
          evtCtx.timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        } catch (_2) {
        }
        return ctx;
      };
      this.track = this.enrich;
      this.identify = this.enrich;
      this.page = this.enrich;
      this.group = this.enrich;
      this.alias = this.enrich;
      this.screen = this.enrich;
    }
    return EnvironmentEnrichmentPlugin2;
  }()
);
var envEnrichment = new EnvironmentEnrichmentPlugin();

// node_modules/@segment/analytics-next/dist/pkg/plugins/remote-loader/index.js
init_tslib_es6();
var ActionDestination = (
  /** @class */
  function() {
    function ActionDestination2(name, action) {
      this.version = "1.0.0";
      this.alternativeNames = [];
      this.loadPromise = createDeferred();
      this.middleware = [];
      this.alias = this._createMethod("alias");
      this.group = this._createMethod("group");
      this.identify = this._createMethod("identify");
      this.page = this._createMethod("page");
      this.screen = this._createMethod("screen");
      this.track = this._createMethod("track");
      this.action = action;
      this.name = name;
      this.type = action.type;
      this.alternativeNames.push(action.name);
    }
    ActionDestination2.prototype.addMiddleware = function() {
      var _a3;
      var fn3 = [];
      for (var _i3 = 0; _i3 < arguments.length; _i3++) {
        fn3[_i3] = arguments[_i3];
      }
      if (this.type === "destination") {
        (_a3 = this.middleware).push.apply(_a3, fn3);
      }
    };
    ActionDestination2.prototype.transform = function(ctx) {
      return __awaiter(this, void 0, void 0, function() {
        var modifiedEvent;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, applyDestinationMiddleware(this.name, ctx.event, this.middleware)];
            case 1:
              modifiedEvent = _a3.sent();
              if (modifiedEvent === null) {
                ctx.cancel(new ContextCancelation({
                  retry: false,
                  reason: "dropped by destination middleware"
                }));
              }
              return [2, new Context(modifiedEvent)];
          }
        });
      });
    };
    ActionDestination2.prototype._createMethod = function(methodName) {
      var _this = this;
      return function(ctx) {
        return __awaiter(_this, void 0, void 0, function() {
          var transformedContext, error_1;
          return __generator(this, function(_a3) {
            switch (_a3.label) {
              case 0:
                if (!this.action[methodName])
                  return [2, ctx];
                transformedContext = ctx;
                if (!(this.type === "destination")) return [3, 2];
                return [4, this.transform(ctx)];
              case 1:
                transformedContext = _a3.sent();
                _a3.label = 2;
              case 2:
                _a3.trys.push([2, 5, , 6]);
                return [4, this.ready()];
              case 3:
                if (!_a3.sent()) {
                  throw new Error("Something prevented the destination from getting ready");
                }
                recordIntegrationMetric(ctx, {
                  integrationName: this.action.name,
                  methodName,
                  type: "action"
                });
                return [4, this.action[methodName](transformedContext)];
              case 4:
                _a3.sent();
                return [3, 6];
              case 5:
                error_1 = _a3.sent();
                recordIntegrationMetric(ctx, {
                  integrationName: this.action.name,
                  methodName,
                  type: "action",
                  didError: true
                });
                throw error_1;
              case 6:
                return [2, ctx];
            }
          });
        });
      };
    };
    ActionDestination2.prototype.isLoaded = function() {
      return this.action.isLoaded();
    };
    ActionDestination2.prototype.ready = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              _b2.trys.push([0, 2, , 3]);
              return [4, this.loadPromise.promise];
            case 1:
              _b2.sent();
              return [2, true];
            case 2:
              _a3 = _b2.sent();
              return [2, false];
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    ActionDestination2.prototype.load = function(ctx, analytics) {
      return __awaiter(this, void 0, void 0, function() {
        var loadP, _a3, _b2, error_2;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              if (this.loadPromise.isSettled()) {
                return [2, this.loadPromise.promise];
              }
              _c2.label = 1;
            case 1:
              _c2.trys.push([1, 3, , 4]);
              recordIntegrationMetric(ctx, {
                integrationName: this.action.name,
                methodName: "load",
                type: "action"
              });
              loadP = this.action.load(ctx, analytics);
              _b2 = (_a3 = this.loadPromise).resolve;
              return [4, loadP];
            case 2:
              _b2.apply(_a3, [_c2.sent()]);
              return [2, loadP];
            case 3:
              error_2 = _c2.sent();
              recordIntegrationMetric(ctx, {
                integrationName: this.action.name,
                methodName: "load",
                type: "action",
                didError: true
              });
              this.loadPromise.reject(error_2);
              throw error_2;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    ActionDestination2.prototype.unload = function(ctx, analytics) {
      var _a3, _b2;
      return (_b2 = (_a3 = this.action).unload) === null || _b2 === void 0 ? void 0 : _b2.call(_a3, ctx, analytics);
    };
    return ActionDestination2;
  }()
);
function validate(pluginLike) {
  if (!Array.isArray(pluginLike)) {
    throw new Error("Not a valid list of plugins");
  }
  var required = ["load", "isLoaded", "name", "version", "type"];
  pluginLike.forEach(function(plugin) {
    required.forEach(function(method) {
      var _a3;
      if (plugin[method] === void 0) {
        throw new Error("Plugin: ".concat((_a3 = plugin.name) !== null && _a3 !== void 0 ? _a3 : "unknown", " missing required function ").concat(method));
      }
    });
  });
  return true;
}
function isPluginDisabled(userIntegrations, remotePlugin) {
  var creationNameEnabled = userIntegrations[remotePlugin.creationName];
  var currentNameEnabled = userIntegrations[remotePlugin.name];
  if (userIntegrations.All === false && !creationNameEnabled && !currentNameEnabled) {
    return true;
  }
  if (creationNameEnabled === false || currentNameEnabled === false) {
    return true;
  }
  return false;
}
function loadPluginFactory(remotePlugin, obfuscate) {
  return __awaiter(this, void 0, void 0, function() {
    var defaultCdn, cdn, urlSplit, name_1, obfuscatedURL, error_3, err_1;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          _a3.trys.push([0, 9, , 10]);
          defaultCdn = new RegExp("https://cdn.segment.(com|build)");
          cdn = getCDN();
          if (!obfuscate) return [3, 6];
          urlSplit = remotePlugin.url.split("/");
          name_1 = urlSplit[urlSplit.length - 2];
          obfuscatedURL = remotePlugin.url.replace(name_1, btoa(name_1).replace(/=/g, ""));
          _a3.label = 1;
        case 1:
          _a3.trys.push([1, 3, , 5]);
          return [4, loadScript(obfuscatedURL.replace(defaultCdn, cdn))];
        case 2:
          _a3.sent();
          return [3, 5];
        case 3:
          error_3 = _a3.sent();
          return [4, loadScript(remotePlugin.url.replace(defaultCdn, cdn))];
        case 4:
          _a3.sent();
          return [3, 5];
        case 5:
          return [3, 8];
        case 6:
          return [4, loadScript(remotePlugin.url.replace(defaultCdn, cdn))];
        case 7:
          _a3.sent();
          _a3.label = 8;
        case 8:
          if (typeof window[remotePlugin.libraryName] === "function") {
            return [2, window[remotePlugin.libraryName]];
          }
          return [3, 10];
        case 9:
          err_1 = _a3.sent();
          console.error("Failed to create PluginFactory", remotePlugin);
          throw err_1;
        case 10:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function remoteLoader(settings, integrations, mergedIntegrations, options, routingMiddleware, pluginSources) {
  var _a3, _b2, _c2;
  return __awaiter(this, void 0, void 0, function() {
    var allPlugins, routingRules, pluginPromises;
    var _this = this;
    return __generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          allPlugins = [];
          routingRules = (_b2 = (_a3 = settings.middlewareSettings) === null || _a3 === void 0 ? void 0 : _a3.routingRules) !== null && _b2 !== void 0 ? _b2 : [];
          pluginPromises = ((_c2 = settings.remotePlugins) !== null && _c2 !== void 0 ? _c2 : []).map(function(remotePlugin) {
            return __awaiter(_this, void 0, void 0, function() {
              var pluginFactory, _a4, intg, plugin, plugins, routing_1, error_4;
              return __generator(this, function(_b3) {
                switch (_b3.label) {
                  case 0:
                    if (isPluginDisabled(integrations, remotePlugin))
                      return [
                        2
                        /*return*/
                      ];
                    _b3.label = 1;
                  case 1:
                    _b3.trys.push([1, 6, , 7]);
                    _a4 = pluginSources === null || pluginSources === void 0 ? void 0 : pluginSources.find(function(_a5) {
                      var pluginName = _a5.pluginName;
                      return pluginName === remotePlugin.name;
                    });
                    if (_a4) return [3, 3];
                    return [4, loadPluginFactory(remotePlugin, options === null || options === void 0 ? void 0 : options.obfuscate)];
                  case 2:
                    _a4 = _b3.sent();
                    _b3.label = 3;
                  case 3:
                    pluginFactory = _a4;
                    if (!pluginFactory) return [3, 5];
                    intg = mergedIntegrations[remotePlugin.name];
                    return [4, pluginFactory(__assign(__assign({}, remotePlugin.settings), intg))];
                  case 4:
                    plugin = _b3.sent();
                    plugins = Array.isArray(plugin) ? plugin : [plugin];
                    validate(plugins);
                    routing_1 = routingRules.filter(function(rule) {
                      return rule.destinationName === remotePlugin.creationName;
                    });
                    plugins.forEach(function(plugin2) {
                      var wrapper = new ActionDestination(remotePlugin.creationName, plugin2);
                      if (routing_1.length && routingMiddleware) {
                        wrapper.addMiddleware(routingMiddleware);
                      }
                      allPlugins.push(wrapper);
                    });
                    _b3.label = 5;
                  case 5:
                    return [3, 7];
                  case 6:
                    error_4 = _b3.sent();
                    console.warn("Failed to load Remote Plugin", error_4);
                    return [3, 7];
                  case 7:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          });
          return [4, Promise.all(pluginPromises)];
        case 1:
          _d.sent();
          return [2, allPlugins.filter(Boolean)];
      }
    });
  });
}

// node_modules/@segment/analytics-next/dist/pkg/core/inspector/index.js
var _a;
var _b;
var env = getGlobal();
var inspectorHost = (_a = (_b = env)["__SEGMENT_INSPECTOR__"]) !== null && _a !== void 0 ? _a : _b["__SEGMENT_INSPECTOR__"] = {};
var attachInspector = function(analytics) {
  var _a3;
  return (_a3 = inspectorHost.attach) === null || _a3 === void 0 ? void 0 : _a3.call(inspectorHost, analytics);
};

// node_modules/@segment/analytics-next/dist/pkg/browser/index.js
function loadCDNSettings(writeKey, baseUrl) {
  return fetch2("".concat(baseUrl, "/v1/projects/").concat(writeKey, "/settings")).then(function(res) {
    if (!res.ok) {
      return res.text().then(function(errorResponseMessage) {
        throw new Error(errorResponseMessage);
      });
    }
    return res.json();
  }).catch(function(err) {
    console.error(err.message);
    throw err;
  });
}
function hasLegacyDestinations(settings) {
  return getProcessEnv().NODE_ENV !== "test" && // just one integration means segmentio
  Object.keys(settings.integrations).length > 1;
}
function hasTsubMiddleware(settings) {
  var _a3, _b2, _c2;
  return getProcessEnv().NODE_ENV !== "test" && ((_c2 = (_b2 = (_a3 = settings.middlewareSettings) === null || _a3 === void 0 ? void 0 : _a3.routingRules) === null || _b2 === void 0 ? void 0 : _b2.length) !== null && _c2 !== void 0 ? _c2 : 0) > 0;
}
function flushPreBuffer(analytics, buffer) {
  flushSetAnonymousID(analytics, buffer);
  flushOn(analytics, buffer);
}
function flushFinalBuffer(analytics, queryString, buffer) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          return [4, flushQueryString(analytics, queryString)];
        case 1:
          _a3.sent();
          flushAnalyticsCallsInNewTask(analytics, buffer);
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
var getQueryString = function() {
  var _a3, _b2;
  var hash = (_a3 = window.location.hash) !== null && _a3 !== void 0 ? _a3 : "";
  var search = (_b2 = window.location.search) !== null && _b2 !== void 0 ? _b2 : "";
  var term = search.length ? search : hash.replace(/(?=#).*(?=\?)/, "");
  return term;
};
var flushQueryString = function(analytics, queryString) {
  return __awaiter(void 0, void 0, void 0, function() {
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          if (!queryString.includes("ajs_")) return [3, 2];
          return [4, analytics.queryString(queryString).catch(console.error)];
        case 1:
          _a3.sent();
          _a3.label = 2;
        case 2:
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
function registerPlugins(writeKey, cdnSettings, analytics, options, pluginLikes, legacyIntegrationSources, preInitBuffer) {
  var _a3, _b2, _c2;
  if (pluginLikes === void 0) {
    pluginLikes = [];
  }
  return __awaiter(this, void 0, void 0, function() {
    var pluginsFromSettings, pluginSources, tsubMiddleware, _d, legacyDestinations, _e3, schemaFilter, _f2, mergedSettings, remotePlugins, basePlugins, shouldIgnoreSegmentio, _g, _h, ctx;
    var _this = this;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          flushPreBuffer(analytics, preInitBuffer);
          pluginsFromSettings = pluginLikes === null || pluginLikes === void 0 ? void 0 : pluginLikes.filter(function(pluginLike) {
            return typeof pluginLike === "object";
          });
          pluginSources = pluginLikes === null || pluginLikes === void 0 ? void 0 : pluginLikes.filter(function(pluginLike) {
            return typeof pluginLike === "function" && typeof pluginLike.pluginName === "string";
          });
          if (!hasTsubMiddleware(cdnSettings)) return [3, 2];
          return [4, import(
            /* webpackChunkName: "tsub-middleware" */
            "./routing-middleware-J3W5QA2A.js"
          ).then(function(mod) {
            return mod.tsubMiddleware(cdnSettings.middlewareSettings.routingRules);
          })];
        case 1:
          _d = _j.sent();
          return [3, 3];
        case 2:
          _d = void 0;
          _j.label = 3;
        case 3:
          tsubMiddleware = _d;
          if (!(hasLegacyDestinations(cdnSettings) || legacyIntegrationSources.length > 0)) return [3, 5];
          return [4, import(
            /* webpackChunkName: "ajs-destination" */
            "./ajs-destination-7VPXST3B.js"
          ).then(function(mod) {
            return mod.ajsDestinations(writeKey, cdnSettings, analytics.integrations, options, tsubMiddleware, legacyIntegrationSources);
          })];
        case 4:
          _e3 = _j.sent();
          return [3, 6];
        case 5:
          _e3 = [];
          _j.label = 6;
        case 6:
          legacyDestinations = _e3;
          if (!cdnSettings.legacyVideoPluginsEnabled) return [3, 8];
          return [4, import(
            /* webpackChunkName: "legacyVideos" */
            "./legacy-video-plugins-UROSXHIM.js"
          ).then(function(mod) {
            return mod.loadLegacyVideoPlugins(analytics);
          })];
        case 7:
          _j.sent();
          _j.label = 8;
        case 8:
          if (!((_a3 = options.plan) === null || _a3 === void 0 ? void 0 : _a3.track)) return [3, 10];
          return [4, import(
            /* webpackChunkName: "schemaFilter" */
            "./schema-filter-IA7FJJ57.js"
          ).then(function(mod) {
            var _a4;
            return mod.schemaFilter((_a4 = options.plan) === null || _a4 === void 0 ? void 0 : _a4.track, cdnSettings);
          })];
        case 9:
          _f2 = _j.sent();
          return [3, 11];
        case 10:
          _f2 = void 0;
          _j.label = 11;
        case 11:
          schemaFilter = _f2;
          mergedSettings = mergedOptions(cdnSettings, options);
          return [4, remoteLoader(cdnSettings, analytics.integrations, mergedSettings, options, tsubMiddleware, pluginSources).catch(function() {
            return [];
          })];
        case 12:
          remotePlugins = _j.sent();
          basePlugins = __spreadArray(__spreadArray([envEnrichment], legacyDestinations, true), remotePlugins, true);
          if (schemaFilter) {
            basePlugins.push(schemaFilter);
          }
          shouldIgnoreSegmentio = ((_b2 = options.integrations) === null || _b2 === void 0 ? void 0 : _b2.All) === false && !options.integrations["Segment.io"] || options.integrations && options.integrations["Segment.io"] === false;
          if (!!shouldIgnoreSegmentio) return [3, 14];
          _h = (_g = basePlugins).push;
          return [4, segmentio(analytics, mergedSettings["Segment.io"], cdnSettings.integrations)];
        case 13:
          _h.apply(_g, [_j.sent()]);
          _j.label = 14;
        case 14:
          return [4, analytics.register.apply(analytics, __spreadArray(__spreadArray([], basePlugins, false), pluginsFromSettings, false))];
        case 15:
          ctx = _j.sent();
          return [4, flushRegister(analytics, preInitBuffer)];
        case 16:
          _j.sent();
          if (!Object.entries((_c2 = cdnSettings.enabledMiddleware) !== null && _c2 !== void 0 ? _c2 : {}).some(function(_a4) {
            var enabled = _a4[1];
            return enabled;
          })) return [3, 18];
          return [4, import(
            /* webpackChunkName: "remoteMiddleware" */
            "./remote-middleware-PLMV25OB.js"
          ).then(function(_a4) {
            var remoteMiddlewares = _a4.remoteMiddlewares;
            return __awaiter(_this, void 0, void 0, function() {
              var middleware, promises;
              return __generator(this, function(_b3) {
                switch (_b3.label) {
                  case 0:
                    return [4, remoteMiddlewares(ctx, cdnSettings, options.obfuscate)];
                  case 1:
                    middleware = _b3.sent();
                    promises = middleware.map(function(mdw) {
                      return analytics.addSourceMiddleware(mdw);
                    });
                    return [2, Promise.all(promises)];
                }
              });
            });
          })];
        case 17:
          _j.sent();
          _j.label = 18;
        case 18:
          return [4, flushAddSourceMiddleware(analytics, preInitBuffer)];
        case 19:
          _j.sent();
          return [2, ctx];
      }
    });
  });
}
function loadAnalytics(settings, options, preInitBuffer) {
  var _a3, _b2, _c2, _d, _e3, _f2, _g, _h, _j;
  if (options === void 0) {
    options = {};
  }
  return __awaiter(this, void 0, void 0, function() {
    var queryString, cdnURL, cdnSettings, _k, disabled, retryQueue, analytics, plugins, classicIntegrations, segmentLoadOptions, ctx;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          if (options.disable === true) {
            return [2, [new NullAnalytics(), Context.system()]];
          }
          if (options.globalAnalyticsKey)
            setGlobalAnalyticsKey(options.globalAnalyticsKey);
          if (settings.cdnURL)
            setGlobalCDNUrl(settings.cdnURL);
          if (options.initialPageview) {
            preInitBuffer.add(new PreInitMethodCall("page", []));
          }
          queryString = getQueryString();
          cdnURL = (_a3 = settings.cdnURL) !== null && _a3 !== void 0 ? _a3 : getCDN();
          if (!((_b2 = settings.cdnSettings) !== null && _b2 !== void 0)) return [3, 1];
          _k = _b2;
          return [3, 3];
        case 1:
          return [4, loadCDNSettings(settings.writeKey, cdnURL)];
        case 2:
          _k = _l.sent();
          _l.label = 3;
        case 3:
          cdnSettings = _k;
          if (options.updateCDNSettings) {
            cdnSettings = options.updateCDNSettings(cdnSettings);
          }
          if (!(typeof options.disable === "function")) return [3, 5];
          return [4, options.disable(cdnSettings)];
        case 4:
          disabled = _l.sent();
          if (disabled) {
            return [2, [new NullAnalytics(), Context.system()]];
          }
          _l.label = 5;
        case 5:
          retryQueue = (_d = (_c2 = cdnSettings.integrations["Segment.io"]) === null || _c2 === void 0 ? void 0 : _c2.retryQueue) !== null && _d !== void 0 ? _d : true;
          options = __assign({ retryQueue }, options);
          analytics = new Analytics(__assign(__assign({}, settings), { cdnSettings, cdnURL }), options);
          attachInspector(analytics);
          plugins = (_e3 = settings.plugins) !== null && _e3 !== void 0 ? _e3 : [];
          classicIntegrations = (_f2 = settings.classicIntegrations) !== null && _f2 !== void 0 ? _f2 : [];
          segmentLoadOptions = (_g = options.integrations) === null || _g === void 0 ? void 0 : _g["Segment.io"];
          Stats.initRemoteMetrics(__assign(__assign({}, cdnSettings.metrics), { host: (_h = segmentLoadOptions === null || segmentLoadOptions === void 0 ? void 0 : segmentLoadOptions.apiHost) !== null && _h !== void 0 ? _h : (_j = cdnSettings.metrics) === null || _j === void 0 ? void 0 : _j.host, protocol: segmentLoadOptions === null || segmentLoadOptions === void 0 ? void 0 : segmentLoadOptions.protocol }));
          return [4, registerPlugins(settings.writeKey, cdnSettings, analytics, options, plugins, classicIntegrations, preInitBuffer)];
        case 6:
          ctx = _l.sent();
          analytics.initialized = true;
          analytics.emit("initialize", settings, options);
          return [4, flushFinalBuffer(analytics, queryString, preInitBuffer)];
        case 7:
          _l.sent();
          return [2, [analytics, ctx]];
      }
    });
  });
}
var AnalyticsBrowser = (
  /** @class */
  function(_super) {
    __extends(AnalyticsBrowser2, _super);
    function AnalyticsBrowser2() {
      var _this = this;
      var _a3 = createDeferred(), loadStart = _a3.promise, resolveLoadStart = _a3.resolve;
      _this = _super.call(this, function(buffer) {
        return loadStart.then(function(_a4) {
          var settings = _a4[0], options = _a4[1];
          return loadAnalytics(settings, options, buffer);
        });
      }) || this;
      _this._resolveLoadStart = function(settings, options) {
        return resolveLoadStart([settings, options]);
      };
      return _this;
    }
    AnalyticsBrowser2.prototype.load = function(settings, options) {
      if (options === void 0) {
        options = {};
      }
      this._resolveLoadStart(settings, options);
      return this;
    };
    AnalyticsBrowser2.load = function(settings, options) {
      if (options === void 0) {
        options = {};
      }
      return new AnalyticsBrowser2().load(settings, options);
    };
    AnalyticsBrowser2.standalone = function(writeKey, options) {
      return AnalyticsBrowser2.load({ writeKey }, options).then(function(res) {
        return res[0];
      });
    };
    return AnalyticsBrowser2;
  }(AnalyticsBuffered)
);

// node_modules/@segment/analytics-next/dist/pkg/node/node.browser.js
var AnalyticsNode = (
  /** @class */
  function() {
    function AnalyticsNode2() {
    }
    AnalyticsNode2.load = function() {
      return Promise.reject(new Error("AnalyticsNode is not available in browsers."));
    };
    return AnalyticsNode2;
  }()
);

// node_modules/@web3auth/no-modal/dist/lib.esm/base/analytics.js
var SEGMENT_WRITE_KEY = "f6LbNqCeVRf512ggdME4b6CyflhF1tsX";
var Analytics2 = class {
  constructor() {
    _defineProperty(this, "segment", void 0);
    _defineProperty(this, "globalProperties", {});
    _defineProperty(this, "enabled", true);
  }
  init() {
    if (this.isSkipped()) {
      return;
    }
    if (this.segment) {
      throw new Error("Analytics already initialized");
    }
    this.segment = new AnalyticsBrowser();
    this.segment.load({
      writeKey: SEGMENT_WRITE_KEY
    }, {
      user: {
        cookie: {
          key: "web3auth_ajs_user_id"
        },
        localStorage: {
          key: "web3auth_ajs_user_traits"
        }
      },
      globalAnalyticsKey: "web3auth_analytics"
    }).then(() => {
      log.debug("Analytics initialized");
      return true;
    }).catch((error) => {
      log.error("Failed to initialize Analytics", error);
    });
  }
  enable() {
    this.enabled = true;
  }
  disable() {
    this.enabled = false;
  }
  setGlobalProperties(properties) {
    this.globalProperties = _objectSpread2(_objectSpread2({}, this.globalProperties), properties);
  }
  async identify(userId, traits) {
    if (!this.enabled) return;
    if (this.isSkipped()) return;
    try {
      return this.getSegment().identify(userId, _objectSpread2({}, traits));
    } catch (error) {
      log.error(`Failed to identify user ${userId} in analytics`, error);
    }
  }
  async track(event, properties) {
    if (!this.enabled) return;
    if (this.isSkipped()) return;
    try {
      return this.getSegment().track(event, _objectSpread2(_objectSpread2({}, properties), this.globalProperties));
    } catch (error) {
      log.error(`Failed to track event ${event}`, error);
    }
  }
  getSegment() {
    if (!this.segment) {
      log.error("Analytics not initialized. Call Analytics.init() first.");
      throw new Error("Analytics not initialized. Call Analytics.init() first.");
    }
    return this.segment;
  }
  isSkipped() {
    const dappOrigin = window.location.origin;
    if (dappOrigin.startsWith("http://")) {
      return true;
    }
    if (dappOrigin.includes("localhost")) {
      return true;
    }
    return false;
  }
};
var ANALYTICS_EVENTS = {
  // SDK Initialization
  SDK_INITIALIZATION_COMPLETED: "SDK Initialization Completed",
  SDK_INITIALIZATION_FAILED: "SDK Initialization Failed",
  // Connection
  CONNECTION_STARTED: "Connection Started",
  CONNECTION_COMPLETED: "Connection Completed",
  CONNECTION_FAILED: "Connection Failed",
  // Identity Token
  IDENTITY_TOKEN_STARTED: "Identity Token Started",
  IDENTITY_TOKEN_COMPLETED: "Identity Token Completed",
  IDENTITY_TOKEN_FAILED: "Identity Token Failed",
  // MFA
  MFA_ENABLEMENT_STARTED: "MFA Enablement Started",
  MFA_ENABLEMENT_COMPLETED: "MFA Enablement Completed",
  MFA_ENABLEMENT_FAILED: "MFA Enablement Failed",
  MFA_MANAGEMENT_SELECTED: "MFA Management Selected",
  MFA_MANAGEMENT_FAILED: "MFA Management Failed",
  // Login Modal
  LOGIN_MODAL_OPENED: "Login Modal Opened",
  LOGIN_MODAL_CLOSED: "Login Modal Closed",
  SOCIAL_LOGIN_SELECTED: "Social Login Selected",
  EXTERNAL_WALLET_SELECTED: "External Wallet Selected",
  EXTERNAL_WALLET_LIST_EXPANDED: "External Wallet List Expanded",
  // Wallet Plugin
  WALLET_UI_CLICKED: "Wallet UI Clicked",
  WALLET_CONNECT_SCANNER_CLICKED: "Wallet Connect Scanner Clicked",
  WALLET_CHECKOUT_CLICKED: "Wallet Checkout Clicked",
  WALLET_SWAP_CLICKED: "Wallet Swap Clicked"
};
var ANALYTICS_INTEGRATION_TYPE = {
  REACT_HOOKS: "React Hooks",
  VUE_COMPOSABLES: "Vue Composables",
  NATIVE_SDK: "Native SDK"
};
var ANALYTICS_SDK_TYPE = {
  WEB_NO_MODAL: "Web NoModal",
  WEB_MODAL: "Web Modal"
};

// node_modules/@web3auth/no-modal/dist/lib.esm/connectors/utils.js
var getSiteName = (window2) => {
  const {
    document: document2
  } = window2;
  const siteName = document2.querySelector('head > meta[property="og:site_name"]');
  if (siteName) {
    return siteName.content;
  }
  const metaTitle = document2.querySelector('head > meta[name="title"]');
  if (metaTitle) {
    return metaTitle.content;
  }
  if (document2.title && document2.title.length > 0) {
    return document2.title;
  }
  return window2.location.hostname;
};
function imgExists(url) {
  return new Promise((resolve, reject) => {
    try {
      const img = document.createElement("img");
      img.onload = () => resolve(true);
      img.onerror = () => resolve(false);
      img.src = url;
    } catch (e) {
      reject(e);
    }
  });
}
async function getSiteIcon(window2) {
  const {
    document: document2
  } = window2;
  let icon = document2.querySelector('head > link[rel="shortcut icon"]');
  if (icon && await imgExists(icon.href)) {
    return icon.href;
  }
  icon = Array.from(document2.querySelectorAll('head > link[rel="icon"]')).find((_icon) => Boolean(_icon.href)) || null;
  if (icon && await imgExists(icon.href)) {
    return icon.href;
  }
  return null;
}
function parseToken(token) {
  const [header, payload] = token.split(".");
  return {
    header: JSON.parse(safeatob(header)),
    payload: JSON.parse(safeatob(payload))
  };
}

// node_modules/@web3auth/no-modal/dist/lib.esm/connectors/wallet-connect-v2-connector/config.js
var DEFAULT_EIP155_METHODS = function(DEFAULT_EIP155_METHODS2) {
  DEFAULT_EIP155_METHODS2["ETH_SEND_TRANSACTION"] = "eth_sendTransaction";
  DEFAULT_EIP155_METHODS2["ETH_SIGN_TRANSACTION"] = "eth_signTransaction";
  DEFAULT_EIP155_METHODS2["ETH_SIGN"] = "eth_sign";
  DEFAULT_EIP155_METHODS2["PERSONAL_SIGN"] = "personal_sign";
  DEFAULT_EIP155_METHODS2["ETH_SIGN_TYPED_DATA"] = "eth_signTypedData";
  DEFAULT_EIP155_METHODS2["ETH_SIGN_TYPED_DATA_V3"] = "eth_signTypedData_v3";
  DEFAULT_EIP155_METHODS2["ETH_SIGN_TYPED_DATA_V4"] = "eth_signTypedData_v4";
  DEFAULT_EIP155_METHODS2["ADD_ETHEREUM_CHAIN"] = "wallet_addEthereumChain";
  DEFAULT_EIP155_METHODS2["SWITCH_ETHEREUM_CHAIN"] = "wallet_switchEthereumChain";
  return DEFAULT_EIP155_METHODS2;
}({});
var DEFAULT_SOLANA_METHODS = function(DEFAULT_SOLANA_METHODS2) {
  DEFAULT_SOLANA_METHODS2["SIGN_TRANSACTION"] = "solana_signTransaction";
  DEFAULT_SOLANA_METHODS2["SIGN_MESSAGE"] = "solana_signMessage";
  return DEFAULT_SOLANA_METHODS2;
}({});
var DEFAULT_EIP_155_EVENTS = function(DEFAULT_EIP_155_EVENTS2) {
  DEFAULT_EIP_155_EVENTS2["ETH_CHAIN_CHANGED"] = "chainChanged";
  DEFAULT_EIP_155_EVENTS2["ETH_ACCOUNTS_CHANGED"] = "accountsChanged";
  return DEFAULT_EIP_155_EVENTS2;
}({});
var DEFAULT_SOLANA_EVENTS = function(DEFAULT_SOLANA_EVENTS2) {
  DEFAULT_SOLANA_EVENTS2["SOL_CHAIN_CHANGED"] = "chainChanged";
  DEFAULT_SOLANA_EVENTS2["SOL_ACCOUNTS_CHANGED"] = "accountsChanged";
  return DEFAULT_SOLANA_EVENTS2;
}({});
var getSiteMetadata = async () => ({
  name: getSiteName(window),
  icon: await getSiteIcon(window)
});
var getNamespacesFromChains = (chains) => {
  const supportedNamespaces = [];
  chains.forEach((chainId) => {
    const [namespace] = chainId.split(":");
    if (!supportedNamespaces.includes(namespace)) {
      supportedNamespaces.push(namespace);
    }
  });
  return supportedNamespaces;
};
var getSupportedMethodsByNamespace = (namespace) => {
  switch (namespace) {
    case CHAIN_NAMESPACES.EIP155:
      return Object.values(DEFAULT_EIP155_METHODS);
    case CHAIN_NAMESPACES.SOLANA:
      return Object.values(DEFAULT_SOLANA_METHODS);
    default:
      throw new Error(`No default methods for namespace: ${namespace}`);
  }
};
var getSupportedEventsByNamespace = (namespace) => {
  switch (namespace) {
    case CHAIN_NAMESPACES.EIP155:
      return Object.values(DEFAULT_EIP_155_EVENTS);
    case CHAIN_NAMESPACES.SOLANA:
      return Object.values(DEFAULT_SOLANA_EVENTS);
    default:
      throw new Error(`No default events for namespace: ${namespace}`);
  }
};
var getRequiredNamespaces = (chains) => {
  const selectedNamespaces = getNamespacesFromChains(chains);
  return Object.fromEntries(selectedNamespaces.map((namespace) => [namespace, {
    methods: getSupportedMethodsByNamespace(namespace),
    chains: chains.filter((chain) => chain.startsWith(namespace)),
    events: getSupportedEventsByNamespace(namespace)
  }]));
};
var getWalletConnectV2Settings = async (chains, projectID) => {
  const appMetadata = await getSiteMetadata();
  const connectorSettings = {
    walletConnectInitOptions: {
      projectId: projectID,
      relayUrl: "wss://relay.walletconnect.com",
      metadata: {
        name: appMetadata.name,
        description: appMetadata.name,
        url: window.location.origin,
        icons: [appMetadata.icon || ""]
      }
    }
  };
  const chainNamespaces = chains.map((chain) => {
    if (chain.chainNamespace === CHAIN_NAMESPACES.SOLANA) {
      return `${chain.chainNamespace}:${SOLANA_CAIP_CHAIN_MAP[chain.chainId]}`;
    } else if (chain.chainNamespace === CHAIN_NAMESPACES.EIP155) {
      return `${chain.chainNamespace}:${parseInt(chain.chainId, 16)}`;
    }
    throw new Error(`Unsupported chain namespace: ${chain.chainNamespace}`);
  });
  const loginSettings = {
    optionalNamespaces: getRequiredNamespaces(chainNamespaces)
  };
  return {
    connectorSettings,
    loginSettings
  };
};

// node_modules/@web3auth/no-modal/dist/lib.esm/providers/ethereum-provider/rpc/walletMidddleware.js
function createWalletMiddleware({
  getAccounts: getAccounts2,
  getPrivateKey,
  getPublicKey,
  processEthSignMessage,
  processPersonalMessage,
  processTransaction,
  processSignTransaction,
  processTypedMessageV4
}) {
  if (!getAccounts2) {
    throw new Error("opts.getAccounts is required");
  }
  async function validateAndNormalizeKeyholder(address, req) {
    if (typeof address === "string" && address.length > 0) {
      const accounts = await getAccounts2(req);
      const normalizedAccounts = accounts.map((_address) => _address.toLowerCase());
      const normalizedAddress = address.toLowerCase();
      if (normalizedAccounts.includes(normalizedAddress)) {
        return normalizedAddress;
      }
    }
    throw rpcErrors.invalidParams({
      message: `Invalid parameters: must provide an Ethereum address.`
    });
  }
  async function lookupAccounts(req, res) {
    res.result = await getAccounts2(req);
  }
  async function sendTransaction(req, res) {
    if (!processTransaction) {
      throw rpcErrors.methodNotSupported();
    }
    const txParams = req.params[0] || {
      from: ""
    };
    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);
    res.result = await processTransaction(txParams, req);
  }
  async function signTransaction(req, res) {
    if (!processSignTransaction) {
      throw rpcErrors.methodNotSupported();
    }
    const txParams = req.params[0] || {
      from: ""
    };
    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);
    res.result = await processSignTransaction(txParams, req);
  }
  async function ethSign(req, res) {
    if (!processEthSignMessage) {
      throw rpcErrors.methodNotSupported();
    }
    let msgParams = req.params;
    const extraParams = req.params[2] || {};
    if (Array.isArray(req.params)) {
      if (!(req.params.length === 2)) throw new Error(`WalletMiddleware - incorrect params for ${req.method} method. expected [address, message]`);
      const params = req.params;
      const address = params[0];
      const message = params[1];
      msgParams = {
        from: address,
        data: message
      };
    }
    msgParams = _objectSpread2(_objectSpread2({}, extraParams), msgParams);
    res.result = await processEthSignMessage(msgParams, req);
  }
  async function signTypedDataV4(req, res) {
    if (!processTypedMessageV4) {
      throw rpcErrors.methodNotSupported();
    }
    if (!(req !== null && req !== void 0 && req.params)) throw new Error("WalletMiddleware - missing params");
    let msgParams = req.params;
    if (Array.isArray(req.params)) {
      if (!(req.params.length === 2)) throw new Error(`WalletMiddleware - incorrect params for ${req.method} method. expected [address, typedData]`);
      const params = req.params;
      const address = params[0];
      const message = params[1];
      msgParams = {
        from: address,
        data: message
      };
    }
    res.result = await processTypedMessageV4(msgParams, req);
  }
  async function personalSign(req, res) {
    if (!processPersonalMessage) {
      throw rpcErrors.methodNotSupported();
    }
    let msgParams = req.params;
    const extraParams = req.params[2] || {};
    if (Array.isArray(req.params)) {
      if (!(req.params.length >= 2)) throw new Error(`WalletMiddleware - incorrect params for ${req.method} method. expected [message, address]`);
      const params = req.params;
      if (typeof params[0] === "object") {
        const {
          challenge,
          address
        } = params[0];
        msgParams = {
          from: address,
          data: challenge
        };
      } else {
        const message = params[0];
        const address = params[1];
        msgParams = {
          from: address,
          data: message
        };
      }
    }
    msgParams = _objectSpread2(_objectSpread2({}, extraParams), msgParams);
    res.result = await processPersonalMessage(msgParams, req);
  }
  async function fetchPrivateKey(req, res) {
    if (!getPrivateKey) {
      throw rpcErrors.methodNotSupported();
    }
    res.result = await getPrivateKey(req);
  }
  async function fetchPublicKey(req, res) {
    if (!getPublicKey) {
      throw rpcErrors.methodNotSupported();
    }
    res.result = await getPublicKey(req);
  }
  return createScaffoldMiddleware({
    // account lookups
    eth_accounts: createAsyncMiddleware(lookupAccounts),
    eth_requestAccounts: createAsyncMiddleware(lookupAccounts),
    eth_private_key: createAsyncMiddleware(fetchPrivateKey),
    eth_public_key: createAsyncMiddleware(fetchPublicKey),
    public_key: createAsyncMiddleware(fetchPublicKey),
    private_key: createAsyncMiddleware(fetchPrivateKey),
    // tx signatures
    eth_sendTransaction: createAsyncMiddleware(sendTransaction),
    eth_signTransaction: createAsyncMiddleware(signTransaction),
    // message signatures
    eth_sign: createAsyncMiddleware(ethSign),
    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),
    personal_sign: createAsyncMiddleware(personalSign)
  });
}

// node_modules/@web3auth/no-modal/dist/lib.esm/providers/ethereum-provider/rpc/ethRpcMiddlewares.js
function createEthMiddleware(providerHandlers) {
  const {
    getAccounts: getAccounts2,
    getPrivateKey,
    getPublicKey,
    processTransaction,
    processSignTransaction,
    processEthSignMessage,
    processTypedMessageV4,
    processPersonalMessage
  } = providerHandlers;
  const ethMiddleware = mergeMiddleware([createScaffoldMiddleware({
    eth_syncing: false
  }), createWalletMiddleware({
    getAccounts: getAccounts2,
    getPrivateKey,
    getPublicKey,
    processTransaction,
    processEthSignMessage,
    processSignTransaction,
    processTypedMessageV4,
    processPersonalMessage
  })]);
  return ethMiddleware;
}
function createEthChainSwitchMiddleware({
  switchChain: switchChain2
}) {
  async function updateChain(req, res) {
    var _req$params;
    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : void 0;
    if (!chainParams) throw rpcErrors.invalidParams("Missing chainId");
    res.result = await switchChain2(chainParams);
  }
  return createScaffoldMiddleware({
    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)
  });
}

// node_modules/@web3auth/no-modal/dist/lib.esm/providers/ethereum-provider/rpc/jrpcClient.js
function createEthChainIdMiddleware(chainId) {
  return (req, res, next, end) => {
    if (req.method === "eth_chainId") {
      res.result = chainId;
      return end();
    }
    return next();
  };
}
function createEthProviderConfigMiddleware(providerConfig) {
  return (req, res, next, end) => {
    if (req.method === "eth_provider_config") {
      res.result = providerConfig;
      return end();
    }
    return next();
  };
}
function createEthJsonRpcClient(providerConfig) {
  const {
    chainId,
    rpcTarget
  } = providerConfig;
  const fetchMiddleware = createFetchMiddleware({
    rpcTarget
  });
  const networkMiddleware = mergeMiddleware([createEthChainIdMiddleware(chainId), createEthProviderConfigMiddleware(providerConfig), fetchMiddleware]);
  return {
    networkMiddleware,
    fetchMiddleware
  };
}

// node_modules/@web3auth/no-modal/node_modules/@walletconnect/utils/dist/index.es.js
var import_time = __toESM(require_cjs2());
var import_window_getters = __toESM(require_cjs3());
var import_window_metadata = __toESM(require_cjs4());

// node_modules/@msgpack/msgpack/dist.esm/utils/utf8.mjs
function utf8Count(str) {
  const strLength = str.length;
  let byteLength = 0;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      byteLength++;
      continue;
    } else if ((value & 4294965248) === 0) {
      byteLength += 2;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        byteLength += 3;
      } else {
        byteLength += 4;
      }
    }
  }
  return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
  const strLength = str.length;
  let offset = outputOffset;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      output[offset++] = value;
      continue;
    } else if ((value & 4294965248) === 0) {
      output[offset++] = value >> 6 & 31 | 192;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        output[offset++] = value >> 12 & 15 | 224;
        output[offset++] = value >> 6 & 63 | 128;
      } else {
        output[offset++] = value >> 18 & 7 | 240;
        output[offset++] = value >> 12 & 63 | 128;
        output[offset++] = value >> 6 & 63 | 128;
      }
    }
    output[offset++] = value & 63 | 128;
  }
}
var sharedTextEncoder = new TextEncoder();
var TEXT_ENCODER_THRESHOLD = 50;
function utf8EncodeTE(str, output, outputOffset) {
  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
function utf8Encode(str, output, outputOffset) {
  if (str.length > TEXT_ENCODER_THRESHOLD) {
    utf8EncodeTE(str, output, outputOffset);
  } else {
    utf8EncodeJs(str, output, outputOffset);
  }
}
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
  let offset = inputOffset;
  const end = offset + byteLength;
  const units = [];
  let result = "";
  while (offset < end) {
    const byte1 = bytes[offset++];
    if ((byte1 & 128) === 0) {
      units.push(byte1);
    } else if ((byte1 & 224) === 192) {
      const byte2 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 6 | byte2);
    } else if ((byte1 & 240) === 224) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
    } else if ((byte1 & 248) === 240) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      const byte4 = bytes[offset++] & 63;
      let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
      if (unit > 65535) {
        unit -= 65536;
        units.push(unit >>> 10 & 1023 | 55296);
        unit = 56320 | unit & 1023;
      }
      units.push(unit);
    } else {
      units.push(byte1);
    }
    if (units.length >= CHUNK_SIZE) {
      result += String.fromCharCode(...units);
      units.length = 0;
    }
  }
  if (units.length > 0) {
    result += String.fromCharCode(...units);
  }
  return result;
}
var sharedTextDecoder = new TextDecoder();
var TEXT_DECODER_THRESHOLD = 200;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
  return sharedTextDecoder.decode(stringBytes);
}
function utf8Decode(bytes, inputOffset, byteLength) {
  if (byteLength > TEXT_DECODER_THRESHOLD) {
    return utf8DecodeTD(bytes, inputOffset, byteLength);
  } else {
    return utf8DecodeJs(bytes, inputOffset, byteLength);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/ExtData.mjs
var ExtData = class {
  constructor(type, data) {
    this.type = type;
    this.data = data;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/DecodeError.mjs
var DecodeError = class _DecodeError extends Error {
  constructor(message) {
    super(message);
    const proto = Object.create(_DecodeError.prototype);
    Object.setPrototypeOf(this, proto);
    Object.defineProperty(this, "name", {
      configurable: true,
      enumerable: false,
      value: _DecodeError.name
    });
  }
};

// node_modules/@msgpack/msgpack/dist.esm/utils/int.mjs
var UINT32_MAX = 4294967295;
function setUint64(view, offset, value) {
  const high = value / 4294967296;
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
  const high = Math.floor(value / 4294967296);
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function getInt64(view, offset) {
  const high = view.getInt32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}
function getUint64(view, offset) {
  const high = view.getUint32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}

// node_modules/@msgpack/msgpack/dist.esm/timestamp.mjs
var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 4294967296 - 1;
var TIMESTAMP64_MAX_SEC = 17179869184 - 1;
function encodeTimeSpecToTimestamp({ sec, nsec }) {
  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
      const rv = new Uint8Array(4);
      const view = new DataView(rv.buffer);
      view.setUint32(0, sec);
      return rv;
    } else {
      const secHigh = sec / 4294967296;
      const secLow = sec & 4294967295;
      const rv = new Uint8Array(8);
      const view = new DataView(rv.buffer);
      view.setUint32(0, nsec << 2 | secHigh & 3);
      view.setUint32(4, secLow);
      return rv;
    }
  } else {
    const rv = new Uint8Array(12);
    const view = new DataView(rv.buffer);
    view.setUint32(0, nsec);
    setInt64(view, 4, sec);
    return rv;
  }
}
function encodeDateToTimeSpec(date) {
  const msec = date.getTime();
  const sec = Math.floor(msec / 1e3);
  const nsec = (msec - sec * 1e3) * 1e6;
  const nsecInSec = Math.floor(nsec / 1e9);
  return {
    sec: sec + nsecInSec,
    nsec: nsec - nsecInSec * 1e9
  };
}
function encodeTimestampExtension(object) {
  if (object instanceof Date) {
    const timeSpec = encodeDateToTimeSpec(object);
    return encodeTimeSpecToTimestamp(timeSpec);
  } else {
    return null;
  }
}
function decodeTimestampToTimeSpec(data) {
  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);
  switch (data.byteLength) {
    case 4: {
      const sec = view.getUint32(0);
      const nsec = 0;
      return { sec, nsec };
    }
    case 8: {
      const nsec30AndSecHigh2 = view.getUint32(0);
      const secLow32 = view.getUint32(4);
      const sec = (nsec30AndSecHigh2 & 3) * 4294967296 + secLow32;
      const nsec = nsec30AndSecHigh2 >>> 2;
      return { sec, nsec };
    }
    case 12: {
      const sec = getInt64(view, 4);
      const nsec = view.getUint32(0);
      return { sec, nsec };
    }
    default:
      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);
  }
}
function decodeTimestampExtension(data) {
  const timeSpec = decodeTimestampToTimeSpec(data);
  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
  type: EXT_TIMESTAMP,
  encode: encodeTimestampExtension,
  decode: decodeTimestampExtension
};

// node_modules/@msgpack/msgpack/dist.esm/ExtensionCodec.mjs
var ExtensionCodec = class {
  constructor() {
    this.builtInEncoders = [];
    this.builtInDecoders = [];
    this.encoders = [];
    this.decoders = [];
    this.register(timestampExtension);
  }
  register({ type, encode: encode2, decode: decode2 }) {
    if (type >= 0) {
      this.encoders[type] = encode2;
      this.decoders[type] = decode2;
    } else {
      const index = -1 - type;
      this.builtInEncoders[index] = encode2;
      this.builtInDecoders[index] = decode2;
    }
  }
  tryToEncode(object, context) {
    for (let i3 = 0; i3 < this.builtInEncoders.length; i3++) {
      const encodeExt = this.builtInEncoders[i3];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = -1 - i3;
          return new ExtData(type, data);
        }
      }
    }
    for (let i3 = 0; i3 < this.encoders.length; i3++) {
      const encodeExt = this.encoders[i3];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = i3;
          return new ExtData(type, data);
        }
      }
    }
    if (object instanceof ExtData) {
      return object;
    }
    return null;
  }
  decode(data, type, context) {
    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
    if (decodeExt) {
      return decodeExt(data, type, context);
    } else {
      return new ExtData(type, data);
    }
  }
};
ExtensionCodec.defaultCodec = new ExtensionCodec();

// node_modules/@msgpack/msgpack/dist.esm/utils/typedArrays.mjs
function isArrayBufferLike(buffer) {
  return buffer instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && buffer instanceof SharedArrayBuffer;
}
function ensureUint8Array(buffer) {
  if (buffer instanceof Uint8Array) {
    return buffer;
  } else if (ArrayBuffer.isView(buffer)) {
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  } else if (isArrayBufferLike(buffer)) {
    return new Uint8Array(buffer);
  } else {
    return Uint8Array.from(buffer);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/Encoder.mjs
var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = class _Encoder {
  constructor(options) {
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.maxDepth = (options == null ? void 0 : options.maxDepth) ?? DEFAULT_MAX_DEPTH;
    this.initialBufferSize = (options == null ? void 0 : options.initialBufferSize) ?? DEFAULT_INITIAL_BUFFER_SIZE;
    this.sortKeys = (options == null ? void 0 : options.sortKeys) ?? false;
    this.forceFloat32 = (options == null ? void 0 : options.forceFloat32) ?? false;
    this.ignoreUndefined = (options == null ? void 0 : options.ignoreUndefined) ?? false;
    this.forceIntegerToFloat = (options == null ? void 0 : options.forceIntegerToFloat) ?? false;
    this.pos = 0;
    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
    this.bytes = new Uint8Array(this.view.buffer);
  }
  clone() {
    return new _Encoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      maxDepth: this.maxDepth,
      initialBufferSize: this.initialBufferSize,
      sortKeys: this.sortKeys,
      forceFloat32: this.forceFloat32,
      ignoreUndefined: this.ignoreUndefined,
      forceIntegerToFloat: this.forceIntegerToFloat
    });
  }
  reinitializeState() {
    this.pos = 0;
  }
  /**
   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.
   *
   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.
   */
  encodeSharedRef(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encodeSharedRef(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.subarray(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  /**
   * @returns Encodes the object and returns a copy of the encoder's internal buffer.
   */
  encode(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encode(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.slice(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  doEncode(object, depth) {
    if (depth > this.maxDepth) {
      throw new Error(`Too deep objects in depth ${depth}`);
    }
    if (object == null) {
      this.encodeNil();
    } else if (typeof object === "boolean") {
      this.encodeBoolean(object);
    } else if (typeof object === "number") {
      if (!this.forceIntegerToFloat) {
        this.encodeNumber(object);
      } else {
        this.encodeNumberAsFloat(object);
      }
    } else if (typeof object === "string") {
      this.encodeString(object);
    } else if (this.useBigInt64 && typeof object === "bigint") {
      this.encodeBigInt64(object);
    } else {
      this.encodeObject(object, depth);
    }
  }
  ensureBufferSizeToWrite(sizeToWrite) {
    const requiredSize = this.pos + sizeToWrite;
    if (this.view.byteLength < requiredSize) {
      this.resizeBuffer(requiredSize * 2);
    }
  }
  resizeBuffer(newSize) {
    const newBuffer = new ArrayBuffer(newSize);
    const newBytes = new Uint8Array(newBuffer);
    const newView = new DataView(newBuffer);
    newBytes.set(this.bytes);
    this.view = newView;
    this.bytes = newBytes;
  }
  encodeNil() {
    this.writeU8(192);
  }
  encodeBoolean(object) {
    if (object === false) {
      this.writeU8(194);
    } else {
      this.writeU8(195);
    }
  }
  encodeNumber(object) {
    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {
      if (object >= 0) {
        if (object < 128) {
          this.writeU8(object);
        } else if (object < 256) {
          this.writeU8(204);
          this.writeU8(object);
        } else if (object < 65536) {
          this.writeU8(205);
          this.writeU16(object);
        } else if (object < 4294967296) {
          this.writeU8(206);
          this.writeU32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(207);
          this.writeU64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      } else {
        if (object >= -32) {
          this.writeU8(224 | object + 32);
        } else if (object >= -128) {
          this.writeU8(208);
          this.writeI8(object);
        } else if (object >= -32768) {
          this.writeU8(209);
          this.writeI16(object);
        } else if (object >= -2147483648) {
          this.writeU8(210);
          this.writeI32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(211);
          this.writeI64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      }
    } else {
      this.encodeNumberAsFloat(object);
    }
  }
  encodeNumberAsFloat(object) {
    if (this.forceFloat32) {
      this.writeU8(202);
      this.writeF32(object);
    } else {
      this.writeU8(203);
      this.writeF64(object);
    }
  }
  encodeBigInt64(object) {
    if (object >= BigInt(0)) {
      this.writeU8(207);
      this.writeBigUint64(object);
    } else {
      this.writeU8(211);
      this.writeBigInt64(object);
    }
  }
  writeStringHeader(byteLength) {
    if (byteLength < 32) {
      this.writeU8(160 + byteLength);
    } else if (byteLength < 256) {
      this.writeU8(217);
      this.writeU8(byteLength);
    } else if (byteLength < 65536) {
      this.writeU8(218);
      this.writeU16(byteLength);
    } else if (byteLength < 4294967296) {
      this.writeU8(219);
      this.writeU32(byteLength);
    } else {
      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);
    }
  }
  encodeString(object) {
    const maxHeaderSize = 1 + 4;
    const byteLength = utf8Count(object);
    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
    this.writeStringHeader(byteLength);
    utf8Encode(object, this.bytes, this.pos);
    this.pos += byteLength;
  }
  encodeObject(object, depth) {
    const ext = this.extensionCodec.tryToEncode(object, this.context);
    if (ext != null) {
      this.encodeExtension(ext);
    } else if (Array.isArray(object)) {
      this.encodeArray(object, depth);
    } else if (ArrayBuffer.isView(object)) {
      this.encodeBinary(object);
    } else if (typeof object === "object") {
      this.encodeMap(object, depth);
    } else {
      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);
    }
  }
  encodeBinary(object) {
    const size = object.byteLength;
    if (size < 256) {
      this.writeU8(196);
      this.writeU8(size);
    } else if (size < 65536) {
      this.writeU8(197);
      this.writeU16(size);
    } else if (size < 4294967296) {
      this.writeU8(198);
      this.writeU32(size);
    } else {
      throw new Error(`Too large binary: ${size}`);
    }
    const bytes = ensureUint8Array(object);
    this.writeU8a(bytes);
  }
  encodeArray(object, depth) {
    const size = object.length;
    if (size < 16) {
      this.writeU8(144 + size);
    } else if (size < 65536) {
      this.writeU8(220);
      this.writeU16(size);
    } else if (size < 4294967296) {
      this.writeU8(221);
      this.writeU32(size);
    } else {
      throw new Error(`Too large array: ${size}`);
    }
    for (const item of object) {
      this.doEncode(item, depth + 1);
    }
  }
  countWithoutUndefined(object, keys2) {
    let count = 0;
    for (const key of keys2) {
      if (object[key] !== void 0) {
        count++;
      }
    }
    return count;
  }
  encodeMap(object, depth) {
    const keys2 = Object.keys(object);
    if (this.sortKeys) {
      keys2.sort();
    }
    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys2) : keys2.length;
    if (size < 16) {
      this.writeU8(128 + size);
    } else if (size < 65536) {
      this.writeU8(222);
      this.writeU16(size);
    } else if (size < 4294967296) {
      this.writeU8(223);
      this.writeU32(size);
    } else {
      throw new Error(`Too large map object: ${size}`);
    }
    for (const key of keys2) {
      const value = object[key];
      if (!(this.ignoreUndefined && value === void 0)) {
        this.encodeString(key);
        this.doEncode(value, depth + 1);
      }
    }
  }
  encodeExtension(ext) {
    if (typeof ext.data === "function") {
      const data = ext.data(this.pos + 6);
      const size2 = data.length;
      if (size2 >= 4294967296) {
        throw new Error(`Too large extension object: ${size2}`);
      }
      this.writeU8(201);
      this.writeU32(size2);
      this.writeI8(ext.type);
      this.writeU8a(data);
      return;
    }
    const size = ext.data.length;
    if (size === 1) {
      this.writeU8(212);
    } else if (size === 2) {
      this.writeU8(213);
    } else if (size === 4) {
      this.writeU8(214);
    } else if (size === 8) {
      this.writeU8(215);
    } else if (size === 16) {
      this.writeU8(216);
    } else if (size < 256) {
      this.writeU8(199);
      this.writeU8(size);
    } else if (size < 65536) {
      this.writeU8(200);
      this.writeU16(size);
    } else if (size < 4294967296) {
      this.writeU8(201);
      this.writeU32(size);
    } else {
      throw new Error(`Too large extension object: ${size}`);
    }
    this.writeI8(ext.type);
    this.writeU8a(ext.data);
  }
  writeU8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setUint8(this.pos, value);
    this.pos++;
  }
  writeU8a(values) {
    const size = values.length;
    this.ensureBufferSizeToWrite(size);
    this.bytes.set(values, this.pos);
    this.pos += size;
  }
  writeI8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setInt8(this.pos, value);
    this.pos++;
  }
  writeU16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setUint16(this.pos, value);
    this.pos += 2;
  }
  writeI16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setInt16(this.pos, value);
    this.pos += 2;
  }
  writeU32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setUint32(this.pos, value);
    this.pos += 4;
  }
  writeI32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setInt32(this.pos, value);
    this.pos += 4;
  }
  writeF32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setFloat32(this.pos, value);
    this.pos += 4;
  }
  writeF64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setFloat64(this.pos, value);
    this.pos += 8;
  }
  writeU64(value) {
    this.ensureBufferSizeToWrite(8);
    setUint64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeI64(value) {
    this.ensureBufferSizeToWrite(8);
    setInt64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeBigUint64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigUint64(this.pos, value);
    this.pos += 8;
  }
  writeBigInt64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigInt64(this.pos, value);
    this.pos += 8;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/encode.mjs
function encode(value, options) {
  const encoder = new Encoder(options);
  return encoder.encodeSharedRef(value);
}

// node_modules/@msgpack/msgpack/dist.esm/utils/prettyByte.mjs
function prettyByte(byte) {
  return `${byte < 0 ? "-" : ""}0x${Math.abs(byte).toString(16).padStart(2, "0")}`;
}

// node_modules/@msgpack/msgpack/dist.esm/CachedKeyDecoder.mjs
var DEFAULT_MAX_KEY_LENGTH = 16;
var DEFAULT_MAX_LENGTH_PER_KEY = 16;
var CachedKeyDecoder = class {
  constructor(maxKeyLength = DEFAULT_MAX_KEY_LENGTH, maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {
    this.hit = 0;
    this.miss = 0;
    this.maxKeyLength = maxKeyLength;
    this.maxLengthPerKey = maxLengthPerKey;
    this.caches = [];
    for (let i3 = 0; i3 < this.maxKeyLength; i3++) {
      this.caches.push([]);
    }
  }
  canBeCached(byteLength) {
    return byteLength > 0 && byteLength <= this.maxKeyLength;
  }
  find(bytes, inputOffset, byteLength) {
    const records = this.caches[byteLength - 1];
    FIND_CHUNK: for (const record of records) {
      const recordBytes = record.bytes;
      for (let j2 = 0; j2 < byteLength; j2++) {
        if (recordBytes[j2] !== bytes[inputOffset + j2]) {
          continue FIND_CHUNK;
        }
      }
      return record.str;
    }
    return null;
  }
  store(bytes, value) {
    const records = this.caches[bytes.length - 1];
    const record = { bytes, str: value };
    if (records.length >= this.maxLengthPerKey) {
      records[Math.random() * records.length | 0] = record;
    } else {
      records.push(record);
    }
  }
  decode(bytes, inputOffset, byteLength) {
    const cachedValue = this.find(bytes, inputOffset, byteLength);
    if (cachedValue != null) {
      this.hit++;
      return cachedValue;
    }
    this.miss++;
    const str = utf8DecodeJs(bytes, inputOffset, byteLength);
    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
    this.store(slicedCopyOfBytes, str);
    return str;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/Decoder.mjs
var STATE_ARRAY = "array";
var STATE_MAP_KEY = "map_key";
var STATE_MAP_VALUE = "map_value";
var mapKeyConverter = (key) => {
  if (typeof key === "string" || typeof key === "number") {
    return key;
  }
  throw new DecodeError("The type of key must be string or number but " + typeof key);
};
var StackPool = class {
  constructor() {
    this.stack = [];
    this.stackHeadPosition = -1;
  }
  get length() {
    return this.stackHeadPosition + 1;
  }
  top() {
    return this.stack[this.stackHeadPosition];
  }
  pushArrayState(size) {
    const state = this.getUninitializedStateFromPool();
    state.type = STATE_ARRAY;
    state.position = 0;
    state.size = size;
    state.array = new Array(size);
  }
  pushMapState(size) {
    const state = this.getUninitializedStateFromPool();
    state.type = STATE_MAP_KEY;
    state.readCount = 0;
    state.size = size;
    state.map = {};
  }
  getUninitializedStateFromPool() {
    this.stackHeadPosition++;
    if (this.stackHeadPosition === this.stack.length) {
      const partialState = {
        type: void 0,
        size: 0,
        array: void 0,
        position: 0,
        readCount: 0,
        map: void 0,
        key: null
      };
      this.stack.push(partialState);
    }
    return this.stack[this.stackHeadPosition];
  }
  release(state) {
    const topStackState = this.stack[this.stackHeadPosition];
    if (topStackState !== state) {
      throw new Error("Invalid stack state. Released state is not on top of the stack.");
    }
    if (state.type === STATE_ARRAY) {
      const partialState = state;
      partialState.size = 0;
      partialState.array = void 0;
      partialState.position = 0;
      partialState.type = void 0;
    }
    if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {
      const partialState = state;
      partialState.size = 0;
      partialState.map = void 0;
      partialState.readCount = 0;
      partialState.type = void 0;
    }
    this.stackHeadPosition--;
  }
  reset() {
    this.stack.length = 0;
    this.stackHeadPosition = -1;
  }
};
var HEAD_BYTE_REQUIRED = -1;
var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
try {
  EMPTY_VIEW.getInt8(0);
} catch (e) {
  if (!(e instanceof RangeError)) {
    throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access");
  }
}
var MORE_DATA = new RangeError("Insufficient data");
var sharedCachedKeyDecoder = new CachedKeyDecoder();
var Decoder = class _Decoder {
  constructor(options) {
    this.totalPos = 0;
    this.pos = 0;
    this.view = EMPTY_VIEW;
    this.bytes = EMPTY_BYTES;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack = new StackPool();
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.rawStrings = (options == null ? void 0 : options.rawStrings) ?? false;
    this.maxStrLength = (options == null ? void 0 : options.maxStrLength) ?? UINT32_MAX;
    this.maxBinLength = (options == null ? void 0 : options.maxBinLength) ?? UINT32_MAX;
    this.maxArrayLength = (options == null ? void 0 : options.maxArrayLength) ?? UINT32_MAX;
    this.maxMapLength = (options == null ? void 0 : options.maxMapLength) ?? UINT32_MAX;
    this.maxExtLength = (options == null ? void 0 : options.maxExtLength) ?? UINT32_MAX;
    this.keyDecoder = (options == null ? void 0 : options.keyDecoder) !== void 0 ? options.keyDecoder : sharedCachedKeyDecoder;
    this.mapKeyConverter = (options == null ? void 0 : options.mapKeyConverter) ?? mapKeyConverter;
  }
  clone() {
    return new _Decoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      rawStrings: this.rawStrings,
      maxStrLength: this.maxStrLength,
      maxBinLength: this.maxBinLength,
      maxArrayLength: this.maxArrayLength,
      maxMapLength: this.maxMapLength,
      maxExtLength: this.maxExtLength,
      keyDecoder: this.keyDecoder
    });
  }
  reinitializeState() {
    this.totalPos = 0;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack.reset();
  }
  setBuffer(buffer) {
    const bytes = ensureUint8Array(buffer);
    this.bytes = bytes;
    this.view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    this.pos = 0;
  }
  appendBuffer(buffer) {
    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
      this.setBuffer(buffer);
    } else {
      const remainingData = this.bytes.subarray(this.pos);
      const newData = ensureUint8Array(buffer);
      const newBuffer = new Uint8Array(remainingData.length + newData.length);
      newBuffer.set(remainingData);
      newBuffer.set(newData, remainingData.length);
      this.setBuffer(newBuffer);
    }
  }
  hasRemaining(size) {
    return this.view.byteLength - this.pos >= size;
  }
  createExtraByteError(posToShow) {
    const { view, pos } = this;
    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);
  }
  /**
   * @throws {@link DecodeError}
   * @throws {@link RangeError}
   */
  decode(buffer) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decode(buffer);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      const object = this.doDecodeSync();
      if (this.hasRemaining(1)) {
        throw this.createExtraByteError(this.pos);
      }
      return object;
    } finally {
      this.entered = false;
    }
  }
  *decodeMulti(buffer) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMulti(buffer);
      return;
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      while (this.hasRemaining(1)) {
        yield this.doDecodeSync();
      }
    } finally {
      this.entered = false;
    }
  }
  async decodeAsync(stream) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decodeAsync(stream);
    }
    try {
      this.entered = true;
      let decoded = false;
      let object;
      for await (const buffer of stream) {
        if (decoded) {
          this.entered = false;
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        try {
          object = this.doDecodeSync();
          decoded = true;
        } catch (e) {
          if (!(e instanceof RangeError)) {
            throw e;
          }
        }
        this.totalPos += this.pos;
      }
      if (decoded) {
        if (this.hasRemaining(1)) {
          throw this.createExtraByteError(this.totalPos);
        }
        return object;
      }
      const { headByte, pos, totalPos } = this;
      throw new RangeError(`Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`);
    } finally {
      this.entered = false;
    }
  }
  decodeArrayStream(stream) {
    return this.decodeMultiAsync(stream, true);
  }
  decodeStream(stream) {
    return this.decodeMultiAsync(stream, false);
  }
  async *decodeMultiAsync(stream, isArray) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMultiAsync(stream, isArray);
      return;
    }
    try {
      this.entered = true;
      let isArrayHeaderRequired = isArray;
      let arrayItemsLeft = -1;
      for await (const buffer of stream) {
        if (isArray && arrayItemsLeft === 0) {
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        if (isArrayHeaderRequired) {
          arrayItemsLeft = this.readArraySize();
          isArrayHeaderRequired = false;
          this.complete();
        }
        try {
          while (true) {
            yield this.doDecodeSync();
            if (--arrayItemsLeft === 0) {
              break;
            }
          }
        } catch (e) {
          if (!(e instanceof RangeError)) {
            throw e;
          }
        }
        this.totalPos += this.pos;
      }
    } finally {
      this.entered = false;
    }
  }
  doDecodeSync() {
    DECODE: while (true) {
      const headByte = this.readHeadByte();
      let object;
      if (headByte >= 224) {
        object = headByte - 256;
      } else if (headByte < 192) {
        if (headByte < 128) {
          object = headByte;
        } else if (headByte < 144) {
          const size = headByte - 128;
          if (size !== 0) {
            this.pushMapState(size);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte < 160) {
          const size = headByte - 144;
          if (size !== 0) {
            this.pushArrayState(size);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else {
          const byteLength = headByte - 160;
          object = this.decodeString(byteLength, 0);
        }
      } else if (headByte === 192) {
        object = null;
      } else if (headByte === 194) {
        object = false;
      } else if (headByte === 195) {
        object = true;
      } else if (headByte === 202) {
        object = this.readF32();
      } else if (headByte === 203) {
        object = this.readF64();
      } else if (headByte === 204) {
        object = this.readU8();
      } else if (headByte === 205) {
        object = this.readU16();
      } else if (headByte === 206) {
        object = this.readU32();
      } else if (headByte === 207) {
        if (this.useBigInt64) {
          object = this.readU64AsBigInt();
        } else {
          object = this.readU64();
        }
      } else if (headByte === 208) {
        object = this.readI8();
      } else if (headByte === 209) {
        object = this.readI16();
      } else if (headByte === 210) {
        object = this.readI32();
      } else if (headByte === 211) {
        if (this.useBigInt64) {
          object = this.readI64AsBigInt();
        } else {
          object = this.readI64();
        }
      } else if (headByte === 217) {
        const byteLength = this.lookU8();
        object = this.decodeString(byteLength, 1);
      } else if (headByte === 218) {
        const byteLength = this.lookU16();
        object = this.decodeString(byteLength, 2);
      } else if (headByte === 219) {
        const byteLength = this.lookU32();
        object = this.decodeString(byteLength, 4);
      } else if (headByte === 220) {
        const size = this.readU16();
        if (size !== 0) {
          this.pushArrayState(size);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 221) {
        const size = this.readU32();
        if (size !== 0) {
          this.pushArrayState(size);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 222) {
        const size = this.readU16();
        if (size !== 0) {
          this.pushMapState(size);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 223) {
        const size = this.readU32();
        if (size !== 0) {
          this.pushMapState(size);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 196) {
        const size = this.lookU8();
        object = this.decodeBinary(size, 1);
      } else if (headByte === 197) {
        const size = this.lookU16();
        object = this.decodeBinary(size, 2);
      } else if (headByte === 198) {
        const size = this.lookU32();
        object = this.decodeBinary(size, 4);
      } else if (headByte === 212) {
        object = this.decodeExtension(1, 0);
      } else if (headByte === 213) {
        object = this.decodeExtension(2, 0);
      } else if (headByte === 214) {
        object = this.decodeExtension(4, 0);
      } else if (headByte === 215) {
        object = this.decodeExtension(8, 0);
      } else if (headByte === 216) {
        object = this.decodeExtension(16, 0);
      } else if (headByte === 199) {
        const size = this.lookU8();
        object = this.decodeExtension(size, 1);
      } else if (headByte === 200) {
        const size = this.lookU16();
        object = this.decodeExtension(size, 2);
      } else if (headByte === 201) {
        const size = this.lookU32();
        object = this.decodeExtension(size, 4);
      } else {
        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);
      }
      this.complete();
      const stack = this.stack;
      while (stack.length > 0) {
        const state = stack.top();
        if (state.type === STATE_ARRAY) {
          state.array[state.position] = object;
          state.position++;
          if (state.position === state.size) {
            object = state.array;
            stack.release(state);
          } else {
            continue DECODE;
          }
        } else if (state.type === STATE_MAP_KEY) {
          if (object === "__proto__") {
            throw new DecodeError("The key __proto__ is not allowed");
          }
          state.key = this.mapKeyConverter(object);
          state.type = STATE_MAP_VALUE;
          continue DECODE;
        } else {
          state.map[state.key] = object;
          state.readCount++;
          if (state.readCount === state.size) {
            object = state.map;
            stack.release(state);
          } else {
            state.key = null;
            state.type = STATE_MAP_KEY;
            continue DECODE;
          }
        }
      }
      return object;
    }
  }
  readHeadByte() {
    if (this.headByte === HEAD_BYTE_REQUIRED) {
      this.headByte = this.readU8();
    }
    return this.headByte;
  }
  complete() {
    this.headByte = HEAD_BYTE_REQUIRED;
  }
  readArraySize() {
    const headByte = this.readHeadByte();
    switch (headByte) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default: {
        if (headByte < 160) {
          return headByte - 144;
        } else {
          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);
        }
      }
    }
  }
  pushMapState(size) {
    if (size > this.maxMapLength) {
      throw new DecodeError(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);
    }
    this.stack.pushMapState(size);
  }
  pushArrayState(size) {
    if (size > this.maxArrayLength) {
      throw new DecodeError(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);
    }
    this.stack.pushArrayState(size);
  }
  decodeString(byteLength, headerOffset) {
    if (!this.rawStrings || this.stateIsMapKey()) {
      return this.decodeUtf8String(byteLength, headerOffset);
    }
    return this.decodeBinary(byteLength, headerOffset);
  }
  /**
   * @throws {@link RangeError}
   */
  decodeUtf8String(byteLength, headerOffset) {
    var _a3;
    if (byteLength > this.maxStrLength) {
      throw new DecodeError(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);
    }
    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
      throw MORE_DATA;
    }
    const offset = this.pos + headerOffset;
    let object;
    if (this.stateIsMapKey() && ((_a3 = this.keyDecoder) == null ? void 0 : _a3.canBeCached(byteLength))) {
      object = this.keyDecoder.decode(this.bytes, offset, byteLength);
    } else {
      object = utf8Decode(this.bytes, offset, byteLength);
    }
    this.pos += headerOffset + byteLength;
    return object;
  }
  stateIsMapKey() {
    if (this.stack.length > 0) {
      const state = this.stack.top();
      return state.type === STATE_MAP_KEY;
    }
    return false;
  }
  /**
   * @throws {@link RangeError}
   */
  decodeBinary(byteLength, headOffset) {
    if (byteLength > this.maxBinLength) {
      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);
    }
    if (!this.hasRemaining(byteLength + headOffset)) {
      throw MORE_DATA;
    }
    const offset = this.pos + headOffset;
    const object = this.bytes.subarray(offset, offset + byteLength);
    this.pos += headOffset + byteLength;
    return object;
  }
  decodeExtension(size, headOffset) {
    if (size > this.maxExtLength) {
      throw new DecodeError(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);
    }
    const extType = this.view.getInt8(this.pos + headOffset);
    const data = this.decodeBinary(
      size,
      headOffset + 1
      /* extType */
    );
    return this.extensionCodec.decode(data, extType, this.context);
  }
  lookU8() {
    return this.view.getUint8(this.pos);
  }
  lookU16() {
    return this.view.getUint16(this.pos);
  }
  lookU32() {
    return this.view.getUint32(this.pos);
  }
  readU8() {
    const value = this.view.getUint8(this.pos);
    this.pos++;
    return value;
  }
  readI8() {
    const value = this.view.getInt8(this.pos);
    this.pos++;
    return value;
  }
  readU16() {
    const value = this.view.getUint16(this.pos);
    this.pos += 2;
    return value;
  }
  readI16() {
    const value = this.view.getInt16(this.pos);
    this.pos += 2;
    return value;
  }
  readU32() {
    const value = this.view.getUint32(this.pos);
    this.pos += 4;
    return value;
  }
  readI32() {
    const value = this.view.getInt32(this.pos);
    this.pos += 4;
    return value;
  }
  readU64() {
    const value = getUint64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readI64() {
    const value = getInt64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readU64AsBigInt() {
    const value = this.view.getBigUint64(this.pos);
    this.pos += 8;
    return value;
  }
  readI64AsBigInt() {
    const value = this.view.getBigInt64(this.pos);
    this.pos += 8;
    return value;
  }
  readF32() {
    const value = this.view.getFloat32(this.pos);
    this.pos += 4;
    return value;
  }
  readF64() {
    const value = this.view.getFloat64(this.pos);
    this.pos += 8;
    return value;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/decode.mjs
function decode(buffer, options) {
  const decoder = new Decoder(options);
  return decoder.decode(buffer);
}

// node_modules/@web3auth/no-modal/node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}

// node_modules/@web3auth/no-modal/node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size));
  }
  return new Uint8Array(size);
}

// node_modules/@web3auth/no-modal/node_modules/uint8arrays/esm/src/concat.js
function concat(arrays, length) {
  if (!length) {
    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}

// node_modules/@web3auth/no-modal/node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name, prefix, encode2, decode2) {
  return {
    name,
    prefix,
    encoder: {
      name,
      prefix,
      encode: encode2
    },
    decoder: { decode: decode2 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder = new TextDecoder("utf8");
  return "u" + decoder.decode(buf);
}, (str) => {
  const encoder = new TextEncoder();
  return encoder.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i3 = 0; i3 < buf.length; i3++) {
    string2 += String.fromCharCode(buf[i3]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i3 = 0; i3 < str.length; i3++) {
    buf[i3] = str.charCodeAt(i3);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// node_modules/@web3auth/no-modal/node_modules/uint8arrays/esm/src/from-string.js
function fromString(string2, encoding = "utf8") {
  const base = bases_default[encoding];
  if (!base) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string2, "utf-8"));
  }
  return base.decoder.decode(`${base.prefix}${string2}`);
}

// node_modules/@web3auth/no-modal/node_modules/uint8arrays/esm/src/to-string.js
function toString(array, encoding = "utf8") {
  const base = bases_default[encoding];
  if (!base) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base.encoder.encode(array).substring(1);
}

// node_modules/@web3auth/no-modal/node_modules/@walletconnect/utils/dist/index.es.js
var import_blakejs = __toESM(require_blakejs());
var xe = ":";
function Fe(t) {
  const [e, n2] = t.split(xe);
  return { namespace: e, reference: n2 };
}
function ze(t) {
  const [e, n2, r2] = t.split(xe);
  return { namespace: e, reference: n2, address: r2 };
}
function _s(t, e = []) {
  const n2 = [];
  return Object.keys(t).forEach((r2) => {
    if (e.length && !e.includes(r2)) return;
    const o2 = t[r2];
    n2.push(...o2.accounts);
  }), n2;
}
function ve(t, e) {
  return t.includes(":") ? [t] : e.chains || [];
}
var $s = Object.defineProperty;
var Cs = Object.defineProperties;
var Ls = Object.getOwnPropertyDescriptors;
var Jn = Object.getOwnPropertySymbols;
var js = Object.prototype.hasOwnProperty;
var ks = Object.prototype.propertyIsEnumerable;
var Ze = (t, e, n2) => e in t ? $s(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var Qn = (t, e) => {
  for (var n2 in e || (e = {})) js.call(e, n2) && Ze(t, n2, e[n2]);
  if (Jn) for (var n2 of Jn(e)) ks.call(e, n2) && Ze(t, n2, e[n2]);
  return t;
};
var Ps = (t, e) => Cs(t, Ls(e));
var tr = (t, e, n2) => Ze(t, typeof e != "symbol" ? e + "" : e, n2);
var er = "ReactNative";
var J = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var rr = "js";
function Ye() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function Bt() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === er;
}
function Ms() {
  return Bt() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function Vs() {
  return Bt() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function zt() {
  return !Ye() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function Pt() {
  return Bt() ? J.reactNative : Ye() ? J.node : zt() ? J.browser : J.unknown;
}
function qs() {
  var t;
  try {
    return Bt() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t = global.Application) == null ? void 0 : t.applicationId : void 0;
  } catch {
    return;
  }
}
function or(t, e) {
  const n2 = new URLSearchParams(t);
  for (const r2 of Object.keys(e).sort()) if (e.hasOwnProperty(r2)) {
    const o2 = e[r2];
    o2 !== void 0 && n2.set(r2, o2);
  }
  return n2.toString();
}
function Ks(t) {
  var e, n2;
  const r2 = sr();
  try {
    return t != null && t.url && r2.url && new URL(t.url).host !== new URL(r2.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t.url} differs from the actual page url:${r2.url}. This is probably unintended and can lead to issues.`), t.url = r2.url), (e = t == null ? void 0 : t.icons) != null && e.length && t.icons.length > 0 && (t.icons = t.icons.filter((o2) => o2 !== "")), Ps(Qn(Qn({}, r2), t), { url: (t == null ? void 0 : t.url) || r2.url, name: (t == null ? void 0 : t.name) || r2.name, description: (t == null ? void 0 : t.description) || r2.description, icons: (n2 = t == null ? void 0 : t.icons) != null && n2.length && t.icons.length > 0 ? t.icons : r2.icons });
  } catch (o2) {
    return console.warn("Error populating app metadata", o2), t || r2;
  }
}
function sr() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function ir() {
  if (Pt() === J.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n2, Version: r2 } = global.Platform;
    return [n2, r2].join("-");
  }
  const t = detect();
  if (t === null) return "unknown";
  const e = t.os ? t.os.replace(" ", "").toLowerCase() : "unknown";
  return t.type === "browser" ? [e, t.name, t.version].join("-") : [e, t.version].join("-");
}
function fr() {
  var t;
  const e = Pt();
  return e === J.browser ? [e, ((t = (0, import_window_getters.getLocation)()) == null ? void 0 : t.host) || "unknown"].join(":") : e;
}
function cr(t, e, n2) {
  const r2 = ir(), o2 = fr();
  return [[t, e].join("-"), [rr, n2].join("-"), r2, o2].join("/");
}
function zs({ protocol: t, version: e, relayUrl: n2, sdkVersion: r2, auth: o2, projectId: s, useOnCloseEvent: i3, bundleId: f5, packageName: a2 }) {
  const l3 = n2.split("?"), c4 = cr(t, e, r2), u2 = { auth: o2, ua: c4, projectId: s, useOnCloseEvent: i3 || void 0, packageName: a2 || void 0, bundleId: f5 || void 0 }, h3 = or(l3[1] || "", u2);
  return l3[0] + "?" + h3;
}
function It(t, e) {
  return t.filter((n2) => e.includes(n2)).length === t.length;
}
function Ys(t) {
  return Object.fromEntries(t.entries());
}
function Xs(t) {
  return new Map(Object.entries(t));
}
function ei(t = import_time.FIVE_MINUTES, e) {
  const n2 = (0, import_time.toMiliseconds)(t || import_time.FIVE_MINUTES);
  let r2, o2, s, i3;
  return { resolve: (f5) => {
    s && r2 && (clearTimeout(s), r2(f5), i3 = Promise.resolve(f5));
  }, reject: (f5) => {
    s && o2 && (clearTimeout(s), o2(f5));
  }, done: () => new Promise((f5, a2) => {
    if (i3) return f5(i3);
    s = setTimeout(() => {
      const l3 = new Error(e);
      i3 = Promise.reject(l3), a2(l3);
    }, n2), r2 = f5, o2 = a2;
  }) };
}
function ni(t, e, n2) {
  return new Promise(async (r2, o2) => {
    const s = setTimeout(() => o2(new Error(n2)), e);
    try {
      const i3 = await t;
      r2(i3);
    } catch (i3) {
      o2(i3);
    }
    clearTimeout(s);
  });
}
function Xe(t, e) {
  if (typeof e == "string" && e.startsWith(`${t}:`)) return e;
  if (t.toLowerCase() === "topic") {
    if (typeof e != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e}`;
  } else if (t.toLowerCase() === "id") {
    if (typeof e != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e}`;
  }
  throw new Error(`Unknown expirer target type: ${t}`);
}
function ri(t) {
  return Xe("topic", t);
}
function oi(t) {
  return Xe("id", t);
}
function si(t) {
  const [e, n2] = t.split(":"), r2 = { id: void 0, topic: void 0 };
  if (e === "topic" && typeof n2 == "string") r2.topic = n2;
  else if (e === "id" && Number.isInteger(Number(n2))) r2.id = Number(n2);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${n2}`);
  return r2;
}
function ii(t, e) {
  return (0, import_time.fromMiliseconds)((e || Date.now()) + (0, import_time.toMiliseconds)(t));
}
function fi(t) {
  return Date.now() >= (0, import_time.toMiliseconds)(t);
}
function ci(t, e) {
  return `${t}${e ? `:${e}` : ""}`;
}
function ct(t = [], e = []) {
  return [.../* @__PURE__ */ new Set([...t, ...e])];
}
async function ai({ id: t, topic: e, wcDeepLink: n2 }) {
  var r2;
  try {
    if (!n2) return;
    const o2 = typeof n2 == "string" ? JSON.parse(n2) : n2, s = o2 == null ? void 0 : o2.href;
    if (typeof s != "string") return;
    const i3 = dr(s, t, e), f5 = Pt();
    if (f5 === J.browser) {
      if (!((r2 = (0, import_window_getters.getDocument)()) != null && r2.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      hr(i3);
    } else f5 === J.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i3);
  } catch (o2) {
    console.error(o2);
  }
}
function dr(t, e, n2) {
  const r2 = `requestId=${e}&sessionTopic=${n2}`;
  t.endsWith("/") && (t = t.slice(0, -1));
  let o2 = `${t}`;
  if (t.startsWith("https://t.me")) {
    const s = t.includes("?") ? "&startapp=" : "?startapp=";
    o2 = `${o2}${s}${br(r2, true)}`;
  } else o2 = `${o2}/wc?${r2}`;
  return o2;
}
function hr(t) {
  let e = "_self";
  gr() ? e = "_top" : (pr() || t.startsWith("https://") || t.startsWith("http://")) && (e = "_blank"), window.open(t, e, "noreferrer noopener");
}
async function ui(t, e) {
  let n2 = "";
  try {
    if (zt() && (n2 = localStorage.getItem(e), n2)) return n2;
    n2 = await t.getItem(e);
  } catch (r2) {
    console.error(r2);
  }
  return n2;
}
function li(t, e) {
  if (!t.includes(e)) return null;
  const n2 = t.split(/([&,?,=])/), r2 = n2.indexOf(e);
  return n2[r2 + 2];
}
function di() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t) => {
    const e = Math.random() * 16 | 0;
    return (t === "x" ? e : e & 3 | 8).toString(16);
  });
}
function hi() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function pr() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function gr() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function br(t, e = false) {
  const n2 = Buffer.from(t).toString("base64");
  return e ? n2.replace(/[=]/g, "") : n2;
}
function Qe2(t) {
  return Buffer.from(t, "base64").toString("utf-8");
}
function pi(t) {
  return new Promise((e) => setTimeout(e, t));
}
var gi = class {
  constructor({ limit: e }) {
    tr(this, "limit"), tr(this, "set"), this.limit = e, this.set = /* @__PURE__ */ new Set();
  }
  add(e) {
    if (!this.set.has(e)) {
      if (this.set.size >= this.limit) {
        const n2 = this.set.values().next().value;
        n2 && this.set.delete(n2);
      }
      this.set.add(e);
    }
  }
  has(e) {
    return this.set.has(e);
  }
};
var Be = BigInt(2 ** 32 - 1);
var yr = BigInt(32);
function mr(t, e = false) {
  return e ? { h: Number(t & Be), l: Number(t >> yr & Be) } : { h: Number(t >> yr & Be) | 0, l: Number(t & Be) | 0 };
}
function wr(t, e = false) {
  const n2 = t.length;
  let r2 = new Uint32Array(n2), o2 = new Uint32Array(n2);
  for (let s = 0; s < n2; s++) {
    const { h: i3, l: f5 } = mr(t[s], e);
    [r2[s], o2[s]] = [i3, f5];
  }
  return [r2, o2];
}
var xr = (t, e, n2) => t >>> n2;
var vr = (t, e, n2) => t << 32 - n2 | e >>> n2;
var At = (t, e, n2) => t >>> n2 | e << 32 - n2;
var St = (t, e, n2) => t << 32 - n2 | e >>> n2;
var se = (t, e, n2) => t << 64 - n2 | e >>> n2 - 32;
var ie = (t, e, n2) => t >>> n2 - 32 | e << 64 - n2;
var bi = (t, e) => e;
var yi = (t, e) => t;
var mi = (t, e, n2) => t << n2 | e >>> 32 - n2;
var wi = (t, e, n2) => e << n2 | t >>> 32 - n2;
var xi = (t, e, n2) => e << n2 - 32 | t >>> 64 - n2;
var vi = (t, e, n2) => t << n2 - 32 | e >>> 64 - n2;
function dt(t, e, n2, r2) {
  const o2 = (e >>> 0) + (r2 >>> 0);
  return { h: t + n2 + (o2 / 2 ** 32 | 0) | 0, l: o2 | 0 };
}
var tn = (t, e, n2) => (t >>> 0) + (e >>> 0) + (n2 >>> 0);
var en = (t, e, n2, r2) => e + n2 + r2 + (t / 2 ** 32 | 0) | 0;
var Ei = (t, e, n2, r2) => (t >>> 0) + (e >>> 0) + (n2 >>> 0) + (r2 >>> 0);
var Bi = (t, e, n2, r2, o2) => e + n2 + r2 + o2 + (t / 2 ** 32 | 0) | 0;
var Ii = (t, e, n2, r2, o2) => (t >>> 0) + (e >>> 0) + (n2 >>> 0) + (r2 >>> 0) + (o2 >>> 0);
var Ai = (t, e, n2, r2, o2, s) => e + n2 + r2 + o2 + s + (t / 2 ** 32 | 0) | 0;
var Gt = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function nn(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function mt(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function at(t, ...e) {
  if (!nn(t)) throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function rn(t) {
  if (typeof t != "function" || typeof t.create != "function") throw new Error("Hash should be wrapped by utils.createHasher");
  mt(t.outputLen), mt(t.blockLen);
}
function Nt(t, e = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function on(t, e) {
  at(t);
  const n2 = e.outputLen;
  if (t.length < n2) throw new Error("digestInto() expects output buffer of length at least " + n2);
}
function fe(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function ut(...t) {
  for (let e = 0; e < t.length; e++) t[e].fill(0);
}
function sn2(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
function gt(t, e) {
  return t << 32 - e | t >>> e;
}
var Er = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Br(t) {
  return t << 24 & 4278190080 | t << 8 & 16711680 | t >>> 8 & 65280 | t >>> 24 & 255;
}
var wt = Er ? (t) => t : (t) => Br(t);
function Si(t) {
  for (let e = 0; e < t.length; e++) t[e] = Br(t[e]);
  return t;
}
var Ot = Er ? (t) => t : Si;
var Ir = typeof Uint8Array.from([]).toHex == "function" && typeof Uint8Array.fromHex == "function";
var Ni = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function ce(t) {
  if (at(t), Ir) return t.toHex();
  let e = "";
  for (let n2 = 0; n2 < t.length; n2++) e += Ni[t[n2]];
  return e;
}
var xt = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Ar(t) {
  if (t >= xt._0 && t <= xt._9) return t - xt._0;
  if (t >= xt.A && t <= xt.F) return t - (xt.A - 10);
  if (t >= xt.a && t <= xt.f) return t - (xt.a - 10);
}
function fn(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  if (Ir) return Uint8Array.fromHex(t);
  const e = t.length, n2 = e / 2;
  if (e % 2) throw new Error("hex string expected, got unpadded hex of length " + e);
  const r2 = new Uint8Array(n2);
  for (let o2 = 0, s = 0; o2 < n2; o2++, s += 2) {
    const i3 = Ar(t.charCodeAt(s)), f5 = Ar(t.charCodeAt(s + 1));
    if (i3 === void 0 || f5 === void 0) {
      const a2 = t[s] + t[s + 1];
      throw new Error('hex string expected, got non-hex character "' + a2 + '" at index ' + s);
    }
    r2[o2] = i3 * 16 + f5;
  }
  return r2;
}
function Oi(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function ht(t) {
  return typeof t == "string" && (t = Oi(t)), at(t), t;
}
function Ht(...t) {
  let e = 0;
  for (let r2 = 0; r2 < t.length; r2++) {
    const o2 = t[r2];
    at(o2), e += o2.length;
  }
  const n2 = new Uint8Array(e);
  for (let r2 = 0, o2 = 0; r2 < t.length; r2++) {
    const s = t[r2];
    n2.set(s, o2), o2 += s.length;
  }
  return n2;
}
var Ie = class {
};
function ae(t) {
  const e = (r2) => t().update(ht(r2)).digest(), n2 = t();
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = () => t(), e;
}
function Ui(t) {
  const e = (r2, o2) => t(o2).update(ht(r2)).digest(), n2 = t({});
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = (r2) => t(r2), e;
}
function Zt(t = 32) {
  if (Gt && typeof Gt.getRandomValues == "function") return Gt.getRandomValues(new Uint8Array(t));
  if (Gt && typeof Gt.randomBytes == "function") return Uint8Array.from(Gt.randomBytes(t));
  throw new Error("crypto.getRandomValues must be defined");
}
var _i = BigInt(0);
var ue = BigInt(1);
var Ti = BigInt(2);
var Ri = BigInt(7);
var $i = BigInt(256);
var Ci = BigInt(113);
var Sr = [];
var Nr = [];
var Or = [];
for (let t = 0, e = ue, n2 = 1, r2 = 0; t < 24; t++) {
  [n2, r2] = [r2, (2 * n2 + 3 * r2) % 5], Sr.push(2 * (5 * r2 + n2)), Nr.push((t + 1) * (t + 2) / 2 % 64);
  let o2 = _i;
  for (let s = 0; s < 7; s++) e = (e << ue ^ (e >> Ri) * Ci) % $i, e & Ti && (o2 ^= ue << (ue << BigInt(s)) - ue);
  Or.push(o2);
}
var Ur = wr(Or, true);
var Li = Ur[0];
var ji = Ur[1];
var _r = (t, e, n2) => n2 > 32 ? xi(t, e, n2) : mi(t, e, n2);
var Tr = (t, e, n2) => n2 > 32 ? vi(t, e, n2) : wi(t, e, n2);
function ki(t, e = 24) {
  const n2 = new Uint32Array(10);
  for (let r2 = 24 - e; r2 < 24; r2++) {
    for (let i3 = 0; i3 < 10; i3++) n2[i3] = t[i3] ^ t[i3 + 10] ^ t[i3 + 20] ^ t[i3 + 30] ^ t[i3 + 40];
    for (let i3 = 0; i3 < 10; i3 += 2) {
      const f5 = (i3 + 8) % 10, a2 = (i3 + 2) % 10, l3 = n2[a2], c4 = n2[a2 + 1], u2 = _r(l3, c4, 1) ^ n2[f5], h3 = Tr(l3, c4, 1) ^ n2[f5 + 1];
      for (let g2 = 0; g2 < 50; g2 += 10) t[i3 + g2] ^= u2, t[i3 + g2 + 1] ^= h3;
    }
    let o2 = t[2], s = t[3];
    for (let i3 = 0; i3 < 24; i3++) {
      const f5 = Nr[i3], a2 = _r(o2, s, f5), l3 = Tr(o2, s, f5), c4 = Sr[i3];
      o2 = t[c4], s = t[c4 + 1], t[c4] = a2, t[c4 + 1] = l3;
    }
    for (let i3 = 0; i3 < 50; i3 += 10) {
      for (let f5 = 0; f5 < 10; f5++) n2[f5] = t[i3 + f5];
      for (let f5 = 0; f5 < 10; f5++) t[i3 + f5] ^= ~n2[(f5 + 2) % 10] & n2[(f5 + 4) % 10];
    }
    t[0] ^= Li[r2], t[1] ^= ji[r2];
  }
  ut(n2);
}
var qn = class _qn extends Ie {
  constructor(e, n2, r2, o2 = false, s = 24) {
    if (super(), this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, this.enableXOF = false, this.blockLen = e, this.suffix = n2, this.outputLen = r2, this.enableXOF = o2, this.rounds = s, mt(r2), !(0 < e && e < 200)) throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200), this.state32 = fe(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    Ot(this.state32), ki(this.state32, this.rounds), Ot(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e) {
    Nt(this), e = ht(e), at(e);
    const { blockLen: n2, state: r2 } = this, o2 = e.length;
    for (let s = 0; s < o2; ) {
      const i3 = Math.min(n2 - this.pos, o2 - s);
      for (let f5 = 0; f5 < i3; f5++) r2[this.pos++] ^= e[s++];
      this.pos === n2 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: e, suffix: n2, pos: r2, blockLen: o2 } = this;
    e[r2] ^= n2, (n2 & 128) !== 0 && r2 === o2 - 1 && this.keccak(), e[o2 - 1] ^= 128, this.keccak();
  }
  writeInto(e) {
    Nt(this, false), at(e), this.finish();
    const n2 = this.state, { blockLen: r2 } = this;
    for (let o2 = 0, s = e.length; o2 < s; ) {
      this.posOut >= r2 && this.keccak();
      const i3 = Math.min(r2 - this.posOut, s - o2);
      e.set(n2.subarray(this.posOut, this.posOut + i3), o2), this.posOut += i3, o2 += i3;
    }
    return e;
  }
  xofInto(e) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(e);
  }
  xof(e) {
    return mt(e), this.xofInto(new Uint8Array(e));
  }
  digestInto(e) {
    if (on(e, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(e), this.destroy(), e;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, ut(this.state);
  }
  _cloneInto(e) {
    const { blockLen: n2, suffix: r2, outputLen: o2, rounds: s, enableXOF: i3 } = this;
    return e || (e = new _qn(n2, r2, o2, i3, s)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = s, e.suffix = r2, e.outputLen = o2, e.enableXOF = i3, e.destroyed = this.destroyed, e;
  }
};
var Pi = (t, e, n2) => ae(() => new qn(e, t, n2));
var Hi = Pi(1, 136, 256 / 8);
function Di(t, e, n2, r2) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e, n2, r2);
  const o2 = BigInt(32), s = BigInt(4294967295), i3 = Number(n2 >> o2 & s), f5 = Number(n2 & s), a2 = r2 ? 4 : 0, l3 = r2 ? 0 : 4;
  t.setUint32(e + a2, i3, r2), t.setUint32(e + l3, f5, r2);
}
function Mi(t, e, n2) {
  return t & e ^ ~t & n2;
}
function Vi(t, e, n2) {
  return t & e ^ t & n2 ^ e & n2;
}
var Rr = class extends Ie {
  constructor(e, n2, r2, o2) {
    super(), this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.blockLen = e, this.outputLen = n2, this.padOffset = r2, this.isLE = o2, this.buffer = new Uint8Array(e), this.view = sn2(this.buffer);
  }
  update(e) {
    Nt(this), e = ht(e), at(e);
    const { view: n2, buffer: r2, blockLen: o2 } = this, s = e.length;
    for (let i3 = 0; i3 < s; ) {
      const f5 = Math.min(o2 - this.pos, s - i3);
      if (f5 === o2) {
        const a2 = sn2(e);
        for (; o2 <= s - i3; i3 += o2) this.process(a2, i3);
        continue;
      }
      r2.set(e.subarray(i3, i3 + f5), this.pos), this.pos += f5, i3 += f5, this.pos === o2 && (this.process(n2, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    Nt(this), on(e, this), this.finished = true;
    const { buffer: n2, view: r2, blockLen: o2, isLE: s } = this;
    let { pos: i3 } = this;
    n2[i3++] = 128, ut(this.buffer.subarray(i3)), this.padOffset > o2 - i3 && (this.process(r2, 0), i3 = 0);
    for (let u2 = i3; u2 < o2; u2++) n2[u2] = 0;
    Di(r2, o2 - 8, BigInt(this.length * 8), s), this.process(r2, 0);
    const f5 = sn2(e), a2 = this.outputLen;
    if (a2 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const l3 = a2 / 4, c4 = this.get();
    if (l3 > c4.length) throw new Error("_sha2: outputLen bigger than state");
    for (let u2 = 0; u2 < l3; u2++) f5.setUint32(4 * u2, c4[u2], s);
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n2, buffer: r2, length: o2, finished: s, destroyed: i3, pos: f5 } = this;
    return e.destroyed = i3, e.finished = s, e.length = o2, e.pos = f5, o2 % n2 && e.buffer.set(r2), e;
  }
  clone() {
    return this._cloneInto();
  }
};
var Ut = Uint32Array.from([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var W = Uint32Array.from([3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428]);
var Y = Uint32Array.from([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209]);
var qi = Uint32Array.from([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var _t = new Uint32Array(64);
var Ki = class extends Rr {
  constructor(e = 32) {
    super(64, e, 8, false), this.A = Ut[0] | 0, this.B = Ut[1] | 0, this.C = Ut[2] | 0, this.D = Ut[3] | 0, this.E = Ut[4] | 0, this.F = Ut[5] | 0, this.G = Ut[6] | 0, this.H = Ut[7] | 0;
  }
  get() {
    const { A: e, B: n2, C: r2, D: o2, E: s, F: i3, G: f5, H: a2 } = this;
    return [e, n2, r2, o2, s, i3, f5, a2];
  }
  set(e, n2, r2, o2, s, i3, f5, a2) {
    this.A = e | 0, this.B = n2 | 0, this.C = r2 | 0, this.D = o2 | 0, this.E = s | 0, this.F = i3 | 0, this.G = f5 | 0, this.H = a2 | 0;
  }
  process(e, n2) {
    for (let u2 = 0; u2 < 16; u2++, n2 += 4) _t[u2] = e.getUint32(n2, false);
    for (let u2 = 16; u2 < 64; u2++) {
      const h3 = _t[u2 - 15], g2 = _t[u2 - 2], w = gt(h3, 7) ^ gt(h3, 18) ^ h3 >>> 3, y4 = gt(g2, 17) ^ gt(g2, 19) ^ g2 >>> 10;
      _t[u2] = y4 + _t[u2 - 7] + w + _t[u2 - 16] | 0;
    }
    let { A: r2, B: o2, C: s, D: i3, E: f5, F: a2, G: l3, H: c4 } = this;
    for (let u2 = 0; u2 < 64; u2++) {
      const h3 = gt(f5, 6) ^ gt(f5, 11) ^ gt(f5, 25), g2 = c4 + h3 + Mi(f5, a2, l3) + qi[u2] + _t[u2] | 0, y4 = (gt(r2, 2) ^ gt(r2, 13) ^ gt(r2, 22)) + Vi(r2, o2, s) | 0;
      c4 = l3, l3 = a2, a2 = f5, f5 = i3 + g2 | 0, i3 = s, s = o2, o2 = r2, r2 = g2 + y4 | 0;
    }
    r2 = r2 + this.A | 0, o2 = o2 + this.B | 0, s = s + this.C | 0, i3 = i3 + this.D | 0, f5 = f5 + this.E | 0, a2 = a2 + this.F | 0, l3 = l3 + this.G | 0, c4 = c4 + this.H | 0, this.set(r2, o2, s, i3, f5, a2, l3, c4);
  }
  roundClean() {
    ut(_t);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), ut(this.buffer);
  }
};
var $r = wr(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t)));
var Fi = $r[0];
var zi = $r[1];
var Tt = new Uint32Array(80);
var Rt = new Uint32Array(80);
var cn = class extends Rr {
  constructor(e = 64) {
    super(128, e, 16, false), this.Ah = Y[0] | 0, this.Al = Y[1] | 0, this.Bh = Y[2] | 0, this.Bl = Y[3] | 0, this.Ch = Y[4] | 0, this.Cl = Y[5] | 0, this.Dh = Y[6] | 0, this.Dl = Y[7] | 0, this.Eh = Y[8] | 0, this.El = Y[9] | 0, this.Fh = Y[10] | 0, this.Fl = Y[11] | 0, this.Gh = Y[12] | 0, this.Gl = Y[13] | 0, this.Hh = Y[14] | 0, this.Hl = Y[15] | 0;
  }
  get() {
    const { Ah: e, Al: n2, Bh: r2, Bl: o2, Ch: s, Cl: i3, Dh: f5, Dl: a2, Eh: l3, El: c4, Fh: u2, Fl: h3, Gh: g2, Gl: w, Hh: y4, Hl: x3 } = this;
    return [e, n2, r2, o2, s, i3, f5, a2, l3, c4, u2, h3, g2, w, y4, x3];
  }
  set(e, n2, r2, o2, s, i3, f5, a2, l3, c4, u2, h3, g2, w, y4, x3) {
    this.Ah = e | 0, this.Al = n2 | 0, this.Bh = r2 | 0, this.Bl = o2 | 0, this.Ch = s | 0, this.Cl = i3 | 0, this.Dh = f5 | 0, this.Dl = a2 | 0, this.Eh = l3 | 0, this.El = c4 | 0, this.Fh = u2 | 0, this.Fl = h3 | 0, this.Gh = g2 | 0, this.Gl = w | 0, this.Hh = y4 | 0, this.Hl = x3 | 0;
  }
  process(e, n2) {
    for (let L = 0; L < 16; L++, n2 += 4) Tt[L] = e.getUint32(n2), Rt[L] = e.getUint32(n2 += 4);
    for (let L = 16; L < 80; L++) {
      const V4 = Tt[L - 15] | 0, _2 = Rt[L - 15] | 0, k4 = At(V4, _2, 1) ^ At(V4, _2, 8) ^ xr(V4, _2, 7), j2 = St(V4, _2, 1) ^ St(V4, _2, 8) ^ vr(V4, _2, 7), $2 = Tt[L - 2] | 0, d3 = Rt[L - 2] | 0, m2 = At($2, d3, 19) ^ se($2, d3, 61) ^ xr($2, d3, 6), p2 = St($2, d3, 19) ^ ie($2, d3, 61) ^ vr($2, d3, 6), b2 = Ei(j2, p2, Rt[L - 7], Rt[L - 16]), v3 = Bi(b2, k4, m2, Tt[L - 7], Tt[L - 16]);
      Tt[L] = v3 | 0, Rt[L] = b2 | 0;
    }
    let { Ah: r2, Al: o2, Bh: s, Bl: i3, Ch: f5, Cl: a2, Dh: l3, Dl: c4, Eh: u2, El: h3, Fh: g2, Fl: w, Gh: y4, Gl: x3, Hh: R4, Hl: M4 } = this;
    for (let L = 0; L < 80; L++) {
      const V4 = At(u2, h3, 14) ^ At(u2, h3, 18) ^ se(u2, h3, 41), _2 = St(u2, h3, 14) ^ St(u2, h3, 18) ^ ie(u2, h3, 41), k4 = u2 & g2 ^ ~u2 & y4, j2 = h3 & w ^ ~h3 & x3, $2 = Ii(M4, _2, j2, zi[L], Rt[L]), d3 = Ai($2, R4, V4, k4, Fi[L], Tt[L]), m2 = $2 | 0, p2 = At(r2, o2, 28) ^ se(r2, o2, 34) ^ se(r2, o2, 39), b2 = St(r2, o2, 28) ^ ie(r2, o2, 34) ^ ie(r2, o2, 39), v3 = r2 & s ^ r2 & f5 ^ s & f5, B2 = o2 & i3 ^ o2 & a2 ^ i3 & a2;
      R4 = y4 | 0, M4 = x3 | 0, y4 = g2 | 0, x3 = w | 0, g2 = u2 | 0, w = h3 | 0, { h: u2, l: h3 } = dt(l3 | 0, c4 | 0, d3 | 0, m2 | 0), l3 = f5 | 0, c4 = a2 | 0, f5 = s | 0, a2 = i3 | 0, s = r2 | 0, i3 = o2 | 0;
      const E3 = tn(m2, b2, B2);
      r2 = en(E3, d3, p2, v3), o2 = E3 | 0;
    }
    ({ h: r2, l: o2 } = dt(this.Ah | 0, this.Al | 0, r2 | 0, o2 | 0)), { h: s, l: i3 } = dt(this.Bh | 0, this.Bl | 0, s | 0, i3 | 0), { h: f5, l: a2 } = dt(this.Ch | 0, this.Cl | 0, f5 | 0, a2 | 0), { h: l3, l: c4 } = dt(this.Dh | 0, this.Dl | 0, l3 | 0, c4 | 0), { h: u2, l: h3 } = dt(this.Eh | 0, this.El | 0, u2 | 0, h3 | 0), { h: g2, l: w } = dt(this.Fh | 0, this.Fl | 0, g2 | 0, w | 0), { h: y4, l: x3 } = dt(this.Gh | 0, this.Gl | 0, y4 | 0, x3 | 0), { h: R4, l: M4 } = dt(this.Hh | 0, this.Hl | 0, R4 | 0, M4 | 0), this.set(r2, o2, s, i3, f5, a2, l3, c4, u2, h3, g2, w, y4, x3, R4, M4);
  }
  roundClean() {
    ut(Tt, Rt);
  }
  destroy() {
    ut(this.buffer), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Gi = class extends cn {
  constructor() {
    super(48), this.Ah = W[0] | 0, this.Al = W[1] | 0, this.Bh = W[2] | 0, this.Bl = W[3] | 0, this.Ch = W[4] | 0, this.Cl = W[5] | 0, this.Dh = W[6] | 0, this.Dl = W[7] | 0, this.Eh = W[8] | 0, this.El = W[9] | 0, this.Fh = W[10] | 0, this.Fl = W[11] | 0, this.Gh = W[12] | 0, this.Gl = W[13] | 0, this.Hh = W[14] | 0, this.Hl = W[15] | 0;
  }
};
var X = Uint32Array.from([573645204, 4230739756, 2673172387, 3360449730, 596883563, 1867755857, 2520282905, 1497426621, 2519219938, 2827943907, 3193839141, 1401305490, 721525244, 746961066, 246885852, 2177182882]);
var Zi = class extends cn {
  constructor() {
    super(32), this.Ah = X[0] | 0, this.Al = X[1] | 0, this.Bh = X[2] | 0, this.Bl = X[3] | 0, this.Ch = X[4] | 0, this.Cl = X[5] | 0, this.Dh = X[6] | 0, this.Dl = X[7] | 0, this.Eh = X[8] | 0, this.El = X[9] | 0, this.Fh = X[10] | 0, this.Fl = X[11] | 0, this.Gh = X[12] | 0, this.Gl = X[13] | 0, this.Hh = X[14] | 0, this.Hl = X[15] | 0;
  }
};
var Ae = ae(() => new Ki());
var Wi = ae(() => new cn());
var Yi = ae(() => new Gi());
var Xi = ae(() => new Zi());
var Ji = Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]);
var F = Uint32Array.from([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]);
var N = new Uint32Array(32);
function $t(t, e, n2, r2, o2, s) {
  const i3 = o2[s], f5 = o2[s + 1];
  let a2 = N[2 * t], l3 = N[2 * t + 1], c4 = N[2 * e], u2 = N[2 * e + 1], h3 = N[2 * n2], g2 = N[2 * n2 + 1], w = N[2 * r2], y4 = N[2 * r2 + 1], x3 = tn(a2, c4, i3);
  l3 = en(x3, l3, u2, f5), a2 = x3 | 0, { Dh: y4, Dl: w } = { Dh: y4 ^ l3, Dl: w ^ a2 }, { Dh: y4, Dl: w } = { Dh: bi(y4, w), Dl: yi(y4) }, { h: g2, l: h3 } = dt(g2, h3, y4, w), { Bh: u2, Bl: c4 } = { Bh: u2 ^ g2, Bl: c4 ^ h3 }, { Bh: u2, Bl: c4 } = { Bh: At(u2, c4, 24), Bl: St(u2, c4, 24) }, N[2 * t] = a2, N[2 * t + 1] = l3, N[2 * e] = c4, N[2 * e + 1] = u2, N[2 * n2] = h3, N[2 * n2 + 1] = g2, N[2 * r2] = w, N[2 * r2 + 1] = y4;
}
function Ct(t, e, n2, r2, o2, s) {
  const i3 = o2[s], f5 = o2[s + 1];
  let a2 = N[2 * t], l3 = N[2 * t + 1], c4 = N[2 * e], u2 = N[2 * e + 1], h3 = N[2 * n2], g2 = N[2 * n2 + 1], w = N[2 * r2], y4 = N[2 * r2 + 1], x3 = tn(a2, c4, i3);
  l3 = en(x3, l3, u2, f5), a2 = x3 | 0, { Dh: y4, Dl: w } = { Dh: y4 ^ l3, Dl: w ^ a2 }, { Dh: y4, Dl: w } = { Dh: At(y4, w, 16), Dl: St(y4, w, 16) }, { h: g2, l: h3 } = dt(g2, h3, y4, w), { Bh: u2, Bl: c4 } = { Bh: u2 ^ g2, Bl: c4 ^ h3 }, { Bh: u2, Bl: c4 } = { Bh: se(u2, c4, 63), Bl: ie(u2, c4, 63) }, N[2 * t] = a2, N[2 * t + 1] = l3, N[2 * e] = c4, N[2 * e + 1] = u2, N[2 * n2] = h3, N[2 * n2 + 1] = g2, N[2 * r2] = w, N[2 * r2 + 1] = y4;
}
function Qi(t, e = {}, n2, r2, o2) {
  if (mt(n2), t < 0 || t > n2) throw new Error("outputLen bigger than keyLen");
  const { key: s, salt: i3, personalization: f5 } = e;
  if (s !== void 0 && (s.length < 1 || s.length > n2)) throw new Error("key length must be undefined or 1.." + n2);
  if (i3 !== void 0 && i3.length !== r2) throw new Error("salt must be undefined or " + r2);
  if (f5 !== void 0 && f5.length !== o2) throw new Error("personalization must be undefined or " + o2);
}
var tf = class extends Ie {
  constructor(e, n2) {
    super(), this.finished = false, this.destroyed = false, this.length = 0, this.pos = 0, mt(e), mt(n2), this.blockLen = e, this.outputLen = n2, this.buffer = new Uint8Array(e), this.buffer32 = fe(this.buffer);
  }
  update(e) {
    Nt(this), e = ht(e), at(e);
    const { blockLen: n2, buffer: r2, buffer32: o2 } = this, s = e.length, i3 = e.byteOffset, f5 = e.buffer;
    for (let a2 = 0; a2 < s; ) {
      this.pos === n2 && (Ot(o2), this.compress(o2, 0, false), Ot(o2), this.pos = 0);
      const l3 = Math.min(n2 - this.pos, s - a2), c4 = i3 + a2;
      if (l3 === n2 && !(c4 % 4) && a2 + l3 < s) {
        const u2 = new Uint32Array(f5, c4, Math.floor((s - a2) / 4));
        Ot(u2);
        for (let h3 = 0; a2 + n2 < s; h3 += o2.length, a2 += n2) this.length += n2, this.compress(u2, h3, false);
        Ot(u2);
        continue;
      }
      r2.set(e.subarray(a2, a2 + l3), this.pos), this.pos += l3, this.length += l3, a2 += l3;
    }
    return this;
  }
  digestInto(e) {
    Nt(this), on(e, this);
    const { pos: n2, buffer32: r2 } = this;
    this.finished = true, ut(this.buffer.subarray(n2)), Ot(r2), this.compress(r2, 0, true), Ot(r2);
    const o2 = fe(e);
    this.get().forEach((s, i3) => o2[i3] = wt(s));
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
  _cloneInto(e) {
    const { buffer: n2, length: r2, finished: o2, destroyed: s, outputLen: i3, pos: f5 } = this;
    return e || (e = new this.constructor({ dkLen: i3 })), e.set(...this.get()), e.buffer.set(n2), e.destroyed = s, e.finished = o2, e.length = r2, e.pos = f5, e.outputLen = i3, e;
  }
  clone() {
    return this._cloneInto();
  }
};
var ef = class extends tf {
  constructor(e = {}) {
    const n2 = e.dkLen === void 0 ? 64 : e.dkLen;
    super(128, n2), this.v0l = F[0] | 0, this.v0h = F[1] | 0, this.v1l = F[2] | 0, this.v1h = F[3] | 0, this.v2l = F[4] | 0, this.v2h = F[5] | 0, this.v3l = F[6] | 0, this.v3h = F[7] | 0, this.v4l = F[8] | 0, this.v4h = F[9] | 0, this.v5l = F[10] | 0, this.v5h = F[11] | 0, this.v6l = F[12] | 0, this.v6h = F[13] | 0, this.v7l = F[14] | 0, this.v7h = F[15] | 0, Qi(n2, e, 64, 16, 16);
    let { key: r2, personalization: o2, salt: s } = e, i3 = 0;
    if (r2 !== void 0 && (r2 = ht(r2), i3 = r2.length), this.v0l ^= this.outputLen | i3 << 8 | 65536 | 1 << 24, s !== void 0) {
      s = ht(s);
      const f5 = fe(s);
      this.v4l ^= wt(f5[0]), this.v4h ^= wt(f5[1]), this.v5l ^= wt(f5[2]), this.v5h ^= wt(f5[3]);
    }
    if (o2 !== void 0) {
      o2 = ht(o2);
      const f5 = fe(o2);
      this.v6l ^= wt(f5[0]), this.v6h ^= wt(f5[1]), this.v7l ^= wt(f5[2]), this.v7h ^= wt(f5[3]);
    }
    if (r2 !== void 0) {
      const f5 = new Uint8Array(this.blockLen);
      f5.set(r2), this.update(f5);
    }
  }
  get() {
    let { v0l: e, v0h: n2, v1l: r2, v1h: o2, v2l: s, v2h: i3, v3l: f5, v3h: a2, v4l: l3, v4h: c4, v5l: u2, v5h: h3, v6l: g2, v6h: w, v7l: y4, v7h: x3 } = this;
    return [e, n2, r2, o2, s, i3, f5, a2, l3, c4, u2, h3, g2, w, y4, x3];
  }
  set(e, n2, r2, o2, s, i3, f5, a2, l3, c4, u2, h3, g2, w, y4, x3) {
    this.v0l = e | 0, this.v0h = n2 | 0, this.v1l = r2 | 0, this.v1h = o2 | 0, this.v2l = s | 0, this.v2h = i3 | 0, this.v3l = f5 | 0, this.v3h = a2 | 0, this.v4l = l3 | 0, this.v4h = c4 | 0, this.v5l = u2 | 0, this.v5h = h3 | 0, this.v6l = g2 | 0, this.v6h = w | 0, this.v7l = y4 | 0, this.v7h = x3 | 0;
  }
  compress(e, n2, r2) {
    this.get().forEach((a2, l3) => N[l3] = a2), N.set(F, 16);
    let { h: o2, l: s } = mr(BigInt(this.length));
    N[24] = F[8] ^ s, N[25] = F[9] ^ o2, r2 && (N[28] = ~N[28], N[29] = ~N[29]);
    let i3 = 0;
    const f5 = Ji;
    for (let a2 = 0; a2 < 12; a2++) $t(0, 4, 8, 12, e, n2 + 2 * f5[i3++]), Ct(0, 4, 8, 12, e, n2 + 2 * f5[i3++]), $t(1, 5, 9, 13, e, n2 + 2 * f5[i3++]), Ct(1, 5, 9, 13, e, n2 + 2 * f5[i3++]), $t(2, 6, 10, 14, e, n2 + 2 * f5[i3++]), Ct(2, 6, 10, 14, e, n2 + 2 * f5[i3++]), $t(3, 7, 11, 15, e, n2 + 2 * f5[i3++]), Ct(3, 7, 11, 15, e, n2 + 2 * f5[i3++]), $t(0, 5, 10, 15, e, n2 + 2 * f5[i3++]), Ct(0, 5, 10, 15, e, n2 + 2 * f5[i3++]), $t(1, 6, 11, 12, e, n2 + 2 * f5[i3++]), Ct(1, 6, 11, 12, e, n2 + 2 * f5[i3++]), $t(2, 7, 8, 13, e, n2 + 2 * f5[i3++]), Ct(2, 7, 8, 13, e, n2 + 2 * f5[i3++]), $t(3, 4, 9, 14, e, n2 + 2 * f5[i3++]), Ct(3, 4, 9, 14, e, n2 + 2 * f5[i3++]);
    this.v0l ^= N[0] ^ N[16], this.v0h ^= N[1] ^ N[17], this.v1l ^= N[2] ^ N[18], this.v1h ^= N[3] ^ N[19], this.v2l ^= N[4] ^ N[20], this.v2h ^= N[5] ^ N[21], this.v3l ^= N[6] ^ N[22], this.v3h ^= N[7] ^ N[23], this.v4l ^= N[8] ^ N[24], this.v4h ^= N[9] ^ N[25], this.v5l ^= N[10] ^ N[26], this.v5h ^= N[11] ^ N[27], this.v6l ^= N[12] ^ N[28], this.v6h ^= N[13] ^ N[29], this.v7l ^= N[14] ^ N[30], this.v7h ^= N[15] ^ N[31], ut(N);
  }
  destroy() {
    this.destroyed = true, ut(this.buffer32), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var nf = Ui((t) => new ef(t));
var rf = "https://rpc.walletconnect.org/v1";
function an(t) {
  const e = `Ethereum Signed Message:
${t.length}`, n2 = new TextEncoder().encode(e + t);
  return "0x" + Buffer.from(Hi(n2)).toString("hex");
}
async function Cr(t, e, n2, r2, o2, s) {
  switch (n2.t) {
    case "eip191":
      return await Lr(t, e, n2.s);
    case "eip1271":
      return await jr(t, e, n2.s, r2, o2, s);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n2.t}`);
  }
}
async function Lr(t, e, n2) {
  return (await recoverAddress({ hash: an(e), signature: n2 })).toLowerCase() === t.toLowerCase();
}
async function jr(t, e, n2, r2, o2, s) {
  const i3 = Fe(r2);
  if (!i3.namespace || !i3.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r2}`);
  try {
    const f5 = "0x1626ba7e", a2 = "0000000000000000000000000000000000000000000000000000000000000040", l3 = n2.substring(2), c4 = (l3.length / 2).toString(16).padStart(64, "0"), u2 = (e.startsWith("0x") ? e : an(e)).substring(2), h3 = f5 + u2 + a2 + c4 + l3, g2 = await fetch(`${s || rf}/?chainId=${r2}&projectId=${o2}`, { headers: { "Content-Type": "application/json" }, method: "POST", body: JSON.stringify({ id: of(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t, data: h3 }, "latest"] }) }), { result: w } = await g2.json();
    return w ? w.slice(0, f5.length).toLowerCase() === f5.toLowerCase() : false;
  } catch (f5) {
    return console.error("isValidEip1271Signature: ", f5), false;
  }
}
function of() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function sf(t) {
  const e = atob(t), n2 = new Uint8Array(e.length);
  for (let i3 = 0; i3 < e.length; i3++) n2[i3] = e.charCodeAt(i3);
  const r2 = n2[0];
  if (r2 === 0) throw new Error("No signatures found");
  const o2 = 1 + r2 * 64;
  if (n2.length < o2) throw new Error("Transaction data too short for claimed signature count");
  if (n2.length < 100) throw new Error("Transaction too short");
  const s = Buffer.from(t, "base64").slice(1, 65);
  return esm_default.encode(s);
}
function ff(t) {
  const e = new Uint8Array(Buffer.from(t, "base64")), n2 = Array.from("TransactionData::").map((s) => s.charCodeAt(0)), r2 = new Uint8Array(n2.length + e.length);
  r2.set(n2), r2.set(e, n2.length);
  const o2 = nf(r2, { dkLen: 32 });
  return esm_default.encode(o2);
}
function cf(t) {
  const e = new Uint8Array(Ae(kr(t)));
  return esm_default.encode(e);
}
function kr(t) {
  if (t instanceof Uint8Array) return t;
  if (Array.isArray(t)) return new Uint8Array(t);
  if (typeof t == "object" && t != null && t.data) return new Uint8Array(Object.values(t.data));
  if (typeof t == "object" && t) return new Uint8Array(Object.values(t));
  throw new Error("getNearUint8ArrayFromBytes: Unexpected result type from bytes array");
}
function af(t) {
  const e = Buffer.from(t, "base64"), n2 = decode(e).txn;
  if (!n2) throw new Error("Invalid signed transaction: missing 'txn' field");
  const r2 = encode(n2), o2 = Buffer.from("TX"), s = Buffer.concat([o2, Buffer.from(r2)]), i3 = Xi(s);
  return base32.encode(i3).replace(/=+$/, "");
}
function un(t) {
  const e = [];
  let n2 = BigInt(t);
  for (; n2 >= BigInt(128); ) e.push(Number(n2 & BigInt(127) | BigInt(128))), n2 >>= BigInt(7);
  return e.push(Number(n2)), Buffer.from(e);
}
function uf(t) {
  const e = Buffer.from(t.signed.bodyBytes, "base64"), n2 = Buffer.from(t.signed.authInfoBytes, "base64"), r2 = Buffer.from(t.signature.signature, "base64"), o2 = [];
  o2.push(Buffer.from([10])), o2.push(un(e.length)), o2.push(e), o2.push(Buffer.from([18])), o2.push(un(n2.length)), o2.push(n2), o2.push(Buffer.from([26])), o2.push(un(r2.length)), o2.push(r2);
  const s = Buffer.concat(o2), i3 = Ae(s);
  return Buffer.from(i3).toString("hex").toUpperCase();
}
var lf = Object.defineProperty;
var df = Object.defineProperties;
var hf = Object.getOwnPropertyDescriptors;
var Pr = Object.getOwnPropertySymbols;
var pf = Object.prototype.hasOwnProperty;
var gf = Object.prototype.propertyIsEnumerable;
var Hr = (t, e, n2) => e in t ? lf(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var ln = (t, e) => {
  for (var n2 in e || (e = {})) pf.call(e, n2) && Hr(t, n2, e[n2]);
  if (Pr) for (var n2 of Pr(e)) gf.call(e, n2) && Hr(t, n2, e[n2]);
  return t;
};
var Dr = (t, e) => df(t, hf(e));
var bf = "did:pkh:";
var Se = (t) => t == null ? void 0 : t.split(":");
var Mr = (t) => {
  const e = t && Se(t);
  if (e) return t.includes(bf) ? e[3] : e[1];
};
var Vr = (t) => {
  const e = t && Se(t);
  if (e) return e[2] + ":" + e[3];
};
var dn = (t) => {
  const e = t && Se(t);
  if (e) return e.pop();
};
async function yf(t) {
  const { cacao: e, projectId: n2 } = t, { s: r2, p: o2 } = e, s = qr(o2, o2.iss), i3 = dn(o2.iss);
  return await Cr(i3, s, r2, Vr(o2.iss), n2);
}
var qr = (t, e) => {
  const n2 = `${t.domain} wants you to sign in with your Ethereum account:`, r2 = dn(e);
  if (!t.aud && !t.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o2 = t.statement || void 0;
  const s = `URI: ${t.aud || t.uri}`, i3 = `Version: ${t.version}`, f5 = `Chain ID: ${Mr(e)}`, a2 = `Nonce: ${t.nonce}`, l3 = `Issued At: ${t.iat}`, c4 = t.exp ? `Expiration Time: ${t.exp}` : void 0, u2 = t.nbf ? `Not Before: ${t.nbf}` : void 0, h3 = t.requestId ? `Request ID: ${t.requestId}` : void 0, g2 = t.resources ? `Resources:${t.resources.map((y4) => `
- ${y4}`).join("")}` : void 0, w = Oe(t.resources);
  if (w) {
    const y4 = Lt(w);
    o2 = gn(o2, y4);
  }
  return [n2, r2, "", o2, "", s, i3, f5, a2, l3, c4, u2, h3, g2].filter((y4) => y4 != null).join(`
`);
};
function Gr(t) {
  return Buffer.from(JSON.stringify(t)).toString("base64");
}
function Zr(t) {
  return JSON.parse(Buffer.from(t, "base64").toString("utf-8"));
}
function bt(t) {
  if (!t) throw new Error("No recap provided, value is undefined");
  if (!t.att) throw new Error("No `att` property found");
  const e = Object.keys(t.att);
  if (!(e != null && e.length)) throw new Error("No resources found in `att` property");
  e.forEach((n2) => {
    const r2 = t.att[n2];
    if (Array.isArray(r2)) throw new Error(`Resource must be an object: ${n2}`);
    if (typeof r2 != "object") throw new Error(`Resource must be an object: ${n2}`);
    if (!Object.keys(r2).length) throw new Error(`Resource object is empty: ${n2}`);
    Object.keys(r2).forEach((o2) => {
      const s = r2[o2];
      if (!Array.isArray(s)) throw new Error(`Ability limits ${o2} must be an array of objects, found: ${s}`);
      if (!s.length) throw new Error(`Value of ${o2} is empty array, must be an array with objects`);
      s.forEach((i3) => {
        if (typeof i3 != "object") throw new Error(`Ability limits (${o2}) must be an array of objects, found: ${i3}`);
      });
    });
  });
}
function Wr(t, e, n2, r2 = {}) {
  return n2 == null ? void 0 : n2.sort((o2, s) => o2.localeCompare(s)), { att: { [t]: hn(e, n2, r2) } };
}
function hn(t, e, n2 = {}) {
  e = e == null ? void 0 : e.sort((o2, s) => o2.localeCompare(s));
  const r2 = e.map((o2) => ({ [`${t}/${o2}`]: [n2] }));
  return Object.assign({}, ...r2);
}
function Ne(t) {
  return bt(t), `urn:recap:${Gr(t).replace(/=/g, "")}`;
}
function Lt(t) {
  const e = Zr(t.replace("urn:recap:", ""));
  return bt(e), e;
}
function Ef(t, e, n2) {
  const r2 = Wr(t, e, n2);
  return Ne(r2);
}
function pn(t) {
  return t && t.includes("urn:recap:");
}
function Bf(t, e) {
  const n2 = Lt(t), r2 = Lt(e), o2 = Xr(n2, r2);
  return Ne(o2);
}
function Xr(t, e) {
  bt(t), bt(e);
  const n2 = Object.keys(t.att).concat(Object.keys(e.att)).sort((o2, s) => o2.localeCompare(s)), r2 = { att: {} };
  return n2.forEach((o2) => {
    var s, i3;
    Object.keys(((s = t.att) == null ? void 0 : s[o2]) || {}).concat(Object.keys(((i3 = e.att) == null ? void 0 : i3[o2]) || {})).sort((f5, a2) => f5.localeCompare(a2)).forEach((f5) => {
      var a2, l3;
      r2.att[o2] = Dr(ln({}, r2.att[o2]), { [f5]: ((a2 = t.att[o2]) == null ? void 0 : a2[f5]) || ((l3 = e.att[o2]) == null ? void 0 : l3[f5]) });
    });
  }), r2;
}
function gn(t = "", e) {
  bt(e);
  const n2 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t.includes(n2)) return t;
  const r2 = [];
  let o2 = 0;
  Object.keys(e.att).forEach((f5) => {
    const a2 = Object.keys(e.att[f5]).map((u2) => ({ ability: u2.split("/")[0], action: u2.split("/")[1] }));
    a2.sort((u2, h3) => u2.action.localeCompare(h3.action));
    const l3 = {};
    a2.forEach((u2) => {
      l3[u2.ability] || (l3[u2.ability] = []), l3[u2.ability].push(u2.action);
    });
    const c4 = Object.keys(l3).map((u2) => (o2++, `(${o2}) '${u2}': '${l3[u2].join("', '")}' for '${f5}'.`));
    r2.push(c4.join(", ").replace(".,", "."));
  });
  const s = r2.join(" "), i3 = `${n2}${s}`;
  return `${t ? t + " " : ""}${i3}`;
}
function If(t) {
  var e;
  const n2 = Lt(t);
  bt(n2);
  const r2 = (e = n2.att) == null ? void 0 : e.eip155;
  return r2 ? Object.keys(r2).map((o2) => o2.split("/")[1]) : [];
}
function Af(t) {
  const e = Lt(t);
  bt(e);
  const n2 = [];
  return Object.values(e.att).forEach((r2) => {
    Object.values(r2).forEach((o2) => {
      var s;
      (s = o2 == null ? void 0 : o2[0]) != null && s.chains && n2.push(o2[0].chains);
    });
  }), [...new Set(n2.flat())];
}
function Oe(t) {
  if (!t) return;
  const e = t == null ? void 0 : t[t.length - 1];
  return pn(e) ? e : void 0;
}
function Qr(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function bn(t) {
  if (typeof t != "boolean") throw new Error(`boolean expected, not ${t}`);
}
function yn(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function nt(t, ...e) {
  if (!Qr(t)) throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function to(t, e = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function Sf(t, e) {
  nt(t);
  const n2 = e.outputLen;
  if (t.length < n2) throw new Error("digestInto() expects output buffer of length at least " + n2);
}
function jt(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function Wt(...t) {
  for (let e = 0; e < t.length; e++) t[e].fill(0);
}
function Nf(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
var Of = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Uf(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function mn(t) {
  if (typeof t == "string") t = Uf(t);
  else if (Qr(t)) t = wn(t);
  else throw new Error("Uint8Array expected, got " + typeof t);
  return t;
}
function _f(t, e) {
  if (e == null || typeof e != "object") throw new Error("options must be defined");
  return Object.assign(t, e);
}
function Tf(t, e) {
  if (t.length !== e.length) return false;
  let n2 = 0;
  for (let r2 = 0; r2 < t.length; r2++) n2 |= t[r2] ^ e[r2];
  return n2 === 0;
}
var Rf = (t, e) => {
  function n2(r2, ...o2) {
    if (nt(r2), !Of) throw new Error("Non little-endian hardware is not yet supported");
    if (t.nonceLength !== void 0) {
      const c4 = o2[0];
      if (!c4) throw new Error("nonce / iv required");
      t.varSizeNonce ? nt(c4) : nt(c4, t.nonceLength);
    }
    const s = t.tagLength;
    s && o2[1] !== void 0 && nt(o2[1]);
    const i3 = e(r2, ...o2), f5 = (c4, u2) => {
      if (u2 !== void 0) {
        if (c4 !== 2) throw new Error("cipher output not supported");
        nt(u2);
      }
    };
    let a2 = false;
    return { encrypt(c4, u2) {
      if (a2) throw new Error("cannot encrypt() twice with same key + nonce");
      return a2 = true, nt(c4), f5(i3.encrypt.length, u2), i3.encrypt(c4, u2);
    }, decrypt(c4, u2) {
      if (nt(c4), s && c4.length < s) throw new Error("invalid ciphertext length: smaller than tagLength=" + s);
      return f5(i3.decrypt.length, u2), i3.decrypt(c4, u2);
    } };
  }
  return Object.assign(n2, t), n2;
};
function eo(t, e, n2 = true) {
  if (e === void 0) return new Uint8Array(t);
  if (e.length !== t) throw new Error("invalid output length, expected " + t + ", got: " + e.length);
  if (n2 && !Cf(e)) throw new Error("invalid output, must be aligned");
  return e;
}
function no(t, e, n2, r2) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e, n2, r2);
  const o2 = BigInt(32), s = BigInt(4294967295), i3 = Number(n2 >> o2 & s), f5 = Number(n2 & s), a2 = r2 ? 4 : 0, l3 = r2 ? 0 : 4;
  t.setUint32(e + a2, i3, r2), t.setUint32(e + l3, f5, r2);
}
function $f(t, e, n2) {
  bn(n2);
  const r2 = new Uint8Array(16), o2 = Nf(r2);
  return no(o2, 0, BigInt(e), n2), no(o2, 8, BigInt(t), n2), r2;
}
function Cf(t) {
  return t.byteOffset % 4 === 0;
}
function wn(t) {
  return Uint8Array.from(t);
}
var ro = (t) => Uint8Array.from(t.split("").map((e) => e.charCodeAt(0)));
var Lf = ro("expand 16-byte k");
var jf = ro("expand 32-byte k");
var kf = jt(Lf);
var Pf = jt(jf);
function D(t, e) {
  return t << e | t >>> 32 - e;
}
function xn(t) {
  return t.byteOffset % 4 === 0;
}
var Ue = 64;
var Hf = 16;
var oo = 2 ** 32 - 1;
var so = new Uint32Array();
function Df(t, e, n2, r2, o2, s, i3, f5) {
  const a2 = o2.length, l3 = new Uint8Array(Ue), c4 = jt(l3), u2 = xn(o2) && xn(s), h3 = u2 ? jt(o2) : so, g2 = u2 ? jt(s) : so;
  for (let w = 0; w < a2; i3++) {
    if (t(e, n2, r2, c4, i3, f5), i3 >= oo) throw new Error("arx: counter overflow");
    const y4 = Math.min(Ue, a2 - w);
    if (u2 && y4 === Ue) {
      const x3 = w / 4;
      if (w % 4 !== 0) throw new Error("arx: invalid block position");
      for (let R4 = 0, M4; R4 < Hf; R4++) M4 = x3 + R4, g2[M4] = h3[M4] ^ c4[R4];
      w += Ue;
      continue;
    }
    for (let x3 = 0, R4; x3 < y4; x3++) R4 = w + x3, s[R4] = o2[R4] ^ l3[x3];
    w += y4;
  }
}
function Mf(t, e) {
  const { allowShortKeys: n2, extendNonceFn: r2, counterLength: o2, counterRight: s, rounds: i3 } = _f({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e);
  if (typeof t != "function") throw new Error("core must be a function");
  return yn(o2), yn(i3), bn(s), bn(n2), (f5, a2, l3, c4, u2 = 0) => {
    nt(f5), nt(a2), nt(l3);
    const h3 = l3.length;
    if (c4 === void 0 && (c4 = new Uint8Array(h3)), nt(c4), yn(u2), u2 < 0 || u2 >= oo) throw new Error("arx: counter overflow");
    if (c4.length < h3) throw new Error(`arx: output (${c4.length}) is shorter than data (${h3})`);
    const g2 = [];
    let w = f5.length, y4, x3;
    if (w === 32) g2.push(y4 = wn(f5)), x3 = Pf;
    else if (w === 16 && n2) y4 = new Uint8Array(32), y4.set(f5), y4.set(f5, 16), x3 = kf, g2.push(y4);
    else throw new Error(`arx: invalid 32-byte key, got length=${w}`);
    xn(a2) || g2.push(a2 = wn(a2));
    const R4 = jt(y4);
    if (r2) {
      if (a2.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r2(x3, R4, jt(a2.subarray(0, 16)), R4), a2 = a2.subarray(16);
    }
    const M4 = 16 - o2;
    if (M4 !== a2.length) throw new Error(`arx: nonce must be ${M4} or 16 bytes`);
    if (M4 !== 12) {
      const V4 = new Uint8Array(12);
      V4.set(a2, s ? 0 : 12 - a2.length), a2 = V4, g2.push(a2);
    }
    const L = jt(a2);
    return Df(t, x3, R4, L, l3, c4, u2, i3), Wt(...g2), c4;
  };
}
var G = (t, e) => t[e++] & 255 | (t[e++] & 255) << 8;
var Vf = class {
  constructor(e) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e = mn(e), nt(e, 32);
    const n2 = G(e, 0), r2 = G(e, 2), o2 = G(e, 4), s = G(e, 6), i3 = G(e, 8), f5 = G(e, 10), a2 = G(e, 12), l3 = G(e, 14);
    this.r[0] = n2 & 8191, this.r[1] = (n2 >>> 13 | r2 << 3) & 8191, this.r[2] = (r2 >>> 10 | o2 << 6) & 7939, this.r[3] = (o2 >>> 7 | s << 9) & 8191, this.r[4] = (s >>> 4 | i3 << 12) & 255, this.r[5] = i3 >>> 1 & 8190, this.r[6] = (i3 >>> 14 | f5 << 2) & 8191, this.r[7] = (f5 >>> 11 | a2 << 5) & 8065, this.r[8] = (a2 >>> 8 | l3 << 8) & 8191, this.r[9] = l3 >>> 5 & 127;
    for (let c4 = 0; c4 < 8; c4++) this.pad[c4] = G(e, 16 + 2 * c4);
  }
  process(e, n2, r2 = false) {
    const o2 = r2 ? 0 : 2048, { h: s, r: i3 } = this, f5 = i3[0], a2 = i3[1], l3 = i3[2], c4 = i3[3], u2 = i3[4], h3 = i3[5], g2 = i3[6], w = i3[7], y4 = i3[8], x3 = i3[9], R4 = G(e, n2 + 0), M4 = G(e, n2 + 2), L = G(e, n2 + 4), V4 = G(e, n2 + 6), _2 = G(e, n2 + 8), k4 = G(e, n2 + 10), j2 = G(e, n2 + 12), $2 = G(e, n2 + 14);
    let d3 = s[0] + (R4 & 8191), m2 = s[1] + ((R4 >>> 13 | M4 << 3) & 8191), p2 = s[2] + ((M4 >>> 10 | L << 6) & 8191), b2 = s[3] + ((L >>> 7 | V4 << 9) & 8191), v3 = s[4] + ((V4 >>> 4 | _2 << 12) & 8191), B2 = s[5] + (_2 >>> 1 & 8191), E3 = s[6] + ((_2 >>> 14 | k4 << 2) & 8191), I2 = s[7] + ((k4 >>> 11 | j2 << 5) & 8191), S2 = s[8] + ((j2 >>> 8 | $2 << 8) & 8191), O4 = s[9] + ($2 >>> 5 | o2), A3 = 0, T2 = A3 + d3 * f5 + m2 * (5 * x3) + p2 * (5 * y4) + b2 * (5 * w) + v3 * (5 * g2);
    A3 = T2 >>> 13, T2 &= 8191, T2 += B2 * (5 * h3) + E3 * (5 * u2) + I2 * (5 * c4) + S2 * (5 * l3) + O4 * (5 * a2), A3 += T2 >>> 13, T2 &= 8191;
    let U3 = A3 + d3 * a2 + m2 * f5 + p2 * (5 * x3) + b2 * (5 * y4) + v3 * (5 * w);
    A3 = U3 >>> 13, U3 &= 8191, U3 += B2 * (5 * g2) + E3 * (5 * h3) + I2 * (5 * u2) + S2 * (5 * c4) + O4 * (5 * l3), A3 += U3 >>> 13, U3 &= 8191;
    let C3 = A3 + d3 * l3 + m2 * a2 + p2 * f5 + b2 * (5 * x3) + v3 * (5 * y4);
    A3 = C3 >>> 13, C3 &= 8191, C3 += B2 * (5 * w) + E3 * (5 * g2) + I2 * (5 * h3) + S2 * (5 * u2) + O4 * (5 * c4), A3 += C3 >>> 13, C3 &= 8191;
    let H = A3 + d3 * c4 + m2 * l3 + p2 * a2 + b2 * f5 + v3 * (5 * x3);
    A3 = H >>> 13, H &= 8191, H += B2 * (5 * y4) + E3 * (5 * w) + I2 * (5 * g2) + S2 * (5 * h3) + O4 * (5 * u2), A3 += H >>> 13, H &= 8191;
    let q2 = A3 + d3 * u2 + m2 * c4 + p2 * l3 + b2 * a2 + v3 * f5;
    A3 = q2 >>> 13, q2 &= 8191, q2 += B2 * (5 * x3) + E3 * (5 * y4) + I2 * (5 * w) + S2 * (5 * g2) + O4 * (5 * h3), A3 += q2 >>> 13, q2 &= 8191;
    let P4 = A3 + d3 * h3 + m2 * u2 + p2 * c4 + b2 * l3 + v3 * a2;
    A3 = P4 >>> 13, P4 &= 8191, P4 += B2 * f5 + E3 * (5 * x3) + I2 * (5 * y4) + S2 * (5 * w) + O4 * (5 * g2), A3 += P4 >>> 13, P4 &= 8191;
    let K3 = A3 + d3 * g2 + m2 * h3 + p2 * u2 + b2 * c4 + v3 * l3;
    A3 = K3 >>> 13, K3 &= 8191, K3 += B2 * a2 + E3 * f5 + I2 * (5 * x3) + S2 * (5 * y4) + O4 * (5 * w), A3 += K3 >>> 13, K3 &= 8191;
    let et2 = A3 + d3 * w + m2 * g2 + p2 * h3 + b2 * u2 + v3 * c4;
    A3 = et2 >>> 13, et2 &= 8191, et2 += B2 * l3 + E3 * a2 + I2 * f5 + S2 * (5 * x3) + O4 * (5 * y4), A3 += et2 >>> 13, et2 &= 8191;
    let Z = A3 + d3 * y4 + m2 * w + p2 * g2 + b2 * h3 + v3 * u2;
    A3 = Z >>> 13, Z &= 8191, Z += B2 * c4 + E3 * l3 + I2 * a2 + S2 * f5 + O4 * (5 * x3), A3 += Z >>> 13, Z &= 8191;
    let z3 = A3 + d3 * x3 + m2 * y4 + p2 * w + b2 * g2 + v3 * h3;
    A3 = z3 >>> 13, z3 &= 8191, z3 += B2 * u2 + E3 * c4 + I2 * l3 + S2 * a2 + O4 * f5, A3 += z3 >>> 13, z3 &= 8191, A3 = (A3 << 2) + A3 | 0, A3 = A3 + T2 | 0, T2 = A3 & 8191, A3 = A3 >>> 13, U3 += A3, s[0] = T2, s[1] = U3, s[2] = C3, s[3] = H, s[4] = q2, s[5] = P4, s[6] = K3, s[7] = et2, s[8] = Z, s[9] = z3;
  }
  finalize() {
    const { h: e, pad: n2 } = this, r2 = new Uint16Array(10);
    let o2 = e[1] >>> 13;
    e[1] &= 8191;
    for (let f5 = 2; f5 < 10; f5++) e[f5] += o2, o2 = e[f5] >>> 13, e[f5] &= 8191;
    e[0] += o2 * 5, o2 = e[0] >>> 13, e[0] &= 8191, e[1] += o2, o2 = e[1] >>> 13, e[1] &= 8191, e[2] += o2, r2[0] = e[0] + 5, o2 = r2[0] >>> 13, r2[0] &= 8191;
    for (let f5 = 1; f5 < 10; f5++) r2[f5] = e[f5] + o2, o2 = r2[f5] >>> 13, r2[f5] &= 8191;
    r2[9] -= 8192;
    let s = (o2 ^ 1) - 1;
    for (let f5 = 0; f5 < 10; f5++) r2[f5] &= s;
    s = ~s;
    for (let f5 = 0; f5 < 10; f5++) e[f5] = e[f5] & s | r2[f5];
    e[0] = (e[0] | e[1] << 13) & 65535, e[1] = (e[1] >>> 3 | e[2] << 10) & 65535, e[2] = (e[2] >>> 6 | e[3] << 7) & 65535, e[3] = (e[3] >>> 9 | e[4] << 4) & 65535, e[4] = (e[4] >>> 12 | e[5] << 1 | e[6] << 14) & 65535, e[5] = (e[6] >>> 2 | e[7] << 11) & 65535, e[6] = (e[7] >>> 5 | e[8] << 8) & 65535, e[7] = (e[8] >>> 8 | e[9] << 5) & 65535;
    let i3 = e[0] + n2[0];
    e[0] = i3 & 65535;
    for (let f5 = 1; f5 < 8; f5++) i3 = (e[f5] + n2[f5] | 0) + (i3 >>> 16) | 0, e[f5] = i3 & 65535;
    Wt(r2);
  }
  update(e) {
    to(this), e = mn(e), nt(e);
    const { buffer: n2, blockLen: r2 } = this, o2 = e.length;
    for (let s = 0; s < o2; ) {
      const i3 = Math.min(r2 - this.pos, o2 - s);
      if (i3 === r2) {
        for (; r2 <= o2 - s; s += r2) this.process(e, s);
        continue;
      }
      n2.set(e.subarray(s, s + i3), this.pos), this.pos += i3, s += i3, this.pos === r2 && (this.process(n2, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Wt(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e) {
    to(this), Sf(e, this), this.finished = true;
    const { buffer: n2, h: r2 } = this;
    let { pos: o2 } = this;
    if (o2) {
      for (n2[o2++] = 1; o2 < 16; o2++) n2[o2] = 0;
      this.process(n2, 0, true);
    }
    this.finalize();
    let s = 0;
    for (let i3 = 0; i3 < 8; i3++) e[s++] = r2[i3] >>> 0, e[s++] = r2[i3] >>> 8;
    return e;
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
};
function qf(t) {
  const e = (r2, o2) => t(o2).update(mn(r2)).digest(), n2 = t(new Uint8Array(32));
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = (r2) => t(r2), e;
}
var Kf = qf((t) => new Vf(t));
function Ff(t, e, n2, r2, o2, s = 20) {
  let i3 = t[0], f5 = t[1], a2 = t[2], l3 = t[3], c4 = e[0], u2 = e[1], h3 = e[2], g2 = e[3], w = e[4], y4 = e[5], x3 = e[6], R4 = e[7], M4 = o2, L = n2[0], V4 = n2[1], _2 = n2[2], k4 = i3, j2 = f5, $2 = a2, d3 = l3, m2 = c4, p2 = u2, b2 = h3, v3 = g2, B2 = w, E3 = y4, I2 = x3, S2 = R4, O4 = M4, A3 = L, T2 = V4, U3 = _2;
  for (let H = 0; H < s; H += 2) k4 = k4 + m2 | 0, O4 = D(O4 ^ k4, 16), B2 = B2 + O4 | 0, m2 = D(m2 ^ B2, 12), k4 = k4 + m2 | 0, O4 = D(O4 ^ k4, 8), B2 = B2 + O4 | 0, m2 = D(m2 ^ B2, 7), j2 = j2 + p2 | 0, A3 = D(A3 ^ j2, 16), E3 = E3 + A3 | 0, p2 = D(p2 ^ E3, 12), j2 = j2 + p2 | 0, A3 = D(A3 ^ j2, 8), E3 = E3 + A3 | 0, p2 = D(p2 ^ E3, 7), $2 = $2 + b2 | 0, T2 = D(T2 ^ $2, 16), I2 = I2 + T2 | 0, b2 = D(b2 ^ I2, 12), $2 = $2 + b2 | 0, T2 = D(T2 ^ $2, 8), I2 = I2 + T2 | 0, b2 = D(b2 ^ I2, 7), d3 = d3 + v3 | 0, U3 = D(U3 ^ d3, 16), S2 = S2 + U3 | 0, v3 = D(v3 ^ S2, 12), d3 = d3 + v3 | 0, U3 = D(U3 ^ d3, 8), S2 = S2 + U3 | 0, v3 = D(v3 ^ S2, 7), k4 = k4 + p2 | 0, U3 = D(U3 ^ k4, 16), I2 = I2 + U3 | 0, p2 = D(p2 ^ I2, 12), k4 = k4 + p2 | 0, U3 = D(U3 ^ k4, 8), I2 = I2 + U3 | 0, p2 = D(p2 ^ I2, 7), j2 = j2 + b2 | 0, O4 = D(O4 ^ j2, 16), S2 = S2 + O4 | 0, b2 = D(b2 ^ S2, 12), j2 = j2 + b2 | 0, O4 = D(O4 ^ j2, 8), S2 = S2 + O4 | 0, b2 = D(b2 ^ S2, 7), $2 = $2 + v3 | 0, A3 = D(A3 ^ $2, 16), B2 = B2 + A3 | 0, v3 = D(v3 ^ B2, 12), $2 = $2 + v3 | 0, A3 = D(A3 ^ $2, 8), B2 = B2 + A3 | 0, v3 = D(v3 ^ B2, 7), d3 = d3 + m2 | 0, T2 = D(T2 ^ d3, 16), E3 = E3 + T2 | 0, m2 = D(m2 ^ E3, 12), d3 = d3 + m2 | 0, T2 = D(T2 ^ d3, 8), E3 = E3 + T2 | 0, m2 = D(m2 ^ E3, 7);
  let C3 = 0;
  r2[C3++] = i3 + k4 | 0, r2[C3++] = f5 + j2 | 0, r2[C3++] = a2 + $2 | 0, r2[C3++] = l3 + d3 | 0, r2[C3++] = c4 + m2 | 0, r2[C3++] = u2 + p2 | 0, r2[C3++] = h3 + b2 | 0, r2[C3++] = g2 + v3 | 0, r2[C3++] = w + B2 | 0, r2[C3++] = y4 + E3 | 0, r2[C3++] = x3 + I2 | 0, r2[C3++] = R4 + S2 | 0, r2[C3++] = M4 + O4 | 0, r2[C3++] = L + A3 | 0, r2[C3++] = V4 + T2 | 0, r2[C3++] = _2 + U3 | 0;
}
var zf = Mf(Ff, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Gf = new Uint8Array(16);
var io = (t, e) => {
  t.update(e);
  const n2 = e.length % 16;
  n2 && t.update(Gf.subarray(n2));
};
var Zf = new Uint8Array(32);
function fo(t, e, n2, r2, o2) {
  const s = t(e, n2, Zf), i3 = Kf.create(s);
  o2 && io(i3, o2), io(i3, r2);
  const f5 = $f(r2.length, o2 ? o2.length : 0, true);
  i3.update(f5);
  const a2 = i3.digest();
  return Wt(s, f5), a2;
}
var Wf = (t) => (e, n2, r2) => ({ encrypt(s, i3) {
  const f5 = s.length;
  i3 = eo(f5 + 16, i3, false), i3.set(s);
  const a2 = i3.subarray(0, -16);
  t(e, n2, a2, a2, 1);
  const l3 = fo(t, e, n2, a2, r2);
  return i3.set(l3, f5), Wt(l3), i3;
}, decrypt(s, i3) {
  i3 = eo(s.length - 16, i3, false);
  const f5 = s.subarray(0, -16), a2 = s.subarray(-16), l3 = fo(t, e, n2, f5, r2);
  if (!Tf(a2, l3)) throw new Error("invalid tag");
  return i3.set(s.subarray(0, -16)), t(e, n2, i3, i3, 1), Wt(l3), i3;
} });
var co = Rf({ blockSize: 64, nonceLength: 12, tagLength: 16 }, Wf(zf));
var ao = class extends Ie {
  constructor(e, n2) {
    super(), this.finished = false, this.destroyed = false, rn(e);
    const r2 = ht(n2);
    if (this.iHash = e.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o2 = this.blockLen, s = new Uint8Array(o2);
    s.set(r2.length > o2 ? e.create().update(r2).digest() : r2);
    for (let i3 = 0; i3 < s.length; i3++) s[i3] ^= 54;
    this.iHash.update(s), this.oHash = e.create();
    for (let i3 = 0; i3 < s.length; i3++) s[i3] ^= 106;
    this.oHash.update(s), ut(s);
  }
  update(e) {
    return Nt(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    Nt(this), at(e, this.outputLen), this.finished = true, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n2, iHash: r2, finished: o2, destroyed: s, blockLen: i3, outputLen: f5 } = this;
    return e = e, e.finished = o2, e.destroyed = s, e.blockLen = i3, e.outputLen = f5, e.oHash = n2._cloneInto(e.oHash), e.iHash = r2._cloneInto(e.iHash), e;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var _e = (t, e, n2) => new ao(t, e).update(n2).digest();
_e.create = (t, e) => new ao(t, e);
function Yf(t, e, n2) {
  return rn(t), n2 === void 0 && (n2 = new Uint8Array(t.outputLen)), _e(t, ht(n2), ht(e));
}
var vn = Uint8Array.from([0]);
var uo = Uint8Array.of();
function Xf(t, e, n2, r2 = 32) {
  rn(t), mt(r2);
  const o2 = t.outputLen;
  if (r2 > 255 * o2) throw new Error("Length should be <= 255*HashLen");
  const s = Math.ceil(r2 / o2);
  n2 === void 0 && (n2 = uo);
  const i3 = new Uint8Array(s * o2), f5 = _e.create(t, e), a2 = f5._cloneInto(), l3 = new Uint8Array(f5.outputLen);
  for (let c4 = 0; c4 < s; c4++) vn[0] = c4 + 1, a2.update(c4 === 0 ? uo : l3).update(n2).update(vn).digestInto(l3), i3.set(l3, o2 * c4), f5._cloneInto(a2);
  return f5.destroy(), a2.destroy(), ut(l3, vn), i3.slice(0, r2);
}
var Jf = (t, e, n2, r2, o2) => Xf(t, Yf(t, e, n2), r2, o2);
var Te = Ae;
var En = BigInt(0);
var Bn = BigInt(1);
function Re(t, e) {
  if (typeof e != "boolean") throw new Error(t + " boolean expected, got " + e);
}
function $e(t) {
  const e = t.toString(16);
  return e.length & 1 ? "0" + e : e;
}
function lo(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? En : BigInt("0x" + t);
}
function Ce(t) {
  return lo(ce(t));
}
function Le(t) {
  return at(t), lo(ce(Uint8Array.from(t).reverse()));
}
function In(t, e) {
  return fn(t.toString(16).padStart(e * 2, "0"));
}
function An(t, e) {
  return In(t, e).reverse();
}
function rt(t, e, n2) {
  let r2;
  if (typeof e == "string") try {
    r2 = fn(e);
  } catch (s) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + s);
  }
  else if (nn(e)) r2 = Uint8Array.from(e);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o2 = r2.length;
  if (typeof n2 == "number" && o2 !== n2) throw new Error(t + " of length " + n2 + " expected, got " + o2);
  return r2;
}
var Sn = (t) => typeof t == "bigint" && En <= t;
function Qf(t, e, n2) {
  return Sn(t) && Sn(e) && Sn(n2) && e <= t && t < n2;
}
function Nn(t, e, n2, r2) {
  if (!Qf(e, n2, r2)) throw new Error("expected valid " + t + ": " + n2 + " <= n < " + r2 + ", got " + e);
}
function tc(t) {
  let e;
  for (e = 0; t > En; t >>= Bn, e += 1) ;
  return e;
}
var je = (t) => (Bn << BigInt(t)) - Bn;
function ec(t, e, n2) {
  if (typeof t != "number" || t < 2) throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2) throw new Error("qByteLen must be a number");
  if (typeof n2 != "function") throw new Error("hmacFn must be a function");
  const r2 = (g2) => new Uint8Array(g2), o2 = (g2) => Uint8Array.of(g2);
  let s = r2(t), i3 = r2(t), f5 = 0;
  const a2 = () => {
    s.fill(1), i3.fill(0), f5 = 0;
  }, l3 = (...g2) => n2(i3, s, ...g2), c4 = (g2 = r2(0)) => {
    i3 = l3(o2(0), g2), s = l3(), g2.length !== 0 && (i3 = l3(o2(1), g2), s = l3());
  }, u2 = () => {
    if (f5++ >= 1e3) throw new Error("drbg: tried 1000 values");
    let g2 = 0;
    const w = [];
    for (; g2 < e; ) {
      s = l3();
      const y4 = s.slice();
      w.push(y4), g2 += s.length;
    }
    return Ht(...w);
  };
  return (g2, w) => {
    a2(), c4(g2);
    let y4;
    for (; !(y4 = w(u2())); ) c4();
    return a2(), y4;
  };
}
function ke(t, e, n2 = {}) {
  if (!t || typeof t != "object") throw new Error("expected valid options object");
  function r2(o2, s, i3) {
    const f5 = t[o2];
    if (i3 && f5 === void 0) return;
    const a2 = typeof f5;
    if (a2 !== s || f5 === null) throw new Error(`param "${o2}" is invalid: expected ${s}, got ${a2}`);
  }
  Object.entries(e).forEach(([o2, s]) => r2(o2, s, false)), Object.entries(n2).forEach(([o2, s]) => r2(o2, s, true));
}
function ho(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return (n2, ...r2) => {
    const o2 = e.get(n2);
    if (o2 !== void 0) return o2;
    const s = t(n2, ...r2);
    return e.set(n2, s), s;
  };
}
var ot = BigInt(0);
var Q = BigInt(1);
var Dt = BigInt(2);
var nc = BigInt(3);
var po = BigInt(4);
var go = BigInt(5);
var bo = BigInt(8);
function lt(t, e) {
  const n2 = t % e;
  return n2 >= ot ? n2 : e + n2;
}
function pt(t, e, n2) {
  let r2 = t;
  for (; e-- > ot; ) r2 *= r2, r2 %= n2;
  return r2;
}
function yo(t, e) {
  if (t === ot) throw new Error("invert: expected non-zero number");
  if (e <= ot) throw new Error("invert: expected positive modulus, got " + e);
  let n2 = lt(t, e), r2 = e, o2 = ot, s = Q;
  for (; n2 !== ot; ) {
    const f5 = r2 / n2, a2 = r2 % n2, l3 = o2 - s * f5;
    r2 = n2, n2 = a2, o2 = s, s = l3;
  }
  if (r2 !== Q) throw new Error("invert: does not exist");
  return lt(o2, e);
}
function mo(t, e) {
  const n2 = (t.ORDER + Q) / po, r2 = t.pow(e, n2);
  if (!t.eql(t.sqr(r2), e)) throw new Error("Cannot find square root");
  return r2;
}
function rc(t, e) {
  const n2 = (t.ORDER - go) / bo, r2 = t.mul(e, Dt), o2 = t.pow(r2, n2), s = t.mul(e, o2), i3 = t.mul(t.mul(s, Dt), o2), f5 = t.mul(s, t.sub(i3, t.ONE));
  if (!t.eql(t.sqr(f5), e)) throw new Error("Cannot find square root");
  return f5;
}
function oc(t) {
  if (t < BigInt(3)) throw new Error("sqrt is not defined for small field");
  let e = t - Q, n2 = 0;
  for (; e % Dt === ot; ) e /= Dt, n2++;
  let r2 = Dt;
  const o2 = Yt(t);
  for (; xo(o2, r2) === 1; ) if (r2++ > 1e3) throw new Error("Cannot find square root: probably non-prime P");
  if (n2 === 1) return mo;
  let s = o2.pow(r2, e);
  const i3 = (e + Q) / Dt;
  return function(a2, l3) {
    if (a2.is0(l3)) return l3;
    if (xo(a2, l3) !== 1) throw new Error("Cannot find square root");
    let c4 = n2, u2 = a2.mul(a2.ONE, s), h3 = a2.pow(l3, e), g2 = a2.pow(l3, i3);
    for (; !a2.eql(h3, a2.ONE); ) {
      if (a2.is0(h3)) return a2.ZERO;
      let w = 1, y4 = a2.sqr(h3);
      for (; !a2.eql(y4, a2.ONE); ) if (w++, y4 = a2.sqr(y4), w === c4) throw new Error("Cannot find square root");
      const x3 = Q << BigInt(c4 - w - 1), R4 = a2.pow(u2, x3);
      c4 = w, u2 = a2.sqr(R4), h3 = a2.mul(h3, u2), g2 = a2.mul(g2, R4);
    }
    return g2;
  };
}
function sc(t) {
  return t % po === nc ? mo : t % bo === go ? rc : oc(t);
}
var ic = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function fc(t) {
  const e = { ORDER: "bigint", MASK: "bigint", BYTES: "number", BITS: "number" }, n2 = ic.reduce((r2, o2) => (r2[o2] = "function", r2), e);
  return ke(t, n2), t;
}
function cc(t, e, n2) {
  if (n2 < ot) throw new Error("invalid exponent, negatives unsupported");
  if (n2 === ot) return t.ONE;
  if (n2 === Q) return e;
  let r2 = t.ONE, o2 = e;
  for (; n2 > ot; ) n2 & Q && (r2 = t.mul(r2, o2)), o2 = t.sqr(o2), n2 >>= Q;
  return r2;
}
function wo(t, e, n2 = false) {
  const r2 = new Array(e.length).fill(n2 ? t.ZERO : void 0), o2 = e.reduce((i3, f5, a2) => t.is0(f5) ? i3 : (r2[a2] = i3, t.mul(i3, f5)), t.ONE), s = t.inv(o2);
  return e.reduceRight((i3, f5, a2) => t.is0(f5) ? i3 : (r2[a2] = t.mul(i3, r2[a2]), t.mul(i3, f5)), s), r2;
}
function xo(t, e) {
  const n2 = (t.ORDER - Q) / Dt, r2 = t.pow(e, n2), o2 = t.eql(r2, t.ONE), s = t.eql(r2, t.ZERO), i3 = t.eql(r2, t.neg(t.ONE));
  if (!o2 && !s && !i3) throw new Error("invalid Legendre symbol result");
  return o2 ? 1 : s ? 0 : -1;
}
function ac(t, e) {
  e !== void 0 && mt(e);
  const n2 = e !== void 0 ? e : t.toString(2).length, r2 = Math.ceil(n2 / 8);
  return { nBitLength: n2, nByteLength: r2 };
}
function Yt(t, e, n2 = false, r2 = {}) {
  if (t <= ot) throw new Error("invalid field: expected ORDER > 0, got " + t);
  let o2, s;
  if (typeof e == "object" && e != null) {
    if (r2.sqrt || n2) throw new Error("cannot specify opts in two arguments");
    const c4 = e;
    c4.BITS && (o2 = c4.BITS), c4.sqrt && (s = c4.sqrt), typeof c4.isLE == "boolean" && (n2 = c4.isLE);
  } else typeof e == "number" && (o2 = e), r2.sqrt && (s = r2.sqrt);
  const { nBitLength: i3, nByteLength: f5 } = ac(t, o2);
  if (f5 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a2;
  const l3 = Object.freeze({ ORDER: t, isLE: n2, BITS: i3, BYTES: f5, MASK: je(i3), ZERO: ot, ONE: Q, create: (c4) => lt(c4, t), isValid: (c4) => {
    if (typeof c4 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof c4);
    return ot <= c4 && c4 < t;
  }, is0: (c4) => c4 === ot, isValidNot0: (c4) => !l3.is0(c4) && l3.isValid(c4), isOdd: (c4) => (c4 & Q) === Q, neg: (c4) => lt(-c4, t), eql: (c4, u2) => c4 === u2, sqr: (c4) => lt(c4 * c4, t), add: (c4, u2) => lt(c4 + u2, t), sub: (c4, u2) => lt(c4 - u2, t), mul: (c4, u2) => lt(c4 * u2, t), pow: (c4, u2) => cc(l3, c4, u2), div: (c4, u2) => lt(c4 * yo(u2, t), t), sqrN: (c4) => c4 * c4, addN: (c4, u2) => c4 + u2, subN: (c4, u2) => c4 - u2, mulN: (c4, u2) => c4 * u2, inv: (c4) => yo(c4, t), sqrt: s || ((c4) => (a2 || (a2 = sc(t)), a2(l3, c4))), toBytes: (c4) => n2 ? An(c4, f5) : In(c4, f5), fromBytes: (c4) => {
    if (c4.length !== f5) throw new Error("Field.fromBytes: expected " + f5 + " bytes, got " + c4.length);
    return n2 ? Le(c4) : Ce(c4);
  }, invertBatch: (c4) => wo(l3, c4), cmov: (c4, u2, h3) => h3 ? u2 : c4 });
  return Object.freeze(l3);
}
function vo(t) {
  if (typeof t != "bigint") throw new Error("field order must be bigint");
  const e = t.toString(2).length;
  return Math.ceil(e / 8);
}
function Eo(t) {
  const e = vo(t);
  return e + Math.ceil(e / 2);
}
function uc(t, e, n2 = false) {
  const r2 = t.length, o2 = vo(e), s = Eo(e);
  if (r2 < 16 || r2 < s || r2 > 1024) throw new Error("expected " + s + "-1024 bytes of input, got " + r2);
  const i3 = n2 ? Le(t) : Ce(t), f5 = lt(i3, e - Q) + Q;
  return n2 ? An(f5, o2) : In(f5, o2);
}
var Xt = BigInt(0);
var Mt = BigInt(1);
function le(t, e) {
  const n2 = e.negate();
  return t ? n2 : e;
}
function lc(t, e, n2) {
  const r2 = e === "pz" ? (i3) => i3.pz : (i3) => i3.ez, o2 = wo(t.Fp, n2.map(r2));
  return n2.map((i3, f5) => i3.toAffine(o2[f5])).map(t.fromAffine);
}
function Bo(t, e) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e) throw new Error("invalid window size, expected [1.." + e + "], got W=" + t);
}
function On(t, e) {
  Bo(t, e);
  const n2 = Math.ceil(e / t) + 1, r2 = 2 ** (t - 1), o2 = 2 ** t, s = je(t), i3 = BigInt(t);
  return { windows: n2, windowSize: r2, mask: s, maxNumber: o2, shiftBy: i3 };
}
function Io(t, e, n2) {
  const { windowSize: r2, mask: o2, maxNumber: s, shiftBy: i3 } = n2;
  let f5 = Number(t & o2), a2 = t >> i3;
  f5 > r2 && (f5 -= s, a2 += Mt);
  const l3 = e * r2, c4 = l3 + Math.abs(f5) - 1, u2 = f5 === 0, h3 = f5 < 0, g2 = e % 2 !== 0;
  return { nextN: a2, offset: c4, isZero: u2, isNeg: h3, isNegF: g2, offsetF: l3 };
}
function dc(t, e) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n2, r2) => {
    if (!(n2 instanceof e)) throw new Error("invalid point at index " + r2);
  });
}
function hc(t, e) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n2, r2) => {
    if (!e.isValid(n2)) throw new Error("invalid scalar at index " + r2);
  });
}
var Un = /* @__PURE__ */ new WeakMap();
var Ao = /* @__PURE__ */ new WeakMap();
function _n(t) {
  return Ao.get(t) || 1;
}
function So(t) {
  if (t !== Xt) throw new Error("invalid wNAF");
}
function pc(t, e) {
  return { constTimeNegate: le, hasPrecomputes(n2) {
    return _n(n2) !== 1;
  }, unsafeLadder(n2, r2, o2 = t.ZERO) {
    let s = n2;
    for (; r2 > Xt; ) r2 & Mt && (o2 = o2.add(s)), s = s.double(), r2 >>= Mt;
    return o2;
  }, precomputeWindow(n2, r2) {
    const { windows: o2, windowSize: s } = On(r2, e), i3 = [];
    let f5 = n2, a2 = f5;
    for (let l3 = 0; l3 < o2; l3++) {
      a2 = f5, i3.push(a2);
      for (let c4 = 1; c4 < s; c4++) a2 = a2.add(f5), i3.push(a2);
      f5 = a2.double();
    }
    return i3;
  }, wNAF(n2, r2, o2) {
    let s = t.ZERO, i3 = t.BASE;
    const f5 = On(n2, e);
    for (let a2 = 0; a2 < f5.windows; a2++) {
      const { nextN: l3, offset: c4, isZero: u2, isNeg: h3, isNegF: g2, offsetF: w } = Io(o2, a2, f5);
      o2 = l3, u2 ? i3 = i3.add(le(g2, r2[w])) : s = s.add(le(h3, r2[c4]));
    }
    return So(o2), { p: s, f: i3 };
  }, wNAFUnsafe(n2, r2, o2, s = t.ZERO) {
    const i3 = On(n2, e);
    for (let f5 = 0; f5 < i3.windows && o2 !== Xt; f5++) {
      const { nextN: a2, offset: l3, isZero: c4, isNeg: u2 } = Io(o2, f5, i3);
      if (o2 = a2, !c4) {
        const h3 = r2[l3];
        s = s.add(u2 ? h3.negate() : h3);
      }
    }
    return So(o2), s;
  }, getPrecomputes(n2, r2, o2) {
    let s = Un.get(r2);
    return s || (s = this.precomputeWindow(r2, n2), n2 !== 1 && (typeof o2 == "function" && (s = o2(s)), Un.set(r2, s))), s;
  }, wNAFCached(n2, r2, o2) {
    const s = _n(n2);
    return this.wNAF(s, this.getPrecomputes(s, n2, o2), r2);
  }, wNAFCachedUnsafe(n2, r2, o2, s) {
    const i3 = _n(n2);
    return i3 === 1 ? this.unsafeLadder(n2, r2, s) : this.wNAFUnsafe(i3, this.getPrecomputes(i3, n2, o2), r2, s);
  }, setWindowSize(n2, r2) {
    Bo(r2, e), Ao.set(n2, r2), Un.delete(n2);
  } };
}
function gc(t, e, n2, r2) {
  let o2 = e, s = t.ZERO, i3 = t.ZERO;
  for (; n2 > Xt || r2 > Xt; ) n2 & Mt && (s = s.add(o2)), r2 & Mt && (i3 = i3.add(o2)), o2 = o2.double(), n2 >>= Mt, r2 >>= Mt;
  return { p1: s, p2: i3 };
}
function bc(t, e, n2, r2) {
  dc(n2, t), hc(r2, e);
  const o2 = n2.length, s = r2.length;
  if (o2 !== s) throw new Error("arrays of points and scalars must have equal length");
  const i3 = t.ZERO, f5 = tc(BigInt(o2));
  let a2 = 1;
  f5 > 12 ? a2 = f5 - 3 : f5 > 4 ? a2 = f5 - 2 : f5 > 0 && (a2 = 2);
  const l3 = je(a2), c4 = new Array(Number(l3) + 1).fill(i3), u2 = Math.floor((e.BITS - 1) / a2) * a2;
  let h3 = i3;
  for (let g2 = u2; g2 >= 0; g2 -= a2) {
    c4.fill(i3);
    for (let y4 = 0; y4 < s; y4++) {
      const x3 = r2[y4], R4 = Number(x3 >> BigInt(g2) & l3);
      c4[R4] = c4[R4].add(n2[y4]);
    }
    let w = i3;
    for (let y4 = c4.length - 1, x3 = i3; y4 > 0; y4--) x3 = x3.add(c4[y4]), w = w.add(x3);
    if (h3 = h3.add(w), g2 !== 0) for (let y4 = 0; y4 < a2; y4++) h3 = h3.double();
  }
  return h3;
}
function No(t, e) {
  if (e) {
    if (e.ORDER !== t) throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    return fc(e), e;
  } else return Yt(t);
}
function yc(t, e, n2 = {}) {
  if (!e || typeof e != "object") throw new Error(`expected valid ${t} CURVE object`);
  for (const f5 of ["p", "n", "h"]) {
    const a2 = e[f5];
    if (!(typeof a2 == "bigint" && a2 > Xt)) throw new Error(`CURVE.${f5} must be positive bigint`);
  }
  const r2 = No(e.p, n2.Fp), o2 = No(e.n, n2.Fn), i3 = ["Gx", "Gy", "a", t === "weierstrass" ? "b" : "d"];
  for (const f5 of i3) if (!r2.isValid(e[f5])) throw new Error(`CURVE.${f5} must be valid field element of CURVE.Fp`);
  return { Fp: r2, Fn: o2 };
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var de = BigInt(0);
var Jt = BigInt(1);
var Pe = BigInt(2);
function mc(t) {
  return ke(t, { adjustScalarBytes: "function", powPminus2: "function" }), Object.freeze({ ...t });
}
function wc(t) {
  const e = mc(t), { P: n2, type: r2, adjustScalarBytes: o2, powPminus2: s, randomBytes: i3 } = e, f5 = r2 === "x25519";
  if (!f5 && r2 !== "x448") throw new Error("invalid type");
  const a2 = i3 || Zt, l3 = f5 ? 255 : 448, c4 = f5 ? 32 : 56, u2 = BigInt(f5 ? 9 : 5), h3 = BigInt(f5 ? 121665 : 39081), g2 = f5 ? Pe ** BigInt(254) : Pe ** BigInt(447), w = f5 ? BigInt(8) * Pe ** BigInt(251) - Jt : BigInt(4) * Pe ** BigInt(445) - Jt, y4 = g2 + w + Jt, x3 = (d3) => lt(d3, n2), R4 = M4(u2);
  function M4(d3) {
    return An(x3(d3), c4);
  }
  function L(d3) {
    const m2 = rt("u coordinate", d3, c4);
    return f5 && (m2[31] &= 127), x3(Le(m2));
  }
  function V4(d3) {
    return Le(o2(rt("scalar", d3, c4)));
  }
  function _2(d3, m2) {
    const p2 = $2(L(m2), V4(d3));
    if (p2 === de) throw new Error("invalid private or public key received");
    return M4(p2);
  }
  function k4(d3) {
    return _2(d3, R4);
  }
  function j2(d3, m2, p2) {
    const b2 = x3(d3 * (m2 - p2));
    return m2 = x3(m2 - b2), p2 = x3(p2 + b2), { x_2: m2, x_3: p2 };
  }
  function $2(d3, m2) {
    Nn("u", d3, de, n2), Nn("scalar", m2, g2, y4);
    const p2 = m2, b2 = d3;
    let v3 = Jt, B2 = de, E3 = d3, I2 = Jt, S2 = de;
    for (let A3 = BigInt(l3 - 1); A3 >= de; A3--) {
      const T2 = p2 >> A3 & Jt;
      S2 ^= T2, { x_2: v3, x_3: E3 } = j2(S2, v3, E3), { x_2: B2, x_3: I2 } = j2(S2, B2, I2), S2 = T2;
      const U3 = v3 + B2, C3 = x3(U3 * U3), H = v3 - B2, q2 = x3(H * H), P4 = C3 - q2, K3 = E3 + I2, et2 = E3 - I2, Z = x3(et2 * U3), z3 = x3(K3 * H), Ft2 = Z + z3, yt2 = Z - z3;
      E3 = x3(Ft2 * Ft2), I2 = x3(b2 * x3(yt2 * yt2)), v3 = x3(C3 * q2), B2 = x3(P4 * (C3 + x3(h3 * P4)));
    }
    ({ x_2: v3, x_3: E3 } = j2(S2, v3, E3)), { x_2: B2, x_3: I2 } = j2(S2, B2, I2);
    const O4 = s(B2);
    return x3(v3 * O4);
  }
  return { scalarMult: _2, scalarMultBase: k4, getSharedSecret: (d3, m2) => _2(d3, m2), getPublicKey: (d3) => k4(d3), utils: { randomPrivateKey: () => a2(c4) }, GuBytes: R4.slice() };
}
BigInt(0);
var xc = BigInt(1);
var Oo = BigInt(2);
var vc = BigInt(3);
var Ec = BigInt(5);
var Bc = BigInt(8);
var Uo = { p: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed"), n: BigInt("0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed"), h: Bc, a: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec"), d: BigInt("0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3"), Gx: BigInt("0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a"), Gy: BigInt("0x6666666666666666666666666666666666666666666666666666666666666658") };
function Ic(t) {
  const e = BigInt(10), n2 = BigInt(20), r2 = BigInt(40), o2 = BigInt(80), s = Uo.p, f5 = t * t % s * t % s, a2 = pt(f5, Oo, s) * f5 % s, l3 = pt(a2, xc, s) * t % s, c4 = pt(l3, Ec, s) * l3 % s, u2 = pt(c4, e, s) * c4 % s, h3 = pt(u2, n2, s) * u2 % s, g2 = pt(h3, r2, s) * h3 % s, w = pt(g2, o2, s) * g2 % s, y4 = pt(w, o2, s) * g2 % s, x3 = pt(y4, e, s) * c4 % s;
  return { pow_p_5_8: pt(x3, Oo, s) * t % s, b2: f5 };
}
function Ac(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
var Tn = (() => {
  const t = Uo.p;
  return wc({ P: t, type: "x25519", powPminus2: (e) => {
    const { pow_p_5_8: n2, b2: r2 } = Ic(e);
    return lt(pt(n2, vc, t) * r2, t);
  }, adjustScalarBytes: Ac });
})();
function _o(t) {
  t.lowS !== void 0 && Re("lowS", t.lowS), t.prehash !== void 0 && Re("prehash", t.prehash);
}
var Sc = class extends Error {
  constructor(e = "") {
    super(e);
  }
};
var vt = { Err: Sc, _tlv: { encode: (t, e) => {
  const { Err: n2 } = vt;
  if (t < 0 || t > 256) throw new n2("tlv.encode: wrong tag");
  if (e.length & 1) throw new n2("tlv.encode: unpadded data");
  const r2 = e.length / 2, o2 = $e(r2);
  if (o2.length / 2 & 128) throw new n2("tlv.encode: long form length too big");
  const s = r2 > 127 ? $e(o2.length / 2 | 128) : "";
  return $e(t) + s + o2 + e;
}, decode(t, e) {
  const { Err: n2 } = vt;
  let r2 = 0;
  if (t < 0 || t > 256) throw new n2("tlv.encode: wrong tag");
  if (e.length < 2 || e[r2++] !== t) throw new n2("tlv.decode: wrong tlv");
  const o2 = e[r2++], s = !!(o2 & 128);
  let i3 = 0;
  if (!s) i3 = o2;
  else {
    const a2 = o2 & 127;
    if (!a2) throw new n2("tlv.decode(long): indefinite length not supported");
    if (a2 > 4) throw new n2("tlv.decode(long): byte length is too big");
    const l3 = e.subarray(r2, r2 + a2);
    if (l3.length !== a2) throw new n2("tlv.decode: length bytes not complete");
    if (l3[0] === 0) throw new n2("tlv.decode(long): zero leftmost byte");
    for (const c4 of l3) i3 = i3 << 8 | c4;
    if (r2 += a2, i3 < 128) throw new n2("tlv.decode(long): not minimal encoding");
  }
  const f5 = e.subarray(r2, r2 + i3);
  if (f5.length !== i3) throw new n2("tlv.decode: wrong value length");
  return { v: f5, l: e.subarray(r2 + i3) };
} }, _int: { encode(t) {
  const { Err: e } = vt;
  if (t < he) throw new e("integer: negative integers are not allowed");
  let n2 = $e(t);
  if (Number.parseInt(n2[0], 16) & 8 && (n2 = "00" + n2), n2.length & 1) throw new e("unexpected DER parsing assertion: unpadded hex");
  return n2;
}, decode(t) {
  const { Err: e } = vt;
  if (t[0] & 128) throw new e("invalid signature integer: negative");
  if (t[0] === 0 && !(t[1] & 128)) throw new e("invalid signature integer: unnecessary leading zero");
  return Ce(t);
} }, toSig(t) {
  const { Err: e, _int: n2, _tlv: r2 } = vt, o2 = rt("signature", t), { v: s, l: i3 } = r2.decode(48, o2);
  if (i3.length) throw new e("invalid signature: left bytes after parsing");
  const { v: f5, l: a2 } = r2.decode(2, s), { v: l3, l: c4 } = r2.decode(2, a2);
  if (c4.length) throw new e("invalid signature: left bytes after parsing");
  return { r: n2.decode(f5), s: n2.decode(l3) };
}, hexFromSig(t) {
  const { _tlv: e, _int: n2 } = vt, r2 = e.encode(2, n2.encode(t.r)), o2 = e.encode(2, n2.encode(t.s)), s = r2 + o2;
  return e.encode(48, s);
} };
var he = BigInt(0);
var pe = BigInt(1);
var Nc = BigInt(2);
var He = BigInt(3);
var Oc = BigInt(4);
function Uc(t, e, n2) {
  function r2(o2) {
    const s = t.sqr(o2), i3 = t.mul(s, o2);
    return t.add(t.add(i3, t.mul(o2, e)), n2);
  }
  return r2;
}
function To(t, e, n2) {
  const { BYTES: r2 } = t;
  function o2(s) {
    let i3;
    if (typeof s == "bigint") i3 = s;
    else {
      let f5 = rt("private key", s);
      if (e) {
        if (!e.includes(f5.length * 2)) throw new Error("invalid private key");
        const a2 = new Uint8Array(r2);
        a2.set(f5, a2.length - f5.length), f5 = a2;
      }
      try {
        i3 = t.fromBytes(f5);
      } catch {
        throw new Error(`invalid private key: expected ui8a of size ${r2}, got ${typeof s}`);
      }
    }
    if (n2 && (i3 = t.create(i3)), !t.isValidNot0(i3)) throw new Error("invalid private key: out of range [1..N-1]");
    return i3;
  }
  return o2;
}
function _c(t, e = {}) {
  const { Fp: n2, Fn: r2 } = yc("weierstrass", t, e), { h: o2, n: s } = t;
  ke(e, {}, { allowInfinityPoint: "boolean", clearCofactor: "function", isTorsionFree: "function", fromBytes: "function", toBytes: "function", endo: "object", wrapPrivateKey: "boolean" });
  const { endo: i3 } = e;
  if (i3 && (!n2.is0(t.a) || typeof i3.beta != "bigint" || typeof i3.splitScalar != "function")) throw new Error('invalid endo: expected "beta": bigint and "splitScalar": function');
  function f5() {
    if (!n2.isOdd) throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function a2($2, d3, m2) {
    const { x: p2, y: b2 } = d3.toAffine(), v3 = n2.toBytes(p2);
    if (Re("isCompressed", m2), m2) {
      f5();
      const B2 = !n2.isOdd(b2);
      return Ht(Ro(B2), v3);
    } else return Ht(Uint8Array.of(4), v3, n2.toBytes(b2));
  }
  function l3($2) {
    at($2);
    const d3 = n2.BYTES, m2 = d3 + 1, p2 = 2 * d3 + 1, b2 = $2.length, v3 = $2[0], B2 = $2.subarray(1);
    if (b2 === m2 && (v3 === 2 || v3 === 3)) {
      const E3 = n2.fromBytes(B2);
      if (!n2.isValid(E3)) throw new Error("bad point: is not on curve, wrong x");
      const I2 = h3(E3);
      let S2;
      try {
        S2 = n2.sqrt(I2);
      } catch (T2) {
        const U3 = T2 instanceof Error ? ": " + T2.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + U3);
      }
      f5();
      const O4 = n2.isOdd(S2);
      return (v3 & 1) === 1 !== O4 && (S2 = n2.neg(S2)), { x: E3, y: S2 };
    } else if (b2 === p2 && v3 === 4) {
      const E3 = n2.fromBytes(B2.subarray(d3 * 0, d3 * 1)), I2 = n2.fromBytes(B2.subarray(d3 * 1, d3 * 2));
      if (!g2(E3, I2)) throw new Error("bad point: is not on curve");
      return { x: E3, y: I2 };
    } else throw new Error(`bad point: got length ${b2}, expected compressed=${m2} or uncompressed=${p2}`);
  }
  const c4 = e.toBytes || a2, u2 = e.fromBytes || l3, h3 = Uc(n2, t.a, t.b);
  function g2($2, d3) {
    const m2 = n2.sqr(d3), p2 = h3($2);
    return n2.eql(m2, p2);
  }
  if (!g2(t.Gx, t.Gy)) throw new Error("bad curve params: generator point");
  const w = n2.mul(n2.pow(t.a, He), Oc), y4 = n2.mul(n2.sqr(t.b), BigInt(27));
  if (n2.is0(n2.add(w, y4))) throw new Error("bad curve params: a or b");
  function x3($2, d3, m2 = false) {
    if (!n2.isValid(d3) || m2 && n2.is0(d3)) throw new Error(`bad point coordinate ${$2}`);
    return d3;
  }
  function R4($2) {
    if (!($2 instanceof _2)) throw new Error("ProjectivePoint expected");
  }
  const M4 = ho(($2, d3) => {
    const { px: m2, py: p2, pz: b2 } = $2;
    if (n2.eql(b2, n2.ONE)) return { x: m2, y: p2 };
    const v3 = $2.is0();
    d3 == null && (d3 = v3 ? n2.ONE : n2.inv(b2));
    const B2 = n2.mul(m2, d3), E3 = n2.mul(p2, d3), I2 = n2.mul(b2, d3);
    if (v3) return { x: n2.ZERO, y: n2.ZERO };
    if (!n2.eql(I2, n2.ONE)) throw new Error("invZ was invalid");
    return { x: B2, y: E3 };
  }), L = ho(($2) => {
    if ($2.is0()) {
      if (e.allowInfinityPoint && !n2.is0($2.py)) return;
      throw new Error("bad point: ZERO");
    }
    const { x: d3, y: m2 } = $2.toAffine();
    if (!n2.isValid(d3) || !n2.isValid(m2)) throw new Error("bad point: x or y not field elements");
    if (!g2(d3, m2)) throw new Error("bad point: equation left != right");
    if (!$2.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  function V4($2, d3, m2, p2, b2) {
    return m2 = new _2(n2.mul(m2.px, $2), m2.py, m2.pz), d3 = le(p2, d3), m2 = le(b2, m2), d3.add(m2);
  }
  class _2 {
    constructor(d3, m2, p2) {
      this.px = x3("x", d3), this.py = x3("y", m2, true), this.pz = x3("z", p2), Object.freeze(this);
    }
    static fromAffine(d3) {
      const { x: m2, y: p2 } = d3 || {};
      if (!d3 || !n2.isValid(m2) || !n2.isValid(p2)) throw new Error("invalid affine point");
      if (d3 instanceof _2) throw new Error("projective point not allowed");
      return n2.is0(m2) && n2.is0(p2) ? _2.ZERO : new _2(m2, p2, n2.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(d3) {
      return lc(_2, "pz", d3);
    }
    static fromBytes(d3) {
      return at(d3), _2.fromHex(d3);
    }
    static fromHex(d3) {
      const m2 = _2.fromAffine(u2(rt("pointHex", d3)));
      return m2.assertValidity(), m2;
    }
    static fromPrivateKey(d3) {
      const m2 = To(r2, e.allowedPrivateKeyLengths, e.wrapPrivateKey);
      return _2.BASE.multiply(m2(d3));
    }
    static msm(d3, m2) {
      return bc(_2, r2, d3, m2);
    }
    precompute(d3 = 8, m2 = true) {
      return j2.setWindowSize(this, d3), m2 || this.multiply(He), this;
    }
    _setWindowSize(d3) {
      this.precompute(d3);
    }
    assertValidity() {
      L(this);
    }
    hasEvenY() {
      const { y: d3 } = this.toAffine();
      if (!n2.isOdd) throw new Error("Field doesn't support isOdd");
      return !n2.isOdd(d3);
    }
    equals(d3) {
      R4(d3);
      const { px: m2, py: p2, pz: b2 } = this, { px: v3, py: B2, pz: E3 } = d3, I2 = n2.eql(n2.mul(m2, E3), n2.mul(v3, b2)), S2 = n2.eql(n2.mul(p2, E3), n2.mul(B2, b2));
      return I2 && S2;
    }
    negate() {
      return new _2(this.px, n2.neg(this.py), this.pz);
    }
    double() {
      const { a: d3, b: m2 } = t, p2 = n2.mul(m2, He), { px: b2, py: v3, pz: B2 } = this;
      let E3 = n2.ZERO, I2 = n2.ZERO, S2 = n2.ZERO, O4 = n2.mul(b2, b2), A3 = n2.mul(v3, v3), T2 = n2.mul(B2, B2), U3 = n2.mul(b2, v3);
      return U3 = n2.add(U3, U3), S2 = n2.mul(b2, B2), S2 = n2.add(S2, S2), E3 = n2.mul(d3, S2), I2 = n2.mul(p2, T2), I2 = n2.add(E3, I2), E3 = n2.sub(A3, I2), I2 = n2.add(A3, I2), I2 = n2.mul(E3, I2), E3 = n2.mul(U3, E3), S2 = n2.mul(p2, S2), T2 = n2.mul(d3, T2), U3 = n2.sub(O4, T2), U3 = n2.mul(d3, U3), U3 = n2.add(U3, S2), S2 = n2.add(O4, O4), O4 = n2.add(S2, O4), O4 = n2.add(O4, T2), O4 = n2.mul(O4, U3), I2 = n2.add(I2, O4), T2 = n2.mul(v3, B2), T2 = n2.add(T2, T2), O4 = n2.mul(T2, U3), E3 = n2.sub(E3, O4), S2 = n2.mul(T2, A3), S2 = n2.add(S2, S2), S2 = n2.add(S2, S2), new _2(E3, I2, S2);
    }
    add(d3) {
      R4(d3);
      const { px: m2, py: p2, pz: b2 } = this, { px: v3, py: B2, pz: E3 } = d3;
      let I2 = n2.ZERO, S2 = n2.ZERO, O4 = n2.ZERO;
      const A3 = t.a, T2 = n2.mul(t.b, He);
      let U3 = n2.mul(m2, v3), C3 = n2.mul(p2, B2), H = n2.mul(b2, E3), q2 = n2.add(m2, p2), P4 = n2.add(v3, B2);
      q2 = n2.mul(q2, P4), P4 = n2.add(U3, C3), q2 = n2.sub(q2, P4), P4 = n2.add(m2, b2);
      let K3 = n2.add(v3, E3);
      return P4 = n2.mul(P4, K3), K3 = n2.add(U3, H), P4 = n2.sub(P4, K3), K3 = n2.add(p2, b2), I2 = n2.add(B2, E3), K3 = n2.mul(K3, I2), I2 = n2.add(C3, H), K3 = n2.sub(K3, I2), O4 = n2.mul(A3, P4), I2 = n2.mul(T2, H), O4 = n2.add(I2, O4), I2 = n2.sub(C3, O4), O4 = n2.add(C3, O4), S2 = n2.mul(I2, O4), C3 = n2.add(U3, U3), C3 = n2.add(C3, U3), H = n2.mul(A3, H), P4 = n2.mul(T2, P4), C3 = n2.add(C3, H), H = n2.sub(U3, H), H = n2.mul(A3, H), P4 = n2.add(P4, H), U3 = n2.mul(C3, P4), S2 = n2.add(S2, U3), U3 = n2.mul(K3, P4), I2 = n2.mul(q2, I2), I2 = n2.sub(I2, U3), U3 = n2.mul(q2, C3), O4 = n2.mul(K3, O4), O4 = n2.add(O4, U3), new _2(I2, S2, O4);
    }
    subtract(d3) {
      return this.add(d3.negate());
    }
    is0() {
      return this.equals(_2.ZERO);
    }
    multiply(d3) {
      const { endo: m2 } = e;
      if (!r2.isValidNot0(d3)) throw new Error("invalid scalar: out of range");
      let p2, b2;
      const v3 = (B2) => j2.wNAFCached(this, B2, _2.normalizeZ);
      if (m2) {
        const { k1neg: B2, k1: E3, k2neg: I2, k2: S2 } = m2.splitScalar(d3), { p: O4, f: A3 } = v3(E3), { p: T2, f: U3 } = v3(S2);
        b2 = A3.add(U3), p2 = V4(m2.beta, O4, T2, B2, I2);
      } else {
        const { p: B2, f: E3 } = v3(d3);
        p2 = B2, b2 = E3;
      }
      return _2.normalizeZ([p2, b2])[0];
    }
    multiplyUnsafe(d3) {
      const { endo: m2 } = e, p2 = this;
      if (!r2.isValid(d3)) throw new Error("invalid scalar: out of range");
      if (d3 === he || p2.is0()) return _2.ZERO;
      if (d3 === pe) return p2;
      if (j2.hasPrecomputes(this)) return this.multiply(d3);
      if (m2) {
        const { k1neg: b2, k1: v3, k2neg: B2, k2: E3 } = m2.splitScalar(d3), { p1: I2, p2: S2 } = gc(_2, p2, v3, E3);
        return V4(m2.beta, I2, S2, b2, B2);
      } else return j2.wNAFCachedUnsafe(p2, d3);
    }
    multiplyAndAddUnsafe(d3, m2, p2) {
      const b2 = this.multiplyUnsafe(m2).add(d3.multiplyUnsafe(p2));
      return b2.is0() ? void 0 : b2;
    }
    toAffine(d3) {
      return M4(this, d3);
    }
    isTorsionFree() {
      const { isTorsionFree: d3 } = e;
      return o2 === pe ? true : d3 ? d3(_2, this) : j2.wNAFCachedUnsafe(this, s).is0();
    }
    clearCofactor() {
      const { clearCofactor: d3 } = e;
      return o2 === pe ? this : d3 ? d3(_2, this) : this.multiplyUnsafe(o2);
    }
    toBytes(d3 = true) {
      return Re("isCompressed", d3), this.assertValidity(), c4(_2, this, d3);
    }
    toRawBytes(d3 = true) {
      return this.toBytes(d3);
    }
    toHex(d3 = true) {
      return ce(this.toBytes(d3));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
  }
  _2.BASE = new _2(t.Gx, t.Gy, n2.ONE), _2.ZERO = new _2(n2.ZERO, n2.ONE, n2.ZERO), _2.Fp = n2, _2.Fn = r2;
  const k4 = r2.BITS, j2 = pc(_2, e.endo ? Math.ceil(k4 / 2) : k4);
  return _2;
}
function Ro(t) {
  return Uint8Array.of(t ? 2 : 3);
}
function Tc(t, e, n2 = {}) {
  ke(e, { hash: "function" }, { hmac: "function", lowS: "boolean", randomBytes: "function", bits2int: "function", bits2int_modN: "function" });
  const r2 = e.randomBytes || Zt, o2 = e.hmac || ((p2, ...b2) => _e(e.hash, p2, Ht(...b2))), { Fp: s, Fn: i3 } = t, { ORDER: f5, BITS: a2 } = i3;
  function l3(p2) {
    const b2 = f5 >> pe;
    return p2 > b2;
  }
  function c4(p2) {
    return l3(p2) ? i3.neg(p2) : p2;
  }
  function u2(p2, b2) {
    if (!i3.isValidNot0(b2)) throw new Error(`invalid signature ${p2}: out of range 1..CURVE.n`);
  }
  class h3 {
    constructor(b2, v3, B2) {
      u2("r", b2), u2("s", v3), this.r = b2, this.s = v3, B2 != null && (this.recovery = B2), Object.freeze(this);
    }
    static fromCompact(b2) {
      const v3 = i3.BYTES, B2 = rt("compactSignature", b2, v3 * 2);
      return new h3(i3.fromBytes(B2.subarray(0, v3)), i3.fromBytes(B2.subarray(v3, v3 * 2)));
    }
    static fromDER(b2) {
      const { r: v3, s: B2 } = vt.toSig(rt("DER", b2));
      return new h3(v3, B2);
    }
    assertValidity() {
    }
    addRecoveryBit(b2) {
      return new h3(this.r, this.s, b2);
    }
    recoverPublicKey(b2) {
      const v3 = s.ORDER, { r: B2, s: E3, recovery: I2 } = this;
      if (I2 == null || ![0, 1, 2, 3].includes(I2)) throw new Error("recovery id invalid");
      if (f5 * Nc < v3 && I2 > 1) throw new Error("recovery id is ambiguous for h>1 curve");
      const O4 = I2 === 2 || I2 === 3 ? B2 + f5 : B2;
      if (!s.isValid(O4)) throw new Error("recovery id 2 or 3 invalid");
      const A3 = s.toBytes(O4), T2 = t.fromHex(Ht(Ro((I2 & 1) === 0), A3)), U3 = i3.inv(O4), C3 = L(rt("msgHash", b2)), H = i3.create(-C3 * U3), q2 = i3.create(E3 * U3), P4 = t.BASE.multiplyUnsafe(H).add(T2.multiplyUnsafe(q2));
      if (P4.is0()) throw new Error("point at infinify");
      return P4.assertValidity(), P4;
    }
    hasHighS() {
      return l3(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new h3(this.r, i3.neg(this.s), this.recovery) : this;
    }
    toBytes(b2) {
      if (b2 === "compact") return Ht(i3.toBytes(this.r), i3.toBytes(this.s));
      if (b2 === "der") return fn(vt.hexFromSig(this));
      throw new Error("invalid format");
    }
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return ce(this.toBytes("der"));
    }
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return ce(this.toBytes("compact"));
    }
  }
  const g2 = To(i3, n2.allowedPrivateKeyLengths, n2.wrapPrivateKey), w = { isValidPrivateKey(p2) {
    try {
      return g2(p2), true;
    } catch {
      return false;
    }
  }, normPrivateKeyToScalar: g2, randomPrivateKey: () => {
    const p2 = f5;
    return uc(r2(Eo(p2)), p2);
  }, precompute(p2 = 8, b2 = t.BASE) {
    return b2.precompute(p2, false);
  } };
  function y4(p2, b2 = true) {
    return t.fromPrivateKey(p2).toBytes(b2);
  }
  function x3(p2) {
    if (typeof p2 == "bigint") return false;
    if (p2 instanceof t) return true;
    const v3 = rt("key", p2).length, B2 = s.BYTES, E3 = B2 + 1, I2 = 2 * B2 + 1;
    if (!(n2.allowedPrivateKeyLengths || i3.BYTES === E3)) return v3 === E3 || v3 === I2;
  }
  function R4(p2, b2, v3 = true) {
    if (x3(p2) === true) throw new Error("first arg must be private key");
    if (x3(b2) === false) throw new Error("second arg must be public key");
    return t.fromHex(b2).multiply(g2(p2)).toBytes(v3);
  }
  const M4 = e.bits2int || function(p2) {
    if (p2.length > 8192) throw new Error("input is too large");
    const b2 = Ce(p2), v3 = p2.length * 8 - a2;
    return v3 > 0 ? b2 >> BigInt(v3) : b2;
  }, L = e.bits2int_modN || function(p2) {
    return i3.create(M4(p2));
  }, V4 = je(a2);
  function _2(p2) {
    return Nn("num < 2^" + a2, p2, he, V4), i3.toBytes(p2);
  }
  function k4(p2, b2, v3 = j2) {
    if (["recovered", "canonical"].some((q2) => q2 in v3)) throw new Error("sign() legacy options not supported");
    const { hash: B2 } = e;
    let { lowS: E3, prehash: I2, extraEntropy: S2 } = v3;
    E3 == null && (E3 = true), p2 = rt("msgHash", p2), _o(v3), I2 && (p2 = rt("prehashed msgHash", B2(p2)));
    const O4 = L(p2), A3 = g2(b2), T2 = [_2(A3), _2(O4)];
    if (S2 != null && S2 !== false) {
      const q2 = S2 === true ? r2(s.BYTES) : S2;
      T2.push(rt("extraEntropy", q2));
    }
    const U3 = Ht(...T2), C3 = O4;
    function H(q2) {
      const P4 = M4(q2);
      if (!i3.isValidNot0(P4)) return;
      const K3 = i3.inv(P4), et2 = t.BASE.multiply(P4).toAffine(), Z = i3.create(et2.x);
      if (Z === he) return;
      const z3 = i3.create(K3 * i3.create(C3 + Z * A3));
      if (z3 === he) return;
      let Ft2 = (et2.x === Z ? 0 : 2) | Number(et2.y & pe), yt2 = z3;
      return E3 && l3(z3) && (yt2 = c4(z3), Ft2 ^= 1), new h3(Z, yt2, Ft2);
    }
    return { seed: U3, k2sig: H };
  }
  const j2 = { lowS: e.lowS, prehash: false }, $2 = { lowS: e.lowS, prehash: false };
  function d3(p2, b2, v3 = j2) {
    const { seed: B2, k2sig: E3 } = k4(p2, b2, v3);
    return ec(e.hash.outputLen, i3.BYTES, o2)(B2, E3);
  }
  t.BASE.precompute(8);
  function m2(p2, b2, v3, B2 = $2) {
    const E3 = p2;
    b2 = rt("msgHash", b2), v3 = rt("publicKey", v3), _o(B2);
    const { lowS: I2, prehash: S2, format: O4 } = B2;
    if ("strict" in B2) throw new Error("options.strict was renamed to lowS");
    if (O4 !== void 0 && !["compact", "der", "js"].includes(O4)) throw new Error('format must be "compact", "der" or "js"');
    const A3 = typeof E3 == "string" || nn(E3), T2 = !A3 && !O4 && typeof E3 == "object" && E3 !== null && typeof E3.r == "bigint" && typeof E3.s == "bigint";
    if (!A3 && !T2) throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let U3, C3;
    try {
      if (T2) if (O4 === void 0 || O4 === "js") U3 = new h3(E3.r, E3.s);
      else throw new Error("invalid format");
      if (A3) {
        try {
          O4 !== "compact" && (U3 = h3.fromDER(E3));
        } catch (yt2) {
          if (!(yt2 instanceof vt.Err)) throw yt2;
        }
        !U3 && O4 !== "der" && (U3 = h3.fromCompact(E3));
      }
      C3 = t.fromHex(v3);
    } catch {
      return false;
    }
    if (!U3 || I2 && U3.hasHighS()) return false;
    S2 && (b2 = e.hash(b2));
    const { r: H, s: q2 } = U3, P4 = L(b2), K3 = i3.inv(q2), et2 = i3.create(P4 * K3), Z = i3.create(H * K3), z3 = t.BASE.multiplyUnsafe(et2).add(C3.multiplyUnsafe(Z));
    return z3.is0() ? false : i3.create(z3.x) === H;
  }
  return Object.freeze({ getPublicKey: y4, getSharedSecret: R4, sign: d3, verify: m2, utils: w, Point: t, Signature: h3 });
}
function Rc(t) {
  const e = { a: t.a, b: t.b, p: t.Fp.ORDER, n: t.n, h: t.h, Gx: t.Gx, Gy: t.Gy }, n2 = t.Fp, r2 = Yt(e.n, t.nBitLength), o2 = { Fp: n2, Fn: r2, allowedPrivateKeyLengths: t.allowedPrivateKeyLengths, allowInfinityPoint: t.allowInfinityPoint, endo: t.endo, wrapPrivateKey: t.wrapPrivateKey, isTorsionFree: t.isTorsionFree, clearCofactor: t.clearCofactor, fromBytes: t.fromBytes, toBytes: t.toBytes };
  return { CURVE: e, curveOpts: o2 };
}
function $c(t) {
  const { CURVE: e, curveOpts: n2 } = Rc(t), r2 = { hash: t.hash, hmac: t.hmac, randomBytes: t.randomBytes, lowS: t.lowS, bits2int: t.bits2int, bits2int_modN: t.bits2int_modN };
  return { CURVE: e, curveOpts: n2, ecdsaOpts: r2 };
}
function Cc(t, e) {
  return Object.assign({}, e, { ProjectivePoint: e.Point, CURVE: t });
}
function Lc(t) {
  const { CURVE: e, curveOpts: n2, ecdsaOpts: r2 } = $c(t), o2 = _c(e, n2), s = Tc(o2, r2, n2);
  return Cc(t, s);
}
function Rn(t, e) {
  const n2 = (r2) => Lc({ ...t, hash: r2 });
  return { ...n2(e), create: n2 };
}
var $o = { p: BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"), n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), h: BigInt(1), a: BigInt("0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc"), b: BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5") };
var Co = { p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"), n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"), h: BigInt(1), a: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc"), b: BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef"), Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"), Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f") };
var Lo = { p: BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"), h: BigInt(1), a: BigInt("0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"), b: BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00"), Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"), Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650") };
var jc = Yt($o.p);
var kc = Yt(Co.p);
var Pc = Yt(Lo.p);
var Hc = Rn({ ...$o, Fp: jc, lowS: false }, Ae);
Rn({ ...Co, Fp: kc, lowS: false }, Yi), Rn({ ...Lo, Fp: Pc, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, Wi);
var Dc = Hc;
var $n = "base10";
var tt = "base16";
var Qt = "base64pad";
var De = "base64url";
var te = "utf8";
var Cn = 0;
var ee = 1;
var ge = 2;
var Mc = 0;
var jo = 1;
var be = 12;
var Ln = 32;
function Vc() {
  const t = Tn.utils.randomPrivateKey(), e = Tn.getPublicKey(t);
  return { privateKey: toString(t, tt), publicKey: toString(e, tt) };
}
function qc() {
  const t = Zt(Ln);
  return toString(t, tt);
}
function Kc(t, e) {
  const n2 = Tn.getSharedSecret(fromString(t, tt), fromString(e, tt)), r2 = Jf(Te, n2, void 0, void 0, Ln);
  return toString(r2, tt);
}
function Fc(t) {
  const e = Te(fromString(t, tt));
  return toString(e, tt);
}
function zc(t) {
  const e = Te(fromString(t, te));
  return toString(e, tt);
}
function jn(t) {
  return fromString(`${t}`, $n);
}
function Vt(t) {
  return Number(toString(t, $n));
}
function ko(t) {
  return t.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function Po2(t) {
  const e = t.replace(/-/g, "+").replace(/_/g, "/"), n2 = (4 - e.length % 4) % 4;
  return e + "=".repeat(n2);
}
function Gc(t) {
  const e = jn(typeof t.type < "u" ? t.type : Cn);
  if (Vt(e) === ee && typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const n2 = typeof t.senderPublicKey < "u" ? fromString(t.senderPublicKey, tt) : void 0, r2 = typeof t.iv < "u" ? fromString(t.iv, tt) : Zt(be), o2 = fromString(t.symKey, tt), s = co(o2, r2).encrypt(fromString(t.message, te)), i3 = kn({ type: e, sealed: s, iv: r2, senderPublicKey: n2 });
  return t.encoding === De ? ko(i3) : i3;
}
function Zc(t) {
  const e = fromString(t.symKey, tt), { sealed: n2, iv: r2 } = Me({ encoded: t.encoded, encoding: t.encoding }), o2 = co(e, r2).decrypt(n2);
  if (o2 === null) throw new Error("Failed to decrypt");
  return toString(o2, te);
}
function Wc(t, e) {
  const n2 = jn(ge), r2 = Zt(be), o2 = fromString(t, te), s = kn({ type: n2, sealed: o2, iv: r2 });
  return e === De ? ko(s) : s;
}
function Yc(t, e) {
  const { sealed: n2 } = Me({ encoded: t, encoding: e });
  return toString(n2, te);
}
function kn(t) {
  if (Vt(t.type) === ge) return toString(concat([t.type, t.sealed]), Qt);
  if (Vt(t.type) === ee) {
    if (typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString(concat([t.type, t.senderPublicKey, t.iv, t.sealed]), Qt);
  }
  return toString(concat([t.type, t.iv, t.sealed]), Qt);
}
function Me(t) {
  const e = (t.encoding || Qt) === De ? Po2(t.encoded) : t.encoded, n2 = fromString(e, Qt), r2 = n2.slice(Mc, jo), o2 = jo;
  if (Vt(r2) === ee) {
    const a2 = o2 + Ln, l3 = a2 + be, c4 = n2.slice(o2, a2), u2 = n2.slice(a2, l3), h3 = n2.slice(l3);
    return { type: r2, sealed: h3, iv: u2, senderPublicKey: c4 };
  }
  if (Vt(r2) === ge) {
    const a2 = n2.slice(o2), l3 = Zt(be);
    return { type: r2, sealed: a2, iv: l3 };
  }
  const s = o2 + be, i3 = n2.slice(o2, s), f5 = n2.slice(s);
  return { type: r2, sealed: f5, iv: i3 };
}
function Xc(t, e) {
  const n2 = Me({ encoded: t, encoding: e == null ? void 0 : e.encoding });
  return Ho({ type: Vt(n2.type), senderPublicKey: typeof n2.senderPublicKey < "u" ? toString(n2.senderPublicKey, tt) : void 0, receiverPublicKey: e == null ? void 0 : e.receiverPublicKey });
}
function Ho(t) {
  const e = (t == null ? void 0 : t.type) || Cn;
  if (e === ee) {
    if (typeof (t == null ? void 0 : t.senderPublicKey) > "u") throw new Error("missing sender public key");
    if (typeof (t == null ? void 0 : t.receiverPublicKey) > "u") throw new Error("missing receiver public key");
  }
  return { type: e, senderPublicKey: t == null ? void 0 : t.senderPublicKey, receiverPublicKey: t == null ? void 0 : t.receiverPublicKey };
}
function Jc(t) {
  return t.type === ee && typeof t.senderPublicKey == "string" && typeof t.receiverPublicKey == "string";
}
function Qc(t) {
  return t.type === ge;
}
function Do(t) {
  const e = Buffer.from(t.x, "base64"), n2 = Buffer.from(t.y, "base64");
  return concat([new Uint8Array([4]), e, n2]);
}
function ta(t, e) {
  const [n2, r2, o2] = t.split("."), s = Buffer.from(Po2(o2), "base64");
  if (s.length !== 64) throw new Error("Invalid signature length");
  const i3 = s.slice(0, 32), f5 = s.slice(32, 64), a2 = `${n2}.${r2}`, l3 = Te(a2), c4 = Do(e);
  if (!Dc.verify(concat([i3, f5]), l3, c4)) throw new Error("Invalid signature");
  return sn(t).payload;
}
var Mo = "irn";
function ea(t) {
  return (t == null ? void 0 : t.relay) || { protocol: Mo };
}
function na(t) {
  const e = C[t];
  if (typeof e > "u") throw new Error(`Relay Protocol not supported: ${t}`);
  return e;
}
function Vo(t, e = "-") {
  const n2 = {}, r2 = "relay" + e;
  return Object.keys(t).forEach((o2) => {
    if (o2.startsWith(r2)) {
      const s = o2.replace(r2, ""), i3 = t[o2];
      n2[s] = i3;
    }
  }), n2;
}
function ra(t) {
  if (!t.includes("wc:")) {
    const l3 = Qe2(t);
    l3 != null && l3.includes("wc:") && (t = l3);
  }
  t = t.includes("wc://") ? t.replace("wc://", "") : t, t = t.includes("wc:") ? t.replace("wc:", "") : t;
  const e = t.indexOf(":"), n2 = t.indexOf("?") !== -1 ? t.indexOf("?") : void 0, r2 = t.substring(0, e), o2 = t.substring(e + 1, n2).split("@"), s = typeof n2 < "u" ? t.substring(n2) : "", i3 = new URLSearchParams(s), f5 = {};
  i3.forEach((l3, c4) => {
    f5[c4] = l3;
  });
  const a2 = typeof f5.methods == "string" ? f5.methods.split(",") : void 0;
  return { protocol: r2, topic: qo(o2[0]), version: parseInt(o2[1], 10), symKey: f5.symKey, relay: Vo(f5), methods: a2, expiryTimestamp: f5.expiryTimestamp ? parseInt(f5.expiryTimestamp, 10) : void 0 };
}
function qo(t) {
  return t.startsWith("//") ? t.substring(2) : t;
}
function Ko(t, e = "-") {
  const n2 = "relay", r2 = {};
  return Object.keys(t).forEach((o2) => {
    const s = o2, i3 = n2 + e + s;
    t[s] && (r2[i3] = t[s]);
  }), r2;
}
function oa(t) {
  const e = new URLSearchParams(), n2 = Ko(t.relay);
  Object.keys(n2).sort().forEach((o2) => {
    e.set(o2, n2[o2]);
  }), e.set("symKey", t.symKey), t.expiryTimestamp && e.set("expiryTimestamp", t.expiryTimestamp.toString()), t.methods && e.set("methods", t.methods.join(","));
  const r2 = e.toString();
  return `${t.protocol}:${t.topic}@${t.version}?${r2}`;
}
function sa(t, e, n2) {
  return `${t}?wc_ev=${n2}&topic=${e}`;
}
var ia = Object.defineProperty;
var fa = Object.defineProperties;
var ca = Object.getOwnPropertyDescriptors;
var Fo = Object.getOwnPropertySymbols;
var aa = Object.prototype.hasOwnProperty;
var ua = Object.prototype.propertyIsEnumerable;
var zo = (t, e, n2) => e in t ? ia(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var la = (t, e) => {
  for (var n2 in e || (e = {})) aa.call(e, n2) && zo(t, n2, e[n2]);
  if (Fo) for (var n2 of Fo(e)) ua.call(e, n2) && zo(t, n2, e[n2]);
  return t;
};
var da = (t, e) => fa(t, ca(e));
function qt(t) {
  const e = [];
  return t.forEach((n2) => {
    const [r2, o2] = n2.split(":");
    e.push(`${r2}:${o2}`);
  }), e;
}
function Go(t) {
  const e = [];
  return Object.values(t).forEach((n2) => {
    e.push(...qt(n2.accounts));
  }), e;
}
function Zo(t, e) {
  const n2 = [];
  return Object.values(t).forEach((r2) => {
    qt(r2.accounts).includes(e) && n2.push(...r2.methods);
  }), n2;
}
function Wo(t, e) {
  const n2 = [];
  return Object.values(t).forEach((r2) => {
    qt(r2.accounts).includes(e) && n2.push(...r2.events);
  }), n2;
}
function Pn(t) {
  return t.includes(":");
}
function Yo(t) {
  return Pn(t) ? t.split(":")[0] : t;
}
function ye(t) {
  var e, n2, r2;
  const o2 = {};
  if (!Ve(t)) return o2;
  for (const [s, i3] of Object.entries(t)) {
    const f5 = Pn(s) ? [s] : i3.chains, a2 = i3.methods || [], l3 = i3.events || [], c4 = Yo(s);
    o2[c4] = da(la({}, o2[c4]), { chains: ct(f5, (e = o2[c4]) == null ? void 0 : e.chains), methods: ct(a2, (n2 = o2[c4]) == null ? void 0 : n2.methods), events: ct(l3, (r2 = o2[c4]) == null ? void 0 : r2.events) });
  }
  return o2;
}
function Xo(t) {
  const e = {};
  return t == null ? void 0 : t.forEach((n2) => {
    var r2;
    const [o2, s] = n2.split(":");
    e[o2] || (e[o2] = { accounts: [], chains: [], events: [], methods: [] }), e[o2].accounts.push(n2), (r2 = e[o2].chains) == null || r2.push(`${o2}:${s}`);
  }), e;
}
function ga(t, e) {
  e = e.map((r2) => r2.replace("did:pkh:", ""));
  const n2 = Xo(e);
  for (const [r2, o2] of Object.entries(n2)) o2.methods ? o2.methods = ct(o2.methods, t) : o2.methods = t, o2.events = ["chainChanged", "accountsChanged"];
  return n2;
}
function ba(t, e) {
  var n2, r2, o2, s, i3, f5;
  const a2 = ye(t), l3 = ye(e), c4 = {}, u2 = Object.keys(a2).concat(Object.keys(l3));
  for (const h3 of u2) c4[h3] = { chains: ct((n2 = a2[h3]) == null ? void 0 : n2.chains, (r2 = l3[h3]) == null ? void 0 : r2.chains), methods: ct((o2 = a2[h3]) == null ? void 0 : o2.methods, (s = l3[h3]) == null ? void 0 : s.methods), events: ct((i3 = a2[h3]) == null ? void 0 : i3.events, (f5 = l3[h3]) == null ? void 0 : f5.events) };
  return c4;
}
var Jo = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var Qo2 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function Et(t, e) {
  const { message: n2, code: r2 } = Qo2[t];
  return { message: e ? `${n2} ${e}` : n2, code: r2 };
}
function Kt(t, e) {
  const { message: n2, code: r2 } = Jo[t];
  return { message: e ? `${n2} ${e}` : n2, code: r2 };
}
function me(t, e) {
  return Array.isArray(t) ? typeof e < "u" && t.length ? t.every(e) : true : false;
}
function Ve(t) {
  return Object.getPrototypeOf(t) === Object.prototype && Object.keys(t).length;
}
function kt(t) {
  return typeof t > "u";
}
function it(t, e) {
  return e && kt(t) ? true : typeof t == "string" && !!t.trim().length;
}
function qe(t, e) {
  return e && kt(t) ? true : typeof t == "number" && !isNaN(t);
}
function ya(t, e) {
  const { requiredNamespaces: n2 } = e, r2 = Object.keys(t.namespaces), o2 = Object.keys(n2);
  let s = true;
  return It(o2, r2) ? (r2.forEach((i3) => {
    const { accounts: f5, methods: a2, events: l3 } = t.namespaces[i3], c4 = qt(f5), u2 = n2[i3];
    (!It(ve(i3, u2), c4) || !It(u2.methods, a2) || !It(u2.events, l3)) && (s = false);
  }), s) : false;
}
function we(t) {
  return it(t, false) && t.includes(":") ? t.split(":").length === 2 : false;
}
function ts(t) {
  if (it(t, false) && t.includes(":")) {
    const e = t.split(":");
    if (e.length === 3) {
      const n2 = e[0] + ":" + e[1];
      return !!e[2] && we(n2);
    }
  }
  return false;
}
function ma(t) {
  function e(n2) {
    try {
      return typeof new URL(n2) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (it(t, false)) {
      if (e(t)) return true;
      const n2 = Qe2(t);
      return e(n2);
    }
  } catch {
  }
  return false;
}
function wa(t) {
  var e;
  return (e = t == null ? void 0 : t.proposer) == null ? void 0 : e.publicKey;
}
function xa(t) {
  return t == null ? void 0 : t.topic;
}
function va(t, e) {
  let n2 = null;
  return it(t == null ? void 0 : t.publicKey, false) || (n2 = Et("MISSING_OR_INVALID", `${e} controller public key should be a string`)), n2;
}
function Hn(t) {
  let e = true;
  return me(t) ? t.length && (e = t.every((n2) => it(n2, false))) : e = false, e;
}
function es(t, e, n2) {
  let r2 = null;
  return me(e) && e.length ? e.forEach((o2) => {
    r2 || we(o2) || (r2 = Kt("UNSUPPORTED_CHAINS", `${n2}, chain ${o2} should be a string and conform to "namespace:chainId" format`));
  }) : we(t) || (r2 = Kt("UNSUPPORTED_CHAINS", `${n2}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r2;
}
function ns(t, e, n2) {
  let r2 = null;
  return Object.entries(t).forEach(([o2, s]) => {
    if (r2) return;
    const i3 = es(o2, ve(o2, s), `${e} ${n2}`);
    i3 && (r2 = i3);
  }), r2;
}
function rs(t, e) {
  let n2 = null;
  return me(t) ? t.forEach((r2) => {
    n2 || ts(r2) || (n2 = Kt("UNSUPPORTED_ACCOUNTS", `${e}, account ${r2} should be a string and conform to "namespace:chainId:address" format`));
  }) : n2 = Kt("UNSUPPORTED_ACCOUNTS", `${e}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n2;
}
function os(t, e) {
  let n2 = null;
  return Object.values(t).forEach((r2) => {
    if (n2) return;
    const o2 = rs(r2 == null ? void 0 : r2.accounts, `${e} namespace`);
    o2 && (n2 = o2);
  }), n2;
}
function ss(t, e) {
  let n2 = null;
  return Hn(t == null ? void 0 : t.methods) ? Hn(t == null ? void 0 : t.events) || (n2 = Kt("UNSUPPORTED_EVENTS", `${e}, events should be an array of strings or empty array for no events`)) : n2 = Kt("UNSUPPORTED_METHODS", `${e}, methods should be an array of strings or empty array for no methods`), n2;
}
function Dn(t, e) {
  let n2 = null;
  return Object.values(t).forEach((r2) => {
    if (n2) return;
    const o2 = ss(r2, `${e}, namespace`);
    o2 && (n2 = o2);
  }), n2;
}
function Ea(t, e, n2) {
  let r2 = null;
  if (t && Ve(t)) {
    const o2 = Dn(t, e);
    o2 && (r2 = o2);
    const s = ns(t, e, n2);
    s && (r2 = s);
  } else r2 = Et("MISSING_OR_INVALID", `${e}, ${n2} should be an object with data`);
  return r2;
}
function is(t, e) {
  let n2 = null;
  if (t && Ve(t)) {
    const r2 = Dn(t, e);
    r2 && (n2 = r2);
    const o2 = os(t, e);
    o2 && (n2 = o2);
  } else n2 = Et("MISSING_OR_INVALID", `${e}, namespaces should be an object with data`);
  return n2;
}
function fs(t) {
  return it(t.protocol, true);
}
function Ba(t, e) {
  let n2 = false;
  return e && !t ? n2 = true : t && me(t) && t.length && t.forEach((r2) => {
    n2 = fs(r2);
  }), n2;
}
function Ia(t) {
  return typeof t == "number";
}
function Aa(t) {
  return typeof t < "u" && typeof t !== null;
}
function Sa(t) {
  return !(!t || typeof t != "object" || !t.code || !qe(t.code, false) || !t.message || !it(t.message, false));
}
function Na(t) {
  return !(kt(t) || !it(t.method, false));
}
function Oa(t) {
  return !(kt(t) || kt(t.result) && kt(t.error) || !qe(t.id, false) || !it(t.jsonrpc, false));
}
function Ua(t) {
  return !(kt(t) || !it(t.name, false));
}
function _a2(t, e) {
  return !(!we(e) || !Go(t).includes(e));
}
function Ta(t, e, n2) {
  return it(n2, false) ? Zo(t, e).includes(n2) : false;
}
function Ra(t, e, n2) {
  return it(n2, false) ? Wo(t, e).includes(n2) : false;
}
function cs(t, e, n2) {
  let r2 = null;
  const o2 = $a(t), s = Ca(e), i3 = Object.keys(o2), f5 = Object.keys(s), a2 = as(Object.keys(t)), l3 = as(Object.keys(e)), c4 = a2.filter((u2) => !l3.includes(u2));
  return c4.length && (r2 = Et("NON_CONFORMING_NAMESPACES", `${n2} namespaces keys don't satisfy requiredNamespaces.
      Required: ${c4.toString()}
      Received: ${Object.keys(e).toString()}`)), It(i3, f5) || (r2 = Et("NON_CONFORMING_NAMESPACES", `${n2} namespaces chains don't satisfy required namespaces.
      Required: ${i3.toString()}
      Approved: ${f5.toString()}`)), Object.keys(e).forEach((u2) => {
    if (!u2.includes(":") || r2) return;
    const h3 = qt(e[u2].accounts);
    h3.includes(u2) || (r2 = Et("NON_CONFORMING_NAMESPACES", `${n2} namespaces accounts don't satisfy namespace accounts for ${u2}
        Required: ${u2}
        Approved: ${h3.toString()}`));
  }), i3.forEach((u2) => {
    r2 || (It(o2[u2].methods, s[u2].methods) ? It(o2[u2].events, s[u2].events) || (r2 = Et("NON_CONFORMING_NAMESPACES", `${n2} namespaces events don't satisfy namespace events for ${u2}`)) : r2 = Et("NON_CONFORMING_NAMESPACES", `${n2} namespaces methods don't satisfy namespace methods for ${u2}`));
  }), r2;
}
function $a(t) {
  const e = {};
  return Object.keys(t).forEach((n2) => {
    var r2;
    n2.includes(":") ? e[n2] = t[n2] : (r2 = t[n2].chains) == null || r2.forEach((o2) => {
      e[o2] = { methods: t[n2].methods, events: t[n2].events };
    });
  }), e;
}
function as(t) {
  return [...new Set(t.map((e) => e.includes(":") ? e.split(":")[0] : e))];
}
function Ca(t) {
  const e = {};
  return Object.keys(t).forEach((n2) => {
    if (n2.includes(":")) e[n2] = t[n2];
    else {
      const r2 = qt(t[n2].accounts);
      r2 == null ? void 0 : r2.forEach((o2) => {
        e[o2] = { accounts: t[n2].accounts.filter((s) => s.includes(`${o2}:`)), methods: t[n2].methods, events: t[n2].events };
      });
    }
  }), e;
}
function La(t, e) {
  return qe(t, false) && t <= e.max && t >= e.min;
}
function ja() {
  const t = Pt();
  return new Promise((e) => {
    switch (t) {
      case J.browser:
        e(us());
        break;
      case J.reactNative:
        e(ls());
        break;
      case J.node:
        e(ds());
        break;
      default:
        e(true);
    }
  });
}
function us() {
  return zt() && (navigator == null ? void 0 : navigator.onLine);
}
async function ls() {
  if (Bt() && typeof global < "u" && global != null && global.NetInfo) {
    const t = await (global == null ? void 0 : global.NetInfo.fetch());
    return t == null ? void 0 : t.isConnected;
  }
  return true;
}
function ds() {
  return true;
}
function ka(t) {
  switch (Pt()) {
    case J.browser:
      hs(t);
      break;
    case J.reactNative:
      ps(t);
      break;
    case J.node:
      break;
  }
}
function hs(t) {
  !Bt() && zt() && (window.addEventListener("online", () => t(true)), window.addEventListener("offline", () => t(false)));
}
function ps(t) {
  Bt() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((e) => t(e == null ? void 0 : e.isConnected)));
}
function Pa() {
  var t;
  return zt() && (0, import_window_getters.getDocument)() ? ((t = (0, import_window_getters.getDocument)()) == null ? void 0 : t.visibilityState) === "visible" : true;
}
var Mn = {};
var Ha = class {
  static get(e) {
    return Mn[e];
  }
  static set(e, n2) {
    Mn[e] = n2;
  }
  static delete(e) {
    delete Mn[e];
  }
};
function gs(t) {
  const e = esm_default.decode(t);
  if (e.length < 33) throw new Error("Too short to contain a public key");
  return e.slice(1, 33);
}
function bs({ publicKey: t, signature: e, payload: n2 }) {
  var r2;
  const o2 = Vn(n2.method), s = 128 | parseInt(((r2 = n2.version) == null ? void 0 : r2.toString()) || "4"), i3 = Ma(n2.address), f5 = n2.era === "00" ? new Uint8Array([0]) : Vn(n2.era);
  if (f5.length !== 1 && f5.length !== 2) throw new Error("Invalid era length");
  const a2 = parseInt(n2.nonce, 16), l3 = new Uint8Array([a2 & 255, a2 >> 8 & 255]), c4 = BigInt(`0x${Da(n2.tip)}`), u2 = qa(c4), h3 = new Uint8Array([0, ...t, i3, ...e, ...f5, ...l3, ...u2, ...o2]), g2 = Va(h3.length + 1);
  return new Uint8Array([...g2, s, ...h3]);
}
function ys(t) {
  const e = Vn(t), n2 = (0, import_blakejs.blake2b)(e, void 0, 32);
  return "0x" + Buffer.from(n2).toString("hex");
}
function Vn(t) {
  return new Uint8Array(t.replace(/^0x/, "").match(/.{1,2}/g).map((e) => parseInt(e, 16)));
}
function Da(t) {
  return t.startsWith("0x") ? t.slice(2) : t;
}
function Ma(t) {
  const e = esm_default.decode(t)[0];
  return e === 42 ? 0 : e === 60 ? 2 : 1;
}
function Va(t) {
  if (t < 64) return new Uint8Array([t << 2]);
  if (t < 16384) {
    const e = t << 2 | 1;
    return new Uint8Array([e & 255, e >> 8 & 255]);
  } else if (t < 1 << 30) {
    const e = t << 2 | 2;
    return new Uint8Array([e & 255, e >> 8 & 255, e >> 16 & 255, e >> 24 & 255]);
  } else throw new Error("Compact encoding > 2^30 not supported");
}
function qa(t) {
  if (t < BigInt(1) << BigInt(6)) return new Uint8Array([Number(t << BigInt(2))]);
  if (t < BigInt(1) << BigInt(14)) {
    const e = t << BigInt(2) | BigInt(1);
    return new Uint8Array([Number(e & BigInt(255)), Number(e >> BigInt(8) & BigInt(255))]);
  } else if (t < BigInt(1) << BigInt(30)) {
    const e = t << BigInt(2) | BigInt(2);
    return new Uint8Array([Number(e & BigInt(255)), Number(e >> BigInt(8) & BigInt(255)), Number(e >> BigInt(16) & BigInt(255)), Number(e >> BigInt(24) & BigInt(255))]);
  } else throw new Error("BigInt compact encoding not supported > 2^30");
}
function Ka(t) {
  const e = Uint8Array.from(Buffer.from(t.signature, "hex")), n2 = gs(t.transaction.address), r2 = bs({ publicKey: n2, signature: e, payload: t.transaction }), o2 = Buffer.from(r2).toString("hex");
  return ys(o2);
}

// node_modules/@web3auth/no-modal/dist/lib.esm/connectors/wallet-connect-v2-connector/walletConnectV2Utils.js
async function getLastActiveSession(signClient) {
  if (signClient.session.length) {
    const lastKeyIndex = signClient.session.keys.length - 1;
    return signClient.session.get(signClient.session.keys[lastKeyIndex]);
  }
  return null;
}
function isMobileDevice() {
  return /Mobi|Android|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i.test(window.navigator.userAgent);
}
function isSolanaChain(chainId) {
  return chainId.startsWith("solana:");
}
async function sendJrpcRequest(signClient, chainId, method, params) {
  const session = await getLastActiveSession(signClient);
  if (!session) {
    throw providerErrors.disconnected();
  }
  if (typeof window !== "undefined" && isMobileDevice()) {
    if (session.peer.metadata.redirect && session.peer.metadata.redirect.native) {
      window.open(session.peer.metadata.redirect.native, "_blank");
    }
  }
  return signClient.request({
    topic: session.topic,
    chainId,
    request: {
      method,
      params: isSolanaChain(chainId) ? _objectSpread2(_objectSpread2({}, params), {}, {
        pubkey: session.self.publicKey
      }) : params
    }
  });
}
async function getAccounts(signClient) {
  const session = await getLastActiveSession(signClient);
  if (!session) {
    throw providerErrors.disconnected();
  }
  const accounts = _s(session.namespaces);
  if (accounts && accounts.length) {
    return [...new Set(accounts.map((add) => {
      return ze(add).address;
    }))];
  }
  throw WalletLoginError.connectionError("Failed to get accounts");
}
function getEthProviderHandlers({
  connector,
  chainId
}) {
  return {
    getPrivateKey: async () => {
      throw rpcErrors.methodNotSupported();
    },
    getPublicKey: async () => {
      throw rpcErrors.methodNotSupported();
    },
    getAccounts: async (_2) => {
      return getAccounts(connector);
    },
    processTransaction: async (txParams, _2) => {
      const methodRes = await sendJrpcRequest(connector, `eip155:${chainId}`, EVM_METHOD_TYPES.ETH_TRANSACTION, [txParams]);
      return methodRes;
    },
    processSignTransaction: async (txParams, _2) => {
      const methodRes = await sendJrpcRequest(connector, `eip155:${chainId}`, "eth_signTransaction", [txParams]);
      return methodRes;
    },
    processEthSignMessage: async (msgParams, _2) => {
      const methodRes = await sendJrpcRequest(connector, `eip155:${chainId}`, EVM_METHOD_TYPES.ETH_SIGN, [msgParams.from, msgParams.data]);
      return methodRes;
    },
    processPersonalMessage: async (msgParams, _2) => {
      const methodRes = await sendJrpcRequest(connector, `eip155:${chainId}`, EVM_METHOD_TYPES.PERSONAL_SIGN, [msgParams.data, msgParams.from]);
      return methodRes;
    },
    processTypedMessageV4: async (msgParams) => {
      const methodRes = await sendJrpcRequest(connector, `eip155:${chainId}`, EVM_METHOD_TYPES.ETH_SIGN_TYPED_DATA_V4, [msgParams.from, msgParams.data]);
      return methodRes;
    }
  };
}
function getSolProviderHandlers({
  connector,
  chainId
}) {
  return {
    requestAccounts: async (_2) => {
      return getAccounts(connector);
    },
    getPrivateKey: async () => {
      throw rpcErrors.methodNotSupported();
    },
    getSecretKey: async () => {
      throw rpcErrors.methodNotSupported();
    },
    getPublicKey: async () => {
      throw rpcErrors.methodNotSupported();
    },
    getAccounts: async (_2) => {
      return getAccounts(connector);
    },
    signAllTransactions: async (_2) => {
      throw rpcErrors.methodNotSupported();
    },
    signAndSendTransaction: async (_2) => {
      throw rpcErrors.methodNotSupported();
    },
    signMessage: async (req) => {
      const methodRes = await sendJrpcRequest(connector, `solana:${SOLANA_CAIP_CHAIN_MAP[chainId]}`, SOLANA_METHOD_TYPES.SIGN_MESSAGE, {
        message: bs58.encode(Buffer.from(req.params.data, "utf-8"))
      });
      return methodRes.signature;
    },
    signTransaction: async (req) => {
      const accounts = await getAccounts(connector);
      if (accounts.length === 0) {
        throw providerErrors.disconnected();
      }
      const methodRes = await sendJrpcRequest(connector, `solana:${SOLANA_CAIP_CHAIN_MAP[chainId]}`, SOLANA_METHOD_TYPES.SIGN_TRANSACTION, {
        transaction: req.params.message
      });
      return methodRes.signature;
    }
  };
}
async function switchChain({
  connector,
  chainId,
  newChainId
}) {
  await sendJrpcRequest(connector, `eip155:${chainId}`, "wallet_switchEthereumChain", [{
    chainId: newChainId
  }]);
}

// node_modules/@web3auth/no-modal/dist/lib.esm/connectors/wallet-connect-v2-connector/WalletConnectV2Provider.js
var _WalletConnectV2Provider;
var WalletConnectV2Provider = class extends BaseProvider {
  constructor({
    config,
    state,
    connector
  }) {
    super({
      config: {
        chain: config.chain,
        chains: config.chains,
        skipLookupNetwork: !!config.skipLookupNetwork
      },
      state: _objectSpread2(_objectSpread2({}, state || {}), {}, {
        chainId: "loading",
        accounts: []
      })
    });
    _defineProperty(this, "connector", null);
    this.connector = connector || null;
  }
  async enable() {
    if (!this.connector) throw providerErrors.custom({
      message: "Connector is not initialized, pass wallet connect connector in constructor",
      code: 4902
    });
    await this.setupProvider(this.connector);
    return this._providerEngineProxy.request({
      method: "eth_accounts"
    });
  }
  async setupProvider(connector) {
    this.onConnectorStateUpdate(connector);
    await this.setupEngine(connector, this.config.chain.chainId);
  }
  async switchChain({
    chainId
  }) {
    if (!this.connector) throw providerErrors.custom({
      message: "Connector is not initialized, pass wallet connect connector in constructor",
      code: 4902
    });
    const currentChainConfig = this.getChain(chainId);
    const {
      chainId: currentChainId
    } = currentChainConfig;
    const currentNumChainId = parseInt(currentChainId, 16);
    await switchChain({
      connector: this.connector,
      chainId: currentNumChainId,
      newChainId: chainId
    });
    await this.setupEngine(this.connector, chainId);
    this.lookupNetwork(this.connector, chainId);
    this.update({
      chainId
    });
  }
  // no need to implement this method in wallet connect v2.
  async lookupNetwork(_2, chainId) {
    return chainId;
  }
  async setupEngine(connector, chainId) {
    const chain = this.getChain(chainId);
    if (chain.chainNamespace === CHAIN_NAMESPACES.EIP155) {
      await this.setupEthEngine(connector, chainId);
    } else if (chain.chainNamespace === CHAIN_NAMESPACES.SOLANA) {
      await this.setupSolEngine(connector, chainId);
    } else {
      throw new Error(`Unsupported chainNamespace: ${chain.chainNamespace}`);
    }
    this.emit("chainChanged", chainId);
    this.emit("connect", {
      chainId
    });
    this.update({
      chainId
    });
  }
  async setupEthEngine(connector, chainId) {
    const chain = this.getChain(chainId);
    const numChainId = parseInt(chainId, 16);
    const providerHandlers = getEthProviderHandlers({
      connector,
      chainId: numChainId
    });
    const jrpcRes = await getAccounts(connector);
    this.update({
      accounts: jrpcRes || []
    });
    const ethMiddleware = createEthMiddleware(providerHandlers);
    const chainSwitchMiddleware = this.getEthChainSwitchMiddleware();
    const engine = new JRPCEngine();
    const {
      networkMiddleware
    } = createEthJsonRpcClient(chain);
    engine.push(ethMiddleware);
    engine.push(chainSwitchMiddleware);
    engine.push(networkMiddleware);
    const provider = providerFromEngine(engine);
    this.updateProviderEngineProxy(provider);
  }
  async setupSolEngine(connector, chainId) {
    const chain = this.getChain(chainId);
    const providerHandlers = getSolProviderHandlers({
      connector,
      chainId
    });
    const jrpcRes = await getAccounts(connector);
    this.update({
      accounts: jrpcRes || []
    });
    const solMiddleware = createSolanaMiddleware(providerHandlers);
    const engine = new JRPCEngine();
    const {
      networkMiddleware
    } = createSolanaJsonRpcClient(chain);
    engine.push(solMiddleware);
    engine.push(networkMiddleware);
    const provider = providerFromEngine(engine);
    this.updateProviderEngineProxy(provider);
  }
  getEthChainSwitchMiddleware() {
    const chainSwitchHandlers = {
      switchChain: async (params) => {
        const {
          chainId
        } = params;
        await this.switchChain({
          chainId
        });
      }
    };
    const chainSwitchMiddleware = createEthChainSwitchMiddleware(chainSwitchHandlers);
    return chainSwitchMiddleware;
  }
  connectedTopic() {
    var _this$connector;
    if (!this.connector) throw WalletLoginError.notConnectedError("Wallet connect connector is not connected");
    if ((_this$connector = this.connector) !== null && _this$connector !== void 0 && (_this$connector = _this$connector.session) !== null && _this$connector !== void 0 && _this$connector.length) {
      var _this$connector$sessi;
      const lastKeyIndex = this.connector.session.keys.length - 1;
      return (_this$connector$sessi = this.connector.session.get(this.connector.session.keys[lastKeyIndex])) === null || _this$connector$sessi === void 0 ? void 0 : _this$connector$sessi.topic;
    }
    return void 0;
  }
  checkIfAccountAllowed(address) {
    if (!this.connector || !this.connectedTopic()) return false;
    const sessionData = this.connector.session.get(this.connectedTopic());
    const allAccounts = _s(sessionData.namespaces);
    let accountAllowed = false;
    for (const account of allAccounts) {
      var _parsedAccount$addres;
      const parsedAccount = ze(account);
      if (((_parsedAccount$addres = parsedAccount.address) === null || _parsedAccount$addres === void 0 ? void 0 : _parsedAccount$addres.toLowerCase()) === (address === null || address === void 0 ? void 0 : address.toLowerCase())) {
        accountAllowed = true;
        break;
      }
    }
    return accountAllowed;
  }
  async onConnectorStateUpdate(connector) {
    connector.events.on("session_event", async (payload) => {
      log.debug("session_event data", payload);
      if (!this.provider) throw WalletLoginError.notConnectedError("Wallet connect connector is not connected");
      const {
        event
      } = payload.params;
      const {
        name,
        data
      } = event || {};
      if (name === "accountsChanged" && data !== null && data !== void 0 && data.length && this.state.accounts[0] !== data[0] && this.checkIfAccountAllowed(data[0])) {
        this.update({
          accounts: data
        });
        this.emit("accountsChanged", data);
      }
      if (event.name === "chainChanged") {
        if (!data) return;
        const connectedChainId = data;
        const connectedHexChainId = `0x${connectedChainId.toString(16)}`;
        const {
          currentChain
        } = this;
        if (connectedHexChainId && currentChain.chainId !== connectedHexChainId) {
          await this.setupEngine(connector, connectedHexChainId);
        }
      }
    });
  }
};
_WalletConnectV2Provider = WalletConnectV2Provider;
_defineProperty(WalletConnectV2Provider, "getProviderInstance", async (params) => {
  const providerFactory = new _WalletConnectV2Provider({
    config: {
      chain: params.chain,
      chains: params.chains,
      skipLookupNetwork: params.skipLookupNetwork
    }
  });
  await providerFactory.setupProvider(params.connector);
  return providerFactory;
});

// node_modules/@web3auth/no-modal/node_modules/@walletconnect/core/dist/index.es.js
var import_events4 = __toESM(require_events());

// node_modules/@walletconnect/keyvaluestorage/dist/index.es.js
var x = "idb-keyval";
var z = (i3 = {}) => {
  const t = i3.base && i3.base.length > 0 ? `${i3.base}:` : "", e = (s) => t + s;
  let n2;
  return i3.dbName && i3.storeName && (n2 = createStore(i3.dbName, i3.storeName)), { name: x, options: i3, async hasItem(s) {
    return !(typeof await get(e(s), n2) > "u");
  }, async getItem(s) {
    return await get(e(s), n2) ?? null;
  }, setItem(s, a2) {
    return set(e(s), a2, n2);
  }, removeItem(s) {
    return del(e(s), n2);
  }, getKeys() {
    return keys(n2);
  }, clear() {
    return clear(n2);
  } };
};
var D2 = "WALLET_CONNECT_V2_INDEXED_DB";
var E2 = "keyvaluestorage";
var _ = class {
  constructor() {
    this.indexedDb = createStorage({ driver: z({ dbName: D2, storeName: E2 }) });
  }
  async getKeys() {
    return this.indexedDb.getKeys();
  }
  async getEntries() {
    return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t) => [t.key, t.value]);
  }
  async getItem(t) {
    const e = await this.indexedDb.getItem(t);
    if (e !== null) return e;
  }
  async setItem(t, e) {
    await this.indexedDb.setItem(t, safeJsonStringify(e));
  }
  async removeItem(t) {
    await this.indexedDb.removeItem(t);
  }
};
var l = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var c = { exports: {} };
(function() {
  let i3;
  function t() {
  }
  i3 = t, i3.prototype.getItem = function(e) {
    return this.hasOwnProperty(e) ? String(this[e]) : null;
  }, i3.prototype.setItem = function(e, n2) {
    this[e] = String(n2);
  }, i3.prototype.removeItem = function(e) {
    delete this[e];
  }, i3.prototype.clear = function() {
    const e = this;
    Object.keys(e).forEach(function(n2) {
      e[n2] = void 0, delete e[n2];
    });
  }, i3.prototype.key = function(e) {
    return e = e || 0, Object.keys(this)[e];
  }, i3.prototype.__defineGetter__("length", function() {
    return Object.keys(this).length;
  }), typeof l < "u" && l.localStorage ? c.exports = l.localStorage : typeof window < "u" && window.localStorage ? c.exports = window.localStorage : c.exports = new t();
})();
function k2(i3) {
  var t;
  return [i3[0], safeJsonParse((t = i3[1]) != null ? t : "")];
}
var K = class {
  constructor() {
    this.localStorage = c.exports;
  }
  async getKeys() {
    return Object.keys(this.localStorage);
  }
  async getEntries() {
    return Object.entries(this.localStorage).map(k2);
  }
  async getItem(t) {
    const e = this.localStorage.getItem(t);
    if (e !== null) return safeJsonParse(e);
  }
  async setItem(t, e) {
    this.localStorage.setItem(t, safeJsonStringify(e));
  }
  async removeItem(t) {
    this.localStorage.removeItem(t);
  }
};
var N2 = "wc_storage_version";
var y2 = 1;
var O = async (i3, t, e) => {
  const n2 = N2, s = await t.getItem(n2);
  if (s && s >= y2) {
    e(t);
    return;
  }
  const a2 = await i3.getKeys();
  if (!a2.length) {
    e(t);
    return;
  }
  const m2 = [];
  for (; a2.length; ) {
    const r2 = a2.shift();
    if (!r2) continue;
    const o2 = r2.toLowerCase();
    if (o2.includes("wc@") || o2.includes("walletconnect") || o2.includes("wc_") || o2.includes("wallet_connect")) {
      const f5 = await i3.getItem(r2);
      await t.setItem(r2, f5), m2.push(r2);
    }
  }
  await t.setItem(n2, y2), e(t), j(i3, m2);
};
var j = async (i3, t) => {
  t.length && t.forEach(async (e) => {
    await i3.removeItem(e);
  });
};
var h = class {
  constructor() {
    this.initialized = false, this.setInitialized = (e) => {
      this.storage = e, this.initialized = true;
    };
    const t = new K();
    this.storage = t;
    try {
      const e = new _();
      O(t, e, this.setInitialized);
    } catch {
      this.initialized = true;
    }
  }
  async getKeys() {
    return await this.initialize(), this.storage.getKeys();
  }
  async getEntries() {
    return await this.initialize(), this.storage.getEntries();
  }
  async getItem(t) {
    return await this.initialize(), this.storage.getItem(t);
  }
  async setItem(t, e) {
    return await this.initialize(), this.storage.setItem(t, e);
  }
  async removeItem(t) {
    return await this.initialize(), this.storage.removeItem(t);
  }
  async initialize() {
    this.initialized || await new Promise((t) => {
      const e = setInterval(() => {
        this.initialized && (clearInterval(e), t());
      }, 20);
    });
  }
};

// node_modules/@web3auth/no-modal/node_modules/@walletconnect/types/dist/index.es.js
var import_events3 = __toESM(require_events());
var a = Object.defineProperty;
var u = (e, s, r2) => s in e ? a(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var c2 = (e, s, r2) => u(e, typeof s != "symbol" ? s + "" : s, r2);
var h2 = class extends IEvents {
  constructor(s) {
    super(), this.opts = s, c2(this, "protocol", "wc"), c2(this, "version", 2);
  }
};
var p = Object.defineProperty;
var b = (e, s, r2) => s in e ? p(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var v = (e, s, r2) => b(e, typeof s != "symbol" ? s + "" : s, r2);
var I = class extends IEvents {
  constructor(s, r2) {
    super(), this.core = s, this.logger = r2, v(this, "records", /* @__PURE__ */ new Map());
  }
};
var y3 = class {
  constructor(s, r2) {
    this.logger = s, this.core = r2;
  }
};
var m = class extends IEvents {
  constructor(s, r2) {
    super(), this.relayer = s, this.logger = r2;
  }
};
var d = class extends IEvents {
  constructor(s) {
    super();
  }
};
var f2 = class {
  constructor(s, r2, t, q2) {
    this.core = s, this.logger = r2, this.name = t;
  }
};
var P = class extends IEvents {
  constructor(s, r2) {
    super(), this.relayer = s, this.logger = r2;
  }
};
var S = class extends IEvents {
  constructor(s, r2) {
    super(), this.core = s, this.logger = r2;
  }
};
var M = class {
  constructor(s, r2, t) {
    this.core = s, this.logger = r2, this.store = t;
  }
};
var O2 = class {
  constructor(s, r2) {
    this.projectId = s, this.logger = r2;
  }
};
var R = class {
  constructor(s, r2, t) {
    this.core = s, this.logger = r2, this.telemetryEnabled = t;
  }
};
var T = Object.defineProperty;
var k3 = (e, s, r2) => s in e ? T(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var i2 = (e, s, r2) => k3(e, typeof s != "symbol" ? s + "" : s, r2);
var J2 = class {
  constructor(s) {
    this.opts = s, i2(this, "protocol", "wc"), i2(this, "version", 2);
  }
};
var V = class {
  constructor(s) {
    this.client = s;
  }
};

// node_modules/@web3auth/no-modal/node_modules/@walletconnect/core/dist/index.es.js
var import_time2 = __toESM(require_cjs2());
var import_window_getters2 = __toESM(require_cjs3());
var Ue2 = "wc";
var Fe2 = 2;
var pe2 = "core";
var W2 = `${Ue2}@2:${pe2}:`;
var It2 = { name: pe2, logger: "error" };
var Tt2 = { database: ":memory:" };
var Ct2 = "crypto";
var Me2 = "client_ed25519_seed";
var Pt2 = import_time2.ONE_DAY;
var St2 = "keychain";
var Ot2 = "0.3";
var Rt2 = "messages";
var At2 = "0.3";
var xt2 = import_time2.SIX_HOURS;
var Nt2 = "publisher";
var $t2 = "irn";
var zt2 = "error";
var Ke2 = "wss://relay.walletconnect.org";
var Lt2 = "relayer";
var C2 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var kt2 = "_subscription";
var M2 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var jt2 = 0.1;
var Pe2 = "2.21.7";
var ee2 = { link_mode: "link_mode", relay: "relay" };
var ye2 = { inbound: "inbound", outbound: "outbound" };
var Ut2 = "0.3";
var Ft = "WALLETCONNECT_CLIENT_ID";
var Be2 = "WALLETCONNECT_LINK_MODE_APPS";
var U2 = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Mt2 = "subscription";
var Kt2 = "0.3";
var Qs = import_time2.FIVE_SECONDS * 1e3;
var Bt2 = "pairing";
var Vt2 = "0.3";
var oe = { wc_pairingDelete: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 } } };
var ae2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var V2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var qt2 = "history";
var Gt2 = "0.3";
var Wt2 = "expirer";
var q = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Ht2 = "0.3";
var Yt2 = "verify-api";
var ir2 = "https://verify.walletconnect.com";
var Jt2 = "https://verify.walletconnect.org";
var be2 = Jt2;
var Xt2 = `${be2}/v3`;
var Zt2 = [ir2, Jt2];
var Qt2 = "echo";
var ei2 = "https://echo.walletconnect.com";
var Y2 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var X2 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var rr2 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var nr = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var or2 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var ar = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var ti = 0.1;
var ii2 = "event-client";
var si2 = 86400;
var ri2 = "https://pulse.walletconnect.org/batch";
function cr2(r2, e) {
  if (r2.length >= 255) throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), i3 = 0; i3 < t.length; i3++) t[i3] = 255;
  for (var s = 0; s < r2.length; s++) {
    var n2 = r2.charAt(s), o2 = n2.charCodeAt(0);
    if (t[o2] !== 255) throw new TypeError(n2 + " is ambiguous");
    t[o2] = s;
  }
  var a2 = r2.length, c4 = r2.charAt(0), h3 = Math.log(a2) / Math.log(256), l3 = Math.log(256) / Math.log(a2);
  function p2(u2) {
    if (u2 instanceof Uint8Array || (ArrayBuffer.isView(u2) ? u2 = new Uint8Array(u2.buffer, u2.byteOffset, u2.byteLength) : Array.isArray(u2) && (u2 = Uint8Array.from(u2))), !(u2 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (u2.length === 0) return "";
    for (var m2 = 0, D3 = 0, _2 = 0, E3 = u2.length; _2 !== E3 && u2[_2] === 0; ) _2++, m2++;
    for (var L = (E3 - _2) * l3 + 1 >>> 0, I2 = new Uint8Array(L); _2 !== E3; ) {
      for (var k4 = u2[_2], T2 = 0, S2 = L - 1; (k4 !== 0 || T2 < D3) && S2 !== -1; S2--, T2++) k4 += 256 * I2[S2] >>> 0, I2[S2] = k4 % a2 >>> 0, k4 = k4 / a2 >>> 0;
      if (k4 !== 0) throw new Error("Non-zero carry");
      D3 = T2, _2++;
    }
    for (var O4 = L - D3; O4 !== L && I2[O4] === 0; ) O4++;
    for (var te2 = c4.repeat(m2); O4 < L; ++O4) te2 += r2.charAt(I2[O4]);
    return te2;
  }
  function y4(u2) {
    if (typeof u2 != "string") throw new TypeError("Expected String");
    if (u2.length === 0) return new Uint8Array();
    var m2 = 0;
    if (u2[m2] !== " ") {
      for (var D3 = 0, _2 = 0; u2[m2] === c4; ) D3++, m2++;
      for (var E3 = (u2.length - m2) * h3 + 1 >>> 0, L = new Uint8Array(E3); u2[m2]; ) {
        var I2 = t[u2.charCodeAt(m2)];
        if (I2 === 255) return;
        for (var k4 = 0, T2 = E3 - 1; (I2 !== 0 || k4 < _2) && T2 !== -1; T2--, k4++) I2 += a2 * L[T2] >>> 0, L[T2] = I2 % 256 >>> 0, I2 = I2 / 256 >>> 0;
        if (I2 !== 0) throw new Error("Non-zero carry");
        _2 = k4, m2++;
      }
      if (u2[m2] !== " ") {
        for (var S2 = E3 - _2; S2 !== E3 && L[S2] === 0; ) S2++;
        for (var O4 = new Uint8Array(D3 + (E3 - S2)), te2 = D3; S2 !== E3; ) O4[te2++] = L[S2++];
        return O4;
      }
    }
  }
  function w(u2) {
    var m2 = y4(u2);
    if (m2) return m2;
    throw new Error(`Non-${e} character`);
  }
  return { encode: p2, decodeUnsafe: y4, decode: w };
}
var hr2 = cr2;
var lr = hr2;
var ni2 = (r2) => {
  if (r2 instanceof Uint8Array && r2.constructor.name === "Uint8Array") return r2;
  if (r2 instanceof ArrayBuffer) return new Uint8Array(r2);
  if (ArrayBuffer.isView(r2)) return new Uint8Array(r2.buffer, r2.byteOffset, r2.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var ur = (r2) => new TextEncoder().encode(r2);
var dr2 = (r2) => new TextDecoder().decode(r2);
var gr2 = class {
  constructor(e, t, i3) {
    this.name = e, this.prefix = t, this.baseEncode = i3;
  }
  encode(e) {
    if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var pr2 = class {
  constructor(e, t, i3) {
    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i3;
  }
  decode(e) {
    if (typeof e == "string") {
      if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e) {
    return oi2(this, e);
  }
};
var yr2 = class {
  constructor(e) {
    this.decoders = e;
  }
  or(e) {
    return oi2(this, e);
  }
  decode(e) {
    const t = e[0], i3 = this.decoders[t];
    if (i3) return i3.decode(e);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var oi2 = (r2, e) => new yr2({ ...r2.decoders || { [r2.prefix]: r2 }, ...e.decoders || { [e.prefix]: e } });
var br2 = class {
  constructor(e, t, i3, s) {
    this.name = e, this.prefix = t, this.baseEncode = i3, this.baseDecode = s, this.encoder = new gr2(e, t, i3), this.decoder = new pr2(e, t, s);
  }
  encode(e) {
    return this.encoder.encode(e);
  }
  decode(e) {
    return this.decoder.decode(e);
  }
};
var Se2 = ({ name: r2, prefix: e, encode: t, decode: i3 }) => new br2(r2, e, t, i3);
var me2 = ({ prefix: r2, name: e, alphabet: t }) => {
  const { encode: i3, decode: s } = lr(t, e);
  return Se2({ prefix: r2, name: e, encode: i3, decode: (n2) => ni2(s(n2)) });
};
var mr2 = (r2, e, t, i3) => {
  const s = {};
  for (let l3 = 0; l3 < e.length; ++l3) s[e[l3]] = l3;
  let n2 = r2.length;
  for (; r2[n2 - 1] === "="; ) --n2;
  const o2 = new Uint8Array(n2 * t / 8 | 0);
  let a2 = 0, c4 = 0, h3 = 0;
  for (let l3 = 0; l3 < n2; ++l3) {
    const p2 = s[r2[l3]];
    if (p2 === void 0) throw new SyntaxError(`Non-${i3} character`);
    c4 = c4 << t | p2, a2 += t, a2 >= 8 && (a2 -= 8, o2[h3++] = 255 & c4 >> a2);
  }
  if (a2 >= t || 255 & c4 << 8 - a2) throw new SyntaxError("Unexpected end of data");
  return o2;
};
var fr2 = (r2, e, t) => {
  const i3 = e[e.length - 1] === "=", s = (1 << t) - 1;
  let n2 = "", o2 = 0, a2 = 0;
  for (let c4 = 0; c4 < r2.length; ++c4) for (a2 = a2 << 8 | r2[c4], o2 += 8; o2 > t; ) o2 -= t, n2 += e[s & a2 >> o2];
  if (o2 && (n2 += e[s & a2 << t - o2]), i3) for (; n2.length * t & 7; ) n2 += "=";
  return n2;
};
var A2 = ({ name: r2, prefix: e, bitsPerChar: t, alphabet: i3 }) => Se2({ prefix: e, name: r2, encode(s) {
  return fr2(s, i3, t);
}, decode(s) {
  return mr2(s, i3, t, r2);
} });
var Dr2 = Se2({ prefix: "\0", name: "identity", encode: (r2) => dr2(r2), decode: (r2) => ur(r2) });
var vr2 = Object.freeze({ __proto__: null, identity: Dr2 });
var wr2 = A2({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var _r2 = Object.freeze({ __proto__: null, base2: wr2 });
var Er2 = A2({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Ir2 = Object.freeze({ __proto__: null, base8: Er2 });
var Tr2 = me2({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Cr2 = Object.freeze({ __proto__: null, base10: Tr2 });
var Pr2 = A2({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Sr2 = A2({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Or2 = Object.freeze({ __proto__: null, base16: Pr2, base16upper: Sr2 });
var Rr2 = A2({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Ar2 = A2({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var xr2 = A2({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Nr2 = A2({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var $r2 = A2({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var zr = A2({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var Lr2 = A2({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var kr2 = A2({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var jr2 = A2({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var Ur2 = Object.freeze({ __proto__: null, base32: Rr2, base32upper: Ar2, base32pad: xr2, base32padupper: Nr2, base32hex: $r2, base32hexupper: zr, base32hexpad: Lr2, base32hexpadupper: kr2, base32z: jr2 });
var Fr = me2({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var Mr2 = me2({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var Kr = Object.freeze({ __proto__: null, base36: Fr, base36upper: Mr2 });
var Br2 = me2({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Vr2 = me2({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var qr2 = Object.freeze({ __proto__: null, base58btc: Br2, base58flickr: Vr2 });
var Gr2 = A2({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Wr2 = A2({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var Hr2 = A2({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var Yr = A2({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Jr = Object.freeze({ __proto__: null, base64: Gr2, base64pad: Wr2, base64url: Hr2, base64urlpad: Yr });
var ai2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Xr2 = ai2.reduce((r2, e, t) => (r2[t] = e, r2), []);
var Zr2 = ai2.reduce((r2, e, t) => (r2[e.codePointAt(0)] = t, r2), []);
function Qr2(r2) {
  return r2.reduce((e, t) => (e += Xr2[t], e), "");
}
function en2(r2) {
  const e = [];
  for (const t of r2) {
    const i3 = Zr2[t.codePointAt(0)];
    if (i3 === void 0) throw new Error(`Non-base256emoji character: ${t}`);
    e.push(i3);
  }
  return new Uint8Array(e);
}
var tn2 = Se2({ prefix: "🚀", name: "base256emoji", encode: Qr2, decode: en2 });
var sn3 = Object.freeze({ __proto__: null, base256emoji: tn2 });
var rn2 = hi2;
var ci2 = 128;
var nn2 = 127;
var on2 = ~nn2;
var an2 = Math.pow(2, 31);
function hi2(r2, e, t) {
  e = e || [], t = t || 0;
  for (var i3 = t; r2 >= an2; ) e[t++] = r2 & 255 | ci2, r2 /= 128;
  for (; r2 & on2; ) e[t++] = r2 & 255 | ci2, r2 >>>= 7;
  return e[t] = r2 | 0, hi2.bytes = t - i3 + 1, e;
}
var cn2 = Ve2;
var hn2 = 128;
var li2 = 127;
function Ve2(r2, i3) {
  var t = 0, i3 = i3 || 0, s = 0, n2 = i3, o2, a2 = r2.length;
  do {
    if (n2 >= a2) throw Ve2.bytes = 0, new RangeError("Could not decode varint");
    o2 = r2[n2++], t += s < 28 ? (o2 & li2) << s : (o2 & li2) * Math.pow(2, s), s += 7;
  } while (o2 >= hn2);
  return Ve2.bytes = n2 - i3, t;
}
var ln2 = Math.pow(2, 7);
var un2 = Math.pow(2, 14);
var dn2 = Math.pow(2, 21);
var gn2 = Math.pow(2, 28);
var pn2 = Math.pow(2, 35);
var yn2 = Math.pow(2, 42);
var bn2 = Math.pow(2, 49);
var mn2 = Math.pow(2, 56);
var fn2 = Math.pow(2, 63);
var Dn2 = function(r2) {
  return r2 < ln2 ? 1 : r2 < un2 ? 2 : r2 < dn2 ? 3 : r2 < gn2 ? 4 : r2 < pn2 ? 5 : r2 < yn2 ? 6 : r2 < bn2 ? 7 : r2 < mn2 ? 8 : r2 < fn2 ? 9 : 10;
};
var vn2 = { encode: rn2, decode: cn2, encodingLength: Dn2 };
var ui2 = vn2;
var di2 = (r2, e, t = 0) => (ui2.encode(r2, e, t), e);
var gi2 = (r2) => ui2.encodingLength(r2);
var qe2 = (r2, e) => {
  const t = e.byteLength, i3 = gi2(r2), s = i3 + gi2(t), n2 = new Uint8Array(s + t);
  return di2(r2, n2, 0), di2(t, n2, i3), n2.set(e, s), new wn2(r2, t, e, n2);
};
var wn2 = class {
  constructor(e, t, i3, s) {
    this.code = e, this.size = t, this.digest = i3, this.bytes = s;
  }
};
var pi2 = ({ name: r2, code: e, encode: t }) => new _n2(r2, e, t);
var _n2 = class {
  constructor(e, t, i3) {
    this.name = e, this.code = t, this.encode = i3;
  }
  digest(e) {
    if (e instanceof Uint8Array) {
      const t = this.encode(e);
      return t instanceof Uint8Array ? qe2(this.code, t) : t.then((i3) => qe2(this.code, i3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var yi2 = (r2) => async (e) => new Uint8Array(await crypto.subtle.digest(r2, e));
var En2 = pi2({ name: "sha2-256", code: 18, encode: yi2("SHA-256") });
var In2 = pi2({ name: "sha2-512", code: 19, encode: yi2("SHA-512") });
var Tn2 = Object.freeze({ __proto__: null, sha256: En2, sha512: In2 });
var bi2 = 0;
var Cn2 = "identity";
var mi2 = ni2;
var Pn2 = (r2) => qe2(bi2, mi2(r2));
var Sn2 = { code: bi2, name: Cn2, encode: mi2, digest: Pn2 };
var On2 = Object.freeze({ __proto__: null, identity: Sn2 });
new TextEncoder(), new TextDecoder();
var fi2 = { ...vr2, ..._r2, ...Ir2, ...Cr2, ...Or2, ...Ur2, ...Kr, ...qr2, ...Jr, ...sn3 };
({ ...Tn2, ...On2 });
function Di2(r2) {
  return globalThis.Buffer != null ? new Uint8Array(r2.buffer, r2.byteOffset, r2.byteLength) : r2;
}
function Rn2(r2 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Di2(globalThis.Buffer.allocUnsafe(r2)) : new Uint8Array(r2);
}
function vi2(r2, e, t, i3) {
  return { name: r2, prefix: e, encoder: { name: r2, prefix: e, encode: t }, decoder: { decode: i3 } };
}
var wi2 = vi2("utf8", "u", (r2) => "u" + new TextDecoder("utf8").decode(r2), (r2) => new TextEncoder().encode(r2.substring(1)));
var Ge = vi2("ascii", "a", (r2) => {
  let e = "a";
  for (let t = 0; t < r2.length; t++) e += String.fromCharCode(r2[t]);
  return e;
}, (r2) => {
  r2 = r2.substring(1);
  const e = Rn2(r2.length);
  for (let t = 0; t < r2.length; t++) e[t] = r2.charCodeAt(t);
  return e;
});
var An2 = { utf8: wi2, "utf-8": wi2, hex: fi2.base16, latin1: Ge, ascii: Ge, binary: Ge, ...fi2 };
function xn2(r2, e = "utf8") {
  const t = An2[e];
  if (!t) throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Di2(globalThis.Buffer.from(r2, "utf-8")) : t.decoder.decode(`${t.prefix}${r2}`);
}
var Nn2 = Object.defineProperty;
var $n2 = (r2, e, t) => e in r2 ? Nn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var J3 = (r2, e, t) => $n2(r2, typeof e != "symbol" ? e + "" : e, t);
var _i2 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, J3(this, "keychain", /* @__PURE__ */ new Map()), J3(this, "name", St2), J3(this, "version", Ot2), J3(this, "initialized", false), J3(this, "storagePrefix", W2), J3(this, "init", async () => {
      if (!this.initialized) {
        const i3 = await this.getKeyChain();
        typeof i3 < "u" && (this.keychain = i3), this.initialized = true;
      }
    }), J3(this, "has", (i3) => (this.isInitialized(), this.keychain.has(i3))), J3(this, "set", async (i3, s) => {
      this.isInitialized(), this.keychain.set(i3, s), await this.persist();
    }), J3(this, "get", (i3) => {
      this.isInitialized();
      const s = this.keychain.get(i3);
      if (typeof s > "u") {
        const { message: n2 } = Et("NO_MATCHING_KEY", `${this.name}: ${i3}`);
        throw new Error(n2);
      }
      return s;
    }), J3(this, "del", async (i3) => {
      this.isInitialized(), this.keychain.delete(i3), await this.persist();
    }), this.core = e, this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e) {
    await this.core.storage.setItem(this.storageKey, Ys(e));
  }
  async getKeyChain() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? Xs(e) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var zn2 = Object.defineProperty;
var Ln2 = (r2, e, t) => e in r2 ? zn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var x2 = (r2, e, t) => Ln2(r2, typeof e != "symbol" ? e + "" : e, t);
var Ei2 = class {
  constructor(e, t, i3) {
    this.core = e, this.logger = t, x2(this, "name", Ct2), x2(this, "keychain"), x2(this, "randomSessionIdentifier", qc()), x2(this, "initialized", false), x2(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), x2(this, "hasKeys", (s) => (this.isInitialized(), this.keychain.has(s))), x2(this, "getClientId", async () => {
      this.isInitialized();
      const s = await this.getClientSeed(), n2 = Po(s);
      return Qe(n2.publicKey);
    }), x2(this, "generateKeyPair", () => {
      this.isInitialized();
      const s = Vc();
      return this.setPrivateKey(s.publicKey, s.privateKey);
    }), x2(this, "signJWT", async (s) => {
      this.isInitialized();
      const n2 = await this.getClientSeed(), o2 = Po(n2), a2 = this.randomSessionIdentifier, c4 = Pt2;
      return await Qo(a2, s, c4, o2);
    }), x2(this, "generateSharedKey", (s, n2, o2) => {
      this.isInitialized();
      const a2 = this.getPrivateKey(s), c4 = Kc(a2, n2);
      return this.setSymKey(c4, o2);
    }), x2(this, "setSymKey", async (s, n2) => {
      this.isInitialized();
      const o2 = n2 || Fc(s);
      return await this.keychain.set(o2, s), o2;
    }), x2(this, "deleteKeyPair", async (s) => {
      this.isInitialized(), await this.keychain.del(s);
    }), x2(this, "deleteSymKey", async (s) => {
      this.isInitialized(), await this.keychain.del(s);
    }), x2(this, "encode", async (s, n2, o2) => {
      this.isInitialized();
      const a2 = Ho(o2), c4 = safeJsonStringify(n2);
      if (Qc(a2)) return Wc(c4, o2 == null ? void 0 : o2.encoding);
      if (Jc(a2)) {
        const y4 = a2.senderPublicKey, w = a2.receiverPublicKey;
        s = await this.generateSharedKey(y4, w);
      }
      const h3 = this.getSymKey(s), { type: l3, senderPublicKey: p2 } = a2;
      return Gc({ type: l3, symKey: h3, message: c4, senderPublicKey: p2, encoding: o2 == null ? void 0 : o2.encoding });
    }), x2(this, "decode", async (s, n2, o2) => {
      this.isInitialized();
      const a2 = Xc(n2, o2);
      if (Qc(a2)) {
        const c4 = Yc(n2, o2 == null ? void 0 : o2.encoding);
        return safeJsonParse(c4);
      }
      if (Jc(a2)) {
        const c4 = a2.receiverPublicKey, h3 = a2.senderPublicKey;
        s = await this.generateSharedKey(c4, h3);
      }
      try {
        const c4 = this.getSymKey(s), h3 = Zc({ symKey: c4, encoded: n2, encoding: o2 == null ? void 0 : o2.encoding });
        return safeJsonParse(h3);
      } catch (c4) {
        this.logger.error(`Failed to decode message from topic: '${s}', clientId: '${await this.getClientId()}'`), this.logger.error(c4);
      }
    }), x2(this, "getPayloadType", (s, n2 = Qt) => {
      const o2 = Me({ encoded: s, encoding: n2 });
      return Vt(o2.type);
    }), x2(this, "getPayloadSenderPublicKey", (s, n2 = Qt) => {
      const o2 = Me({ encoded: s, encoding: n2 });
      return o2.senderPublicKey ? toString(o2.senderPublicKey, tt) : void 0;
    }), this.core = e, this.logger = E(t, this.name), this.keychain = i3 || new _i2(this.core, this.logger);
  }
  get context() {
    return y(this.logger);
  }
  async setPrivateKey(e, t) {
    return await this.keychain.set(e, t), e;
  }
  getPrivateKey(e) {
    return this.keychain.get(e);
  }
  async getClientSeed() {
    let e = "";
    try {
      e = this.keychain.get(Me2);
    } catch {
      e = qc(), await this.keychain.set(Me2, e);
    }
    return xn2(e, "base16");
  }
  getSymKey(e) {
    return this.keychain.get(e);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var kn2 = Object.defineProperty;
var jn2 = Object.defineProperties;
var Un2 = Object.getOwnPropertyDescriptors;
var Ii2 = Object.getOwnPropertySymbols;
var Fn2 = Object.prototype.hasOwnProperty;
var Mn2 = Object.prototype.propertyIsEnumerable;
var We = (r2, e, t) => e in r2 ? kn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Kn2 = (r2, e) => {
  for (var t in e || (e = {})) Fn2.call(e, t) && We(r2, t, e[t]);
  if (Ii2) for (var t of Ii2(e)) Mn2.call(e, t) && We(r2, t, e[t]);
  return r2;
};
var Bn2 = (r2, e) => jn2(r2, Un2(e));
var K2 = (r2, e, t) => We(r2, typeof e != "symbol" ? e + "" : e, t);
var Ti2 = class extends y3 {
  constructor(e, t) {
    super(e, t), this.logger = e, this.core = t, K2(this, "messages", /* @__PURE__ */ new Map()), K2(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), K2(this, "name", Rt2), K2(this, "version", At2), K2(this, "initialized", false), K2(this, "storagePrefix", W2), K2(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const i3 = await this.getRelayerMessages();
          typeof i3 < "u" && (this.messages = i3);
          const s = await this.getRelayerMessagesWithoutClientAck();
          typeof s < "u" && (this.messagesWithoutClientAck = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (i3) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i3);
        } finally {
          this.initialized = true;
        }
      }
    }), K2(this, "set", async (i3, s, n2) => {
      this.isInitialized();
      const o2 = zc(s);
      let a2 = this.messages.get(i3);
      if (typeof a2 > "u" && (a2 = {}), typeof a2[o2] < "u") return o2;
      if (a2[o2] = s, this.messages.set(i3, a2), n2 === ye2.inbound) {
        const c4 = this.messagesWithoutClientAck.get(i3) || {};
        this.messagesWithoutClientAck.set(i3, Bn2(Kn2({}, c4), { [o2]: s }));
      }
      return await this.persist(), o2;
    }), K2(this, "get", (i3) => {
      this.isInitialized();
      let s = this.messages.get(i3);
      return typeof s > "u" && (s = {}), s;
    }), K2(this, "getWithoutAck", (i3) => {
      this.isInitialized();
      const s = {};
      for (const n2 of i3) {
        const o2 = this.messagesWithoutClientAck.get(n2) || {};
        s[n2] = Object.values(o2);
      }
      return s;
    }), K2(this, "has", (i3, s) => {
      this.isInitialized();
      const n2 = this.get(i3), o2 = zc(s);
      return typeof n2[o2] < "u";
    }), K2(this, "ack", async (i3, s) => {
      this.isInitialized();
      const n2 = this.messagesWithoutClientAck.get(i3);
      if (typeof n2 > "u") return;
      const o2 = zc(s);
      delete n2[o2], Object.keys(n2).length === 0 ? this.messagesWithoutClientAck.delete(i3) : this.messagesWithoutClientAck.set(i3, n2), await this.persist();
    }), K2(this, "del", async (i3) => {
      this.isInitialized(), this.messages.delete(i3), this.messagesWithoutClientAck.delete(i3), await this.persist();
    }), this.logger = E(e, this.name), this.core = t;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e) {
    await this.core.storage.setItem(this.storageKey, Ys(e));
  }
  async setRelayerMessagesWithoutClientAck(e) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, Ys(e));
  }
  async getRelayerMessages() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? Xs(e) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e < "u" ? Xs(e) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Vn2 = Object.defineProperty;
var qn2 = Object.defineProperties;
var Gn = Object.getOwnPropertyDescriptors;
var Ci2 = Object.getOwnPropertySymbols;
var Wn = Object.prototype.hasOwnProperty;
var Hn2 = Object.prototype.propertyIsEnumerable;
var He2 = (r2, e, t) => e in r2 ? Vn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var ce2 = (r2, e) => {
  for (var t in e || (e = {})) Wn.call(e, t) && He2(r2, t, e[t]);
  if (Ci2) for (var t of Ci2(e)) Hn2.call(e, t) && He2(r2, t, e[t]);
  return r2;
};
var Pi2 = (r2, e) => qn2(r2, Gn(e));
var G2 = (r2, e, t) => He2(r2, typeof e != "symbol" ? e + "" : e, t);
var Yn = class extends m {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, G2(this, "events", new import_events4.EventEmitter()), G2(this, "name", Nt2), G2(this, "queue", /* @__PURE__ */ new Map()), G2(this, "publishTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE)), G2(this, "initialPublishTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), G2(this, "needsTransportRestart", false), G2(this, "publish", async (i3, s, n2) => {
      var o2, a2, c4, h3, l3;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: i3, message: s, opts: n2 } });
      const p2 = (n2 == null ? void 0 : n2.ttl) || xt2, y4 = (n2 == null ? void 0 : n2.prompt) || false, w = (n2 == null ? void 0 : n2.tag) || 0, u2 = (n2 == null ? void 0 : n2.id) || getBigIntRpcId().toString(), m2 = na(ea().protocol), D3 = { id: u2, method: (n2 == null ? void 0 : n2.publishMethod) || m2.publish, params: ce2({ topic: i3, message: s, ttl: p2, prompt: y4, tag: w, attestation: n2 == null ? void 0 : n2.attestation }, (n2 == null ? void 0 : n2.tvf) && { tvf: n2.tvf }) }, _2 = `Failed to publish payload, please try again. id:${u2} tag:${w}`;
      try {
        kt((o2 = D3.params) == null ? void 0 : o2.prompt) && ((a2 = D3.params) == null || delete a2.prompt), kt((c4 = D3.params) == null ? void 0 : c4.tag) && ((h3 = D3.params) == null || delete h3.tag);
        const E3 = new Promise(async (L) => {
          const I2 = ({ id: T2 }) => {
            var S2;
            ((S2 = D3.id) == null ? void 0 : S2.toString()) === T2.toString() && (this.removeRequestFromQueue(T2), this.relayer.events.removeListener(C2.publish, I2), L());
          };
          this.relayer.events.on(C2.publish, I2);
          const k4 = ni(new Promise((T2, S2) => {
            this.rpcPublish(D3, n2).then(T2).catch((O4) => {
              this.logger.warn(O4, O4 == null ? void 0 : O4.message), S2(O4);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${u2} tag:${w}`);
          try {
            await k4, this.events.removeListener(C2.publish, I2);
          } catch (T2) {
            this.queue.set(u2, { request: D3, opts: n2, attempt: 1 }), this.logger.warn(T2, T2 == null ? void 0 : T2.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: u2, topic: i3, message: s, opts: n2 } }), await ni(E3, this.publishTimeout, _2);
      } catch (E3) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(E3), (l3 = n2 == null ? void 0 : n2.internal) != null && l3.throwOnFailedPublish) throw E3;
      } finally {
        this.queue.delete(u2);
      }
    }), G2(this, "publishCustom", async (i3) => {
      var s, n2, o2, a2, c4;
      this.logger.debug("Publishing custom payload"), this.logger.trace({ type: "method", method: "publishCustom", params: i3 });
      const { payload: h3, opts: l3 = {} } = i3, { attestation: p2, tvf: y4, publishMethod: w, prompt: u2, tag: m2, ttl: D3 = import_time2.FIVE_MINUTES } = l3, _2 = l3.id || getBigIntRpcId().toString(), E3 = na(ea().protocol), L = w || E3.publish, I2 = { id: _2, method: L, params: ce2(Pi2(ce2({}, h3), { ttl: D3, prompt: u2, tag: m2, attestation: p2 }), y4) }, k4 = `Failed to publish custom payload, please try again. id:${_2} tag:${m2}`;
      try {
        kt((s = I2.params) == null ? void 0 : s.prompt) && ((n2 = I2.params) == null || delete n2.prompt), kt((o2 = I2.params) == null ? void 0 : o2.tag) && ((a2 = I2.params) == null || delete a2.tag);
        const T2 = new Promise(async (S2) => {
          const O4 = ({ id: Z }) => {
            var _e3;
            ((_e3 = I2.id) == null ? void 0 : _e3.toString()) === Z.toString() && (this.removeRequestFromQueue(Z), this.relayer.events.removeListener(C2.publish, O4), S2());
          };
          this.relayer.events.on(C2.publish, O4);
          const te2 = ni(new Promise((Z, _e3) => {
            this.rpcPublish(I2, l3).then(Z).catch((Ee) => {
              this.logger.warn(Ee, Ee == null ? void 0 : Ee.message), _e3(Ee);
            });
          }), this.initialPublishTimeout, `Failed initial custom payload publish, retrying.... method:${L} id:${_2} tag:${m2}`);
          try {
            await te2, this.events.removeListener(C2.publish, O4);
          } catch (Z) {
            this.queue.set(_2, { request: I2, opts: l3, attempt: 1 }), this.logger.warn(Z, Z == null ? void 0 : Z.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: _2, payload: h3, opts: l3 } }), await ni(T2, this.publishTimeout, k4);
      } catch (T2) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(T2), (c4 = l3 == null ? void 0 : l3.internal) != null && c4.throwOnFailedPublish) throw T2;
      } finally {
        this.queue.delete(_2);
      }
    }), G2(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), G2(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), G2(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), G2(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.relayer = e, this.logger = E(t, this.name), this.registerEventListeners();
  }
  get context() {
    return y(this.logger);
  }
  async rpcPublish(e, t) {
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: e });
    const i3 = await this.relayer.request(e);
    return this.relayer.events.emit(C2.publish, ce2(ce2({}, e), t)), this.logger.debug("Successfully Published Payload"), i3;
  }
  removeRequestFromQueue(e) {
    this.queue.delete(e);
  }
  checkQueue() {
    this.queue.forEach(async (e, t) => {
      var i3;
      const s = e.attempt + 1;
      this.queue.set(t, Pi2(ce2({}, e), { attempt: s })), this.logger.warn({}, `Publisher: queue->publishing: ${e.request.id}, tag: ${(i3 = e.request.params) == null ? void 0 : i3.tag}, attempt: ${s}`), await this.rpcPublish(e.request, e.opts), this.logger.warn({}, `Publisher: queue->published: ${e.request.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C2.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C2.message_ack, (e) => {
      this.removeRequestFromQueue(e.id.toString());
    });
  }
};
var Jn2 = Object.defineProperty;
var Xn = (r2, e, t) => e in r2 ? Jn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var he2 = (r2, e, t) => Xn(r2, typeof e != "symbol" ? e + "" : e, t);
var Zn = class {
  constructor() {
    he2(this, "map", /* @__PURE__ */ new Map()), he2(this, "set", (e, t) => {
      const i3 = this.get(e);
      this.exists(e, t) || this.map.set(e, [...i3, t]);
    }), he2(this, "get", (e) => this.map.get(e) || []), he2(this, "exists", (e, t) => this.get(e).includes(t)), he2(this, "delete", (e, t) => {
      if (typeof t > "u") {
        this.map.delete(e);
        return;
      }
      if (!this.map.has(e)) return;
      const i3 = this.get(e);
      if (!this.exists(e, t)) return;
      const s = i3.filter((n2) => n2 !== t);
      if (!s.length) {
        this.map.delete(e);
        return;
      }
      this.map.set(e, s);
    }), he2(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Qn2 = Object.defineProperty;
var eo2 = Object.defineProperties;
var to2 = Object.getOwnPropertyDescriptors;
var Si2 = Object.getOwnPropertySymbols;
var io2 = Object.prototype.hasOwnProperty;
var so2 = Object.prototype.propertyIsEnumerable;
var Ye2 = (r2, e, t) => e in r2 ? Qn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var fe2 = (r2, e) => {
  for (var t in e || (e = {})) io2.call(e, t) && Ye2(r2, t, e[t]);
  if (Si2) for (var t of Si2(e)) so2.call(e, t) && Ye2(r2, t, e[t]);
  return r2;
};
var Je = (r2, e) => eo2(r2, to2(e));
var f3 = (r2, e, t) => Ye2(r2, typeof e != "symbol" ? e + "" : e, t);
var Oi2 = class extends P {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, f3(this, "subscriptions", /* @__PURE__ */ new Map()), f3(this, "topicMap", new Zn()), f3(this, "events", new import_events4.EventEmitter()), f3(this, "name", Mt2), f3(this, "version", Kt2), f3(this, "pending", /* @__PURE__ */ new Map()), f3(this, "cached", []), f3(this, "initialized", false), f3(this, "storagePrefix", W2), f3(this, "subscribeTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE)), f3(this, "initialSubscribeTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), f3(this, "clientId"), f3(this, "batchSubscribeTopicsLimit", 500), f3(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f3(this, "subscribe", async (i3, s) => {
      var n2;
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s } });
      try {
        const o2 = ea(s), a2 = { topic: i3, relay: o2, transportType: s == null ? void 0 : s.transportType };
        (n2 = s == null ? void 0 : s.internal) != null && n2.skipSubscribe || this.pending.set(i3, a2);
        const c4 = await this.rpcSubscribe(i3, o2, s);
        return typeof c4 == "string" && (this.onSubscribe(c4, a2), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s } })), c4;
      } catch (o2) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(o2), o2;
      }
    }), f3(this, "unsubscribe", async (i3, s) => {
      this.isInitialized(), typeof (s == null ? void 0 : s.id) < "u" ? await this.unsubscribeById(i3, s.id, s) : await this.unsubscribeByTopic(i3, s);
    }), f3(this, "isSubscribed", (i3) => new Promise((s) => {
      s(this.topicMap.topics.includes(i3));
    })), f3(this, "isKnownTopic", (i3) => new Promise((s) => {
      s(this.topicMap.topics.includes(i3) || this.pending.has(i3) || this.cached.some((n2) => n2.topic === i3));
    })), f3(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), f3(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), f3(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), f3(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), f3(this, "start", async () => {
      await this.onConnect();
    }), f3(this, "stop", async () => {
      await this.onDisconnect();
    }), f3(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f3(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const i3 = [];
      this.pending.forEach((s) => {
        i3.push(s);
      }), await this.batchSubscribe(i3);
    }), f3(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r.pulse, async () => {
        await this.checkPending();
      }), this.events.on(U2.created, async (i3) => {
        const s = U2.created;
        this.logger.info(`Emitting ${s}`), this.logger.debug({ type: "event", event: s, data: i3 }), await this.persist();
      }), this.events.on(U2.deleted, async (i3) => {
        const s = U2.deleted;
        this.logger.info(`Emitting ${s}`), this.logger.debug({ type: "event", event: s, data: i3 }), await this.persist();
      });
    }), this.relayer = e, this.logger = E(t, this.name), this.clientId = "";
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e, t) {
    let i3 = false;
    try {
      i3 = this.getSubscription(e).topic === t;
    } catch {
    }
    return i3;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e, t) {
    const i3 = this.topicMap.get(e);
    await Promise.all(i3.map(async (s) => await this.unsubscribeById(e, s, t)));
  }
  async unsubscribeById(e, t, i3) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: i3 } });
    try {
      const s = ea(i3);
      await this.restartToComplete({ topic: e, id: t, relay: s }), await this.rpcUnsubscribe(e, t, s);
      const n2 = Kt("USER_DISCONNECTED", `${this.name}, ${e}`);
      await this.onUnsubscribe(e, t, n2), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: i3 } });
    } catch (s) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(s), s;
    }
  }
  async rpcSubscribe(e, t, i3) {
    var s, n2;
    const o2 = await this.getSubscriptionId(e);
    if ((s = i3 == null ? void 0 : i3.internal) != null && s.skipSubscribe) return o2;
    (!i3 || (i3 == null ? void 0 : i3.transportType) === ee2.relay) && await this.restartToComplete({ topic: e, id: e, relay: t });
    const a2 = { method: na(t.protocol).subscribe, params: { topic: e } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: a2 });
    const c4 = (n2 = i3 == null ? void 0 : i3.internal) == null ? void 0 : n2.throwOnFailedPublish;
    try {
      if ((i3 == null ? void 0 : i3.transportType) === ee2.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(a2).catch((p2) => this.logger.warn(p2));
      }, (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND)), o2;
      const h3 = new Promise(async (p2) => {
        const y4 = (w) => {
          w.topic === e && (this.events.removeListener(U2.created, y4), p2(w.id));
        };
        this.events.on(U2.created, y4);
        try {
          const w = await ni(new Promise((u2, m2) => {
            this.relayer.request(a2).catch((D3) => {
              this.logger.warn(D3, D3 == null ? void 0 : D3.message), m2(D3);
            }).then(u2);
          }), this.initialSubscribeTimeout, `Subscribing to ${e} failed, please try again`);
          this.events.removeListener(U2.created, y4), p2(w);
        } catch {
        }
      }), l3 = await ni(h3, this.subscribeTimeout, `Subscribing to ${e} failed, please try again`);
      if (!l3 && c4) throw new Error(`Subscribing to ${e} failed, please try again`);
      return l3 ? o2 : null;
    } catch (h3) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C2.connection_stalled), c4) throw h3;
    }
    return null;
  }
  async rpcBatchSubscribe(e) {
    if (!e.length) return;
    const t = e[0].relay, i3 = { method: na(t.protocol).batchSubscribe, params: { topics: e.map((s) => s.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    try {
      await await ni(new Promise((s) => {
        this.relayer.request(i3).catch((n2) => this.logger.warn(n2)).then(s);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e) {
    if (!e.length) return;
    const t = e[0].relay, i3 = { method: na(t.protocol).batchFetchMessages, params: { topics: e.map((n2) => n2.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    let s;
    try {
      s = await await ni(new Promise((n2, o2) => {
        this.relayer.request(i3).catch((a2) => {
          this.logger.warn(a2), o2(a2);
        }).then(n2);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
    return s;
  }
  rpcUnsubscribe(e, t, i3) {
    const s = { method: na(i3.protocol).unsubscribe, params: { topic: e, id: t } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s }), this.relayer.request(s);
  }
  onSubscribe(e, t) {
    this.setSubscription(e, Je(fe2({}, t), { id: e })), this.pending.delete(t.topic);
  }
  onBatchSubscribe(e) {
    e.length && e.forEach((t) => {
      this.setSubscription(t.id, fe2({}, t)), this.pending.delete(t.topic);
    });
  }
  async onUnsubscribe(e, t, i3) {
    this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, i3), await this.relayer.messages.del(e);
  }
  async setRelayerSubscriptions(e) {
    await this.relayer.core.storage.setItem(this.storageKey, e);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e, t) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e, subscription: t }), this.addSubscription(e, t);
  }
  addSubscription(e, t) {
    this.subscriptions.set(e, fe2({}, t)), this.topicMap.set(t.topic, e), this.events.emit(U2.created, t);
  }
  getSubscription(e) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e });
    const t = this.subscriptions.get(e);
    if (!t) {
      const { message: i3 } = Et("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(i3);
    }
    return t;
  }
  deleteSubscription(e, t) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e, reason: t });
    const i3 = this.getSubscription(e);
    this.subscriptions.delete(e), this.topicMap.delete(i3.topic, e), this.events.emit(U2.deleted, Je(fe2({}, i3), { reason: t }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit(U2.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e = [...this.cached], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let i3 = 0; i3 < t; i3++) {
        const s = e.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s);
      }
    }
    this.events.emit(U2.resubscribed);
  }
  async restore() {
    try {
      const e = await this.getRelayerSubscriptions();
      if (typeof e > "u" || !e.length) return;
      if (this.subscriptions.size && !e.every((t) => {
        var i3;
        return t.topic === ((i3 = this.subscriptions.get(t.id)) == null ? void 0 : i3.topic);
      })) {
        const { message: t } = Et("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);
    }
  }
  async batchSubscribe(e) {
    e.length && (await this.rpcBatchSubscribe(e), this.onBatchSubscribe(await Promise.all(e.map(async (t) => Je(fe2({}, t), { id: await this.getSubscriptionId(t.topic) })))));
  }
  async batchFetchMessages(e) {
    if (!e.length) return;
    this.logger.trace(`Fetching batch messages for ${e.length} subscriptions`);
    const t = await this.rpcBatchFetchMessages(e);
    t && t.messages && (await pi((0, import_time2.toMiliseconds)(import_time2.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async restartToComplete(e) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e) {
    return zc(e + await this.getClientId());
  }
};
var ro2 = Object.defineProperty;
var Ri2 = Object.getOwnPropertySymbols;
var no2 = Object.prototype.hasOwnProperty;
var oo2 = Object.prototype.propertyIsEnumerable;
var Xe2 = (r2, e, t) => e in r2 ? ro2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Ai2 = (r2, e) => {
  for (var t in e || (e = {})) no2.call(e, t) && Xe2(r2, t, e[t]);
  if (Ri2) for (var t of Ri2(e)) oo2.call(e, t) && Xe2(r2, t, e[t]);
  return r2;
};
var g = (r2, e, t) => Xe2(r2, typeof e != "symbol" ? e + "" : e, t);
var xi2 = class extends d {
  constructor(e) {
    super(e), g(this, "protocol", "wc"), g(this, "version", 2), g(this, "core"), g(this, "logger"), g(this, "events", new import_events4.EventEmitter()), g(this, "provider"), g(this, "messages"), g(this, "subscriber"), g(this, "publisher"), g(this, "name", Lt2), g(this, "transportExplicitlyClosed", false), g(this, "initialized", false), g(this, "connectionAttemptInProgress", false), g(this, "relayUrl"), g(this, "projectId"), g(this, "packageName"), g(this, "bundleId"), g(this, "hasExperiencedNetworkDisruption", false), g(this, "pingTimeout"), g(this, "heartBeatTimeout", (0, import_time2.toMiliseconds)(import_time2.THIRTY_SECONDS + import_time2.FIVE_SECONDS)), g(this, "reconnectTimeout"), g(this, "connectPromise"), g(this, "reconnectInProgress", false), g(this, "requestsInFlight", []), g(this, "connectTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), g(this, "request", async (t) => {
      var i3, s;
      this.logger.debug("Publishing Request Payload");
      const n2 = t.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: n2, method: t.method, topic: (i3 = t.params) == null ? void 0 : i3.topic }, "relayer.request - publishing...");
        const o2 = `${n2}:${((s = t.params) == null ? void 0 : s.tag) || ""}`;
        this.requestsInFlight.push(o2);
        const a2 = await this.provider.request(t);
        return this.requestsInFlight = this.requestsInFlight.filter((c4) => c4 !== o2), a2;
      } catch (o2) {
        throw this.logger.debug(`Failed to Publish Request: ${n2}`), o2;
      }
    }), g(this, "resetPingTimeout", () => {
      Ye() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var t, i3, s, n2;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (n2 = (s = (i3 = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : i3.socket) == null ? void 0 : s.terminate) == null || n2.call(s);
        } catch (o2) {
          this.logger.warn(o2, o2 == null ? void 0 : o2.message);
        }
      }, this.heartBeatTimeout));
    }), g(this, "onPayloadHandler", (t) => {
      this.onProviderPayload(t), this.resetPingTimeout();
    }), g(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C2.connect);
    }), g(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), g(this, "onProviderErrorHandler", (t) => {
      this.logger.fatal(`Fatal socket error: ${t.message}`), this.events.emit(C2.error, t), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), g(this, "registerProviderListeners", () => {
      this.provider.on(M2.payload, this.onPayloadHandler), this.provider.on(M2.connect, this.onConnectHandler), this.provider.on(M2.disconnect, this.onDisconnectHandler), this.provider.on(M2.error, this.onProviderErrorHandler);
    }), this.core = e.core, this.logger = typeof e.logger < "u" && typeof e.logger != "string" ? E(e.logger, this.name) : (0, import_pino.default)(k({ level: e.logger || zt2 })), this.messages = new Ti2(this.logger, e.core), this.subscriber = new Oi2(this, this.logger), this.publisher = new Yn(this, this.logger), this.projectId = e == null ? void 0 : e.projectId, this.relayUrl = (e == null ? void 0 : e.relayUrl) || Ke2, Ms() ? this.packageName = qs() : Vs() && (this.bundleId = qs()), this.provider = {};
  }
  async init() {
    this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.transportOpen().catch((e) => this.logger.warn(e, e == null ? void 0 : e.message));
  }
  get context() {
    return y(this.logger);
  }
  get connected() {
    var e, t, i3;
    return ((i3 = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 1 || false;
  }
  get connecting() {
    var e, t, i3;
    return ((i3 = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e, t, i3) {
    this.isInitialized(), await this.publisher.publish(e, t, i3), await this.recordMessageEvent({ topic: e, message: t, publishedAt: Date.now(), transportType: ee2.relay }, ye2.outbound);
  }
  async publishCustom(e) {
    this.isInitialized(), await this.publisher.publishCustom(e);
  }
  async subscribe(e, t) {
    var i3, s, n2;
    this.isInitialized(), (!(t != null && t.transportType) || (t == null ? void 0 : t.transportType) === "relay") && await this.toEstablishConnection();
    const o2 = typeof ((i3 = t == null ? void 0 : t.internal) == null ? void 0 : i3.throwOnFailedPublish) > "u" ? true : (s = t == null ? void 0 : t.internal) == null ? void 0 : s.throwOnFailedPublish;
    let a2 = ((n2 = this.subscriber.topicMap.get(e)) == null ? void 0 : n2[0]) || "", c4;
    const h3 = (l3) => {
      l3.topic === e && (this.subscriber.off(U2.created, h3), c4());
    };
    return await Promise.all([new Promise((l3) => {
      c4 = l3, this.subscriber.on(U2.created, h3);
    }), new Promise(async (l3, p2) => {
      a2 = await this.subscriber.subscribe(e, Ai2({ internal: { throwOnFailedPublish: o2 } }, t)).catch((y4) => {
        o2 && p2(y4);
      }) || a2, l3();
    })]), a2;
  }
  async unsubscribe(e, t) {
    this.isInitialized(), await this.subscriber.unsubscribe(e, t);
  }
  on(e, t) {
    this.events.on(e, t);
  }
  once(e, t) {
    this.events.once(e, t);
  }
  off(e, t) {
    this.events.off(e, t);
  }
  removeListener(e, t) {
    this.events.removeListener(e, t);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await ni(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.info("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t, i3) => {
      await this.connect(e).then(t).catch(i3).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await ja()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e) {
    if ((e == null ? void 0 : e.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t = e.sort((i3, s) => i3.publishedAt - s.publishedAt);
    this.logger.debug(`Batch of ${t.length} message events sorted`);
    for (const i3 of t) try {
      await this.onMessageEvent(i3);
    } catch (s) {
      this.logger.warn(s, "Error while processing batch message event: " + (s == null ? void 0 : s.message));
    }
    this.logger.trace(`Batch of ${t.length} message events processed`);
  }
  async onLinkMessageEvent(e, t) {
    const { topic: i3 } = e;
    if (!t.sessionExists) {
      const s = ii(import_time2.FIVE_MINUTES), n2 = { topic: i3, expiry: s, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(i3, n2);
    }
    this.events.emit(C2.message, e), await this.recordMessageEvent(e, ye2.inbound);
  }
  async connect(e) {
    await this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t = 1;
    for (; t < 6; ) {
      try {
        if (this.transportExplicitlyClosed) break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (i3, s) => {
          const n2 = () => {
            s(new Error("Connection interrupted while trying to connect"));
          };
          this.provider.once(M2.disconnect, n2), await ni(new Promise((o2, a2) => {
            this.provider.connect().then(o2).catch(a2);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o2) => {
            s(o2);
          }).finally(() => {
            this.provider.off(M2.disconnect, n2), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o2, a2) => {
            const c4 = () => {
              s(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(M2.disconnect, c4), await this.subscriber.start().then(o2).catch(a2).finally(() => {
              this.provider.off(M2.disconnect, c4);
            });
          }), this.hasExperiencedNetworkDisruption = false, i3();
        });
      } catch (i3) {
        await this.subscriber.stop();
        const s = i3;
        this.logger.warn({}, s.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);
        break;
      }
      await new Promise((i3) => setTimeout(i3, (0, import_time2.toMiliseconds)(t * 1))), t++;
    }
  }
  startPingTimeout() {
    var e, t, i3, s, n2;
    if (Ye()) try {
      (t = (e = this.provider) == null ? void 0 : e.connection) != null && t.socket && ((n2 = (s = (i3 = this.provider) == null ? void 0 : i3.connection) == null ? void 0 : s.socket) == null || n2.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (o2) {
      this.logger.warn(o2, o2 == null ? void 0 : o2.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o(new f(zs({ sdkVersion: Pe2, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e, t) {
    const { topic: i3, message: s } = e;
    await this.messages.set(i3, s, t);
  }
  async shouldIgnoreMessageEvent(e) {
    const { topic: t, message: i3 } = e;
    if (!i3 || i3.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${i3}`), true;
    if (!await this.subscriber.isKnownTopic(t)) return this.logger.warn(`Ignoring message for unknown topic ${t}`), true;
    const s = this.messages.has(t, i3);
    return s && this.logger.warn(`Ignoring duplicate message: ${i3}`), s;
  }
  async onProviderPayload(e) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e }), isJsonRpcRequest(e)) {
      if (!e.method.endsWith(kt2)) return;
      const t = e.params, { topic: i3, message: s, publishedAt: n2, attestation: o2 } = t.data, a2 = { topic: i3, message: s, publishedAt: n2, transportType: ee2.relay, attestation: o2 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Ai2({ type: "event", event: t.id }, a2)), this.events.emit(t.id, a2), await this.acknowledgePayload(e), await this.onMessageEvent(a2);
    } else isJsonRpcResponse(e) && this.events.emit(C2.message_ack, e);
  }
  async onMessageEvent(e) {
    await this.shouldIgnoreMessageEvent(e) || (await this.recordMessageEvent(e, ye2.inbound), this.events.emit(C2.message, e));
  }
  async acknowledgePayload(e) {
    const t = formatJsonRpcResult(e.id, true);
    await this.provider.connection.send(t);
  }
  unregisterProviderListeners() {
    this.provider.off(M2.payload, this.onPayloadHandler), this.provider.off(M2.connect, this.onConnectHandler), this.provider.off(M2.disconnect, this.onDisconnectHandler), this.provider.off(M2.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e = await ja();
    ka(async (t) => {
      e !== t && (e = t, t ? await this.transportOpen().catch((i3) => this.logger.error(i3, i3 == null ? void 0 : i3.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    }), this.core.heartbeat.on(r.pulse, async () => {
      if (!this.transportExplicitlyClosed && !this.connected && Pa()) try {
        await this.confirmOnlineStateOrThrow(), await this.transportOpen();
      } catch (t) {
        this.logger.warn(t, t == null ? void 0 : t.message);
      }
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C2.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e) => this.logger.error(e, e == null ? void 0 : e.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time2.toMiliseconds)(jt2)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectPromise) {
        await this.connectPromise;
        return;
      }
      await this.connect();
    }
  }
};
function ao2(r2, e) {
  return r2 === e || Number.isNaN(r2) && Number.isNaN(e);
}
function Ni2(r2) {
  return Object.getOwnPropertySymbols(r2).filter((e) => Object.prototype.propertyIsEnumerable.call(r2, e));
}
function $i2(r2) {
  return r2 == null ? r2 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r2);
}
var co2 = "[object RegExp]";
var ho2 = "[object String]";
var lo2 = "[object Number]";
var uo2 = "[object Boolean]";
var zi2 = "[object Arguments]";
var go2 = "[object Symbol]";
var po2 = "[object Date]";
var yo2 = "[object Map]";
var bo2 = "[object Set]";
var mo2 = "[object Array]";
var fo2 = "[object Function]";
var Do2 = "[object ArrayBuffer]";
var Ze2 = "[object Object]";
var vo2 = "[object Error]";
var wo2 = "[object DataView]";
var _o2 = "[object Uint8Array]";
var Eo2 = "[object Uint8ClampedArray]";
var Io2 = "[object Uint16Array]";
var To2 = "[object Uint32Array]";
var Co2 = "[object BigUint64Array]";
var Po3 = "[object Int8Array]";
var So2 = "[object Int16Array]";
var Oo2 = "[object Int32Array]";
var Ro2 = "[object BigInt64Array]";
var Ao2 = "[object Float32Array]";
var xo2 = "[object Float64Array]";
function No2() {
}
function Li2(r2) {
  if (!r2 || typeof r2 != "object") return false;
  const e = Object.getPrototypeOf(r2);
  return e === null || e === Object.prototype || Object.getPrototypeOf(e) === null ? Object.prototype.toString.call(r2) === "[object Object]" : false;
}
function $o2(r2, e, t) {
  return De2(r2, e, void 0, void 0, void 0, void 0, t);
}
function De2(r2, e, t, i3, s, n2, o2) {
  const a2 = o2(r2, e, t, i3, s, n2);
  if (a2 !== void 0) return a2;
  if (typeof r2 == typeof e) switch (typeof r2) {
    case "bigint":
    case "string":
    case "boolean":
    case "symbol":
    case "undefined":
      return r2 === e;
    case "number":
      return r2 === e || Object.is(r2, e);
    case "function":
      return r2 === e;
    case "object":
      return ve2(r2, e, n2, o2);
  }
  return ve2(r2, e, n2, o2);
}
function ve2(r2, e, t, i3) {
  if (Object.is(r2, e)) return true;
  let s = $i2(r2), n2 = $i2(e);
  if (s === zi2 && (s = Ze2), n2 === zi2 && (n2 = Ze2), s !== n2) return false;
  switch (s) {
    case ho2:
      return r2.toString() === e.toString();
    case lo2: {
      const c4 = r2.valueOf(), h3 = e.valueOf();
      return ao2(c4, h3);
    }
    case uo2:
    case po2:
    case go2:
      return Object.is(r2.valueOf(), e.valueOf());
    case co2:
      return r2.source === e.source && r2.flags === e.flags;
    case fo2:
      return r2 === e;
  }
  t = t ?? /* @__PURE__ */ new Map();
  const o2 = t.get(r2), a2 = t.get(e);
  if (o2 != null && a2 != null) return o2 === e;
  t.set(r2, e), t.set(e, r2);
  try {
    switch (s) {
      case yo2: {
        if (r2.size !== e.size) return false;
        for (const [c4, h3] of r2.entries()) if (!e.has(c4) || !De2(h3, e.get(c4), c4, r2, e, t, i3)) return false;
        return true;
      }
      case bo2: {
        if (r2.size !== e.size) return false;
        const c4 = Array.from(r2.values()), h3 = Array.from(e.values());
        for (let l3 = 0; l3 < c4.length; l3++) {
          const p2 = c4[l3], y4 = h3.findIndex((w) => De2(p2, w, void 0, r2, e, t, i3));
          if (y4 === -1) return false;
          h3.splice(y4, 1);
        }
        return true;
      }
      case mo2:
      case _o2:
      case Eo2:
      case Io2:
      case To2:
      case Co2:
      case Po3:
      case So2:
      case Oo2:
      case Ro2:
      case Ao2:
      case xo2: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r2) !== Buffer.isBuffer(e) || r2.length !== e.length) return false;
        for (let c4 = 0; c4 < r2.length; c4++) if (!De2(r2[c4], e[c4], c4, r2, e, t, i3)) return false;
        return true;
      }
      case Do2:
        return r2.byteLength !== e.byteLength ? false : ve2(new Uint8Array(r2), new Uint8Array(e), t, i3);
      case wo2:
        return r2.byteLength !== e.byteLength || r2.byteOffset !== e.byteOffset ? false : ve2(new Uint8Array(r2), new Uint8Array(e), t, i3);
      case vo2:
        return r2.name === e.name && r2.message === e.message;
      case Ze2: {
        if (!(ve2(r2.constructor, e.constructor, t, i3) || Li2(r2) && Li2(e))) return false;
        const h3 = [...Object.keys(r2), ...Ni2(r2)], l3 = [...Object.keys(e), ...Ni2(e)];
        if (h3.length !== l3.length) return false;
        for (let p2 = 0; p2 < h3.length; p2++) {
          const y4 = h3[p2], w = r2[y4];
          if (!Object.hasOwn(e, y4)) return false;
          const u2 = e[y4];
          if (!De2(w, u2, y4, r2, e, t, i3)) return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t.delete(r2), t.delete(e);
  }
}
function zo2(r2, e) {
  return $o2(r2, e, No2);
}
var Lo2 = Object.defineProperty;
var ki2 = Object.getOwnPropertySymbols;
var ko2 = Object.prototype.hasOwnProperty;
var jo2 = Object.prototype.propertyIsEnumerable;
var Qe3 = (r2, e, t) => e in r2 ? Lo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var ji2 = (r2, e) => {
  for (var t in e || (e = {})) ko2.call(e, t) && Qe3(r2, t, e[t]);
  if (ki2) for (var t of ki2(e)) jo2.call(e, t) && Qe3(r2, t, e[t]);
  return r2;
};
var F2 = (r2, e, t) => Qe3(r2, typeof e != "symbol" ? e + "" : e, t);
var Ui2 = class extends f2 {
  constructor(e, t, i3, s = W2, n2 = void 0) {
    super(e, t, i3, s), this.core = e, this.logger = t, this.name = i3, F2(this, "map", /* @__PURE__ */ new Map()), F2(this, "version", Ut2), F2(this, "cached", []), F2(this, "initialized", false), F2(this, "getKey"), F2(this, "storagePrefix", W2), F2(this, "recentlyDeleted", []), F2(this, "recentlyDeletedLimit", 200), F2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o2) => {
        this.getKey && o2 !== null && !kt(o2) ? this.map.set(this.getKey(o2), o2) : wa(o2) ? this.map.set(o2.id, o2) : xa(o2) && this.map.set(o2.topic, o2);
      }), this.cached = [], this.initialized = true);
    }), F2(this, "set", async (o2, a2) => {
      this.isInitialized(), this.map.has(o2) ? await this.update(o2, a2) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o2, value: a2 }), this.map.set(o2, a2), await this.persist());
    }), F2(this, "get", (o2) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o2 }), this.getData(o2))), F2(this, "getAll", (o2) => (this.isInitialized(), o2 ? this.values.filter((a2) => Object.keys(o2).every((c4) => zo2(a2[c4], o2[c4]))) : this.values)), F2(this, "update", async (o2, a2) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o2, update: a2 });
      const c4 = ji2(ji2({}, this.getData(o2)), a2);
      this.map.set(o2, c4), await this.persist();
    }), F2(this, "delete", async (o2, a2) => {
      this.isInitialized(), this.map.has(o2) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o2, reason: a2 }), this.map.delete(o2), this.addToRecentlyDeleted(o2), await this.persist());
    }), this.logger = E(t, this.name), this.storagePrefix = s, this.getKey = n2;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e) {
    this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e) {
    const t = this.map.get(e);
    if (!t) {
      if (this.recentlyDeleted.includes(e)) {
        const { message: s } = Et("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e}`);
        throw this.logger.error(s), new Error(s);
      }
      const { message: i3 } = Et("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.error(i3), new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e = await this.getDataStore();
      if (typeof e > "u" || !e.length) return;
      if (this.map.size) {
        const { message: t } = Et("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Uo2 = Object.defineProperty;
var Fo2 = (r2, e, t) => e in r2 ? Uo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var d2 = (r2, e, t) => Fo2(r2, typeof e != "symbol" ? e + "" : e, t);
var Fi2 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, d2(this, "name", Bt2), d2(this, "version", Vt2), d2(this, "events", new import_events4.default()), d2(this, "pairings"), d2(this, "initialized", false), d2(this, "storagePrefix", W2), d2(this, "ignoredPayloadTypes", [ee]), d2(this, "registeredMethods", []), d2(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), d2(this, "register", ({ methods: i3 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...i3])];
    }), d2(this, "create", async (i3) => {
      this.isInitialized();
      const s = qc(), n2 = await this.core.crypto.setSymKey(s), o2 = ii(import_time2.FIVE_MINUTES), a2 = { protocol: $t2 }, c4 = { topic: n2, expiry: o2, relay: a2, active: false, methods: i3 == null ? void 0 : i3.methods }, h3 = oa({ protocol: this.core.protocol, version: this.core.version, topic: n2, symKey: s, relay: a2, expiryTimestamp: o2, methods: i3 == null ? void 0 : i3.methods });
      return this.events.emit(ae2.create, c4), this.core.expirer.set(n2, o2), await this.pairings.set(n2, c4), await this.core.relayer.subscribe(n2, { transportType: i3 == null ? void 0 : i3.transportType, internal: i3 == null ? void 0 : i3.internal }), { topic: n2, uri: h3 };
    }), d2(this, "pair", async (i3) => {
      this.isInitialized();
      const s = this.core.eventClient.createEvent({ properties: { topic: i3 == null ? void 0 : i3.uri, trace: [Y2.pairing_started] } });
      this.isValidPair(i3, s);
      const { topic: n2, symKey: o2, relay: a2, expiryTimestamp: c4, methods: h3 } = ra(i3.uri);
      s.props.properties.topic = n2, s.addTrace(Y2.pairing_uri_validation_success), s.addTrace(Y2.pairing_uri_not_expired);
      let l3;
      if (this.pairings.keys.includes(n2)) {
        if (l3 = this.pairings.get(n2), s.addTrace(Y2.existing_pairing), l3.active) throw s.setError(X2.active_pairing_already_exists), new Error(`Pairing already exists: ${n2}. Please try again with a new connection URI.`);
        s.addTrace(Y2.pairing_not_expired);
      }
      const p2 = c4 || ii(import_time2.FIVE_MINUTES), y4 = { topic: n2, relay: a2, expiry: p2, active: false, methods: h3 };
      this.core.expirer.set(n2, p2), await this.pairings.set(n2, y4), s.addTrace(Y2.store_new_pairing), i3.activatePairing && await this.activate({ topic: n2 }), this.events.emit(ae2.create, y4), s.addTrace(Y2.emit_inactive_pairing), this.core.crypto.keychain.has(n2) || await this.core.crypto.setSymKey(o2, n2), s.addTrace(Y2.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        s.setError(X2.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n2, { relay: a2 });
      } catch (w) {
        throw s.setError(X2.subscribe_pairing_topic_failure), w;
      }
      return s.addTrace(Y2.subscribe_pairing_topic_success), y4;
    }), d2(this, "activate", async ({ topic: i3 }) => {
      this.isInitialized();
      const s = ii(import_time2.FIVE_MINUTES);
      this.core.expirer.set(i3, s), await this.pairings.update(i3, { active: true, expiry: s });
    }), d2(this, "ping", async (i3) => {
      this.isInitialized(), await this.isValidPing(i3), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: s } = i3;
      if (this.pairings.keys.includes(s)) {
        const n2 = await this.sendRequest(s, "wc_pairingPing", {}), { done: o2, resolve: a2, reject: c4 } = ei();
        this.events.once(ci("pairing_ping", n2), ({ error: h3 }) => {
          h3 ? c4(h3) : a2();
        }), await o2();
      }
    }), d2(this, "updateExpiry", async ({ topic: i3, expiry: s }) => {
      this.isInitialized(), await this.pairings.update(i3, { expiry: s });
    }), d2(this, "updateMetadata", async ({ topic: i3, metadata: s }) => {
      this.isInitialized(), await this.pairings.update(i3, { peerMetadata: s });
    }), d2(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), d2(this, "disconnect", async (i3) => {
      this.isInitialized(), await this.isValidDisconnect(i3);
      const { topic: s } = i3;
      this.pairings.keys.includes(s) && (await this.sendRequest(s, "wc_pairingDelete", Kt("USER_DISCONNECTED")), await this.deletePairing(s));
    }), d2(this, "formatUriFromPairing", (i3) => {
      this.isInitialized();
      const { topic: s, relay: n2, expiry: o2, methods: a2 } = i3, c4 = this.core.crypto.keychain.get(s);
      return oa({ protocol: this.core.protocol, version: this.core.version, topic: s, symKey: c4, relay: n2, expiryTimestamp: o2, methods: a2 });
    }), d2(this, "sendRequest", async (i3, s, n2) => {
      const o2 = formatJsonRpcRequest(s, n2), a2 = await this.core.crypto.encode(i3, o2), c4 = oe[s].req;
      return this.core.history.set(i3, o2), this.core.relayer.publish(i3, a2, c4), o2.id;
    }), d2(this, "sendResult", async (i3, s, n2) => {
      const o2 = formatJsonRpcResult(i3, n2), a2 = await this.core.crypto.encode(s, o2), c4 = (await this.core.history.get(s, i3)).request.method, h3 = oe[c4].res;
      await this.core.relayer.publish(s, a2, h3), await this.core.history.resolve(o2);
    }), d2(this, "sendError", async (i3, s, n2) => {
      const o2 = formatJsonRpcError(i3, n2), a2 = await this.core.crypto.encode(s, o2), c4 = (await this.core.history.get(s, i3)).request.method, h3 = oe[c4] ? oe[c4].res : oe.unregistered_method.res;
      await this.core.relayer.publish(s, a2, h3), await this.core.history.resolve(o2);
    }), d2(this, "deletePairing", async (i3, s) => {
      await this.core.relayer.unsubscribe(i3), await Promise.all([this.pairings.delete(i3, Kt("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(i3), s ? Promise.resolve() : this.core.expirer.del(i3)]);
    }), d2(this, "cleanup", async () => {
      const i3 = this.pairings.getAll().filter((s) => fi(s.expiry));
      await Promise.all(i3.map((s) => this.deletePairing(s.topic)));
    }), d2(this, "onRelayEventRequest", async (i3) => {
      const { topic: s, payload: n2 } = i3;
      switch (n2.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(s, n2);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(s, n2);
        default:
          return await this.onUnknownRpcMethodRequest(s, n2);
      }
    }), d2(this, "onRelayEventResponse", async (i3) => {
      const { topic: s, payload: n2 } = i3, o2 = (await this.core.history.get(s, n2.id)).request.method;
      switch (o2) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(s, n2);
        default:
          return this.onUnknownRpcMethodResponse(o2);
      }
    }), d2(this, "onPairingPingRequest", async (i3, s) => {
      const { id: n2 } = s;
      try {
        this.isValidPing({ topic: i3 }), await this.sendResult(n2, i3, true), this.events.emit(ae2.ping, { id: n2, topic: i3 });
      } catch (o2) {
        await this.sendError(n2, i3, o2), this.logger.error(o2);
      }
    }), d2(this, "onPairingPingResponse", (i3, s) => {
      const { id: n2 } = s;
      setTimeout(() => {
        isJsonRpcResult(s) ? this.events.emit(ci("pairing_ping", n2), {}) : isJsonRpcError(s) && this.events.emit(ci("pairing_ping", n2), { error: s.error });
      }, 500);
    }), d2(this, "onPairingDeleteRequest", async (i3, s) => {
      const { id: n2 } = s;
      try {
        this.isValidDisconnect({ topic: i3 }), await this.deletePairing(i3), this.events.emit(ae2.delete, { id: n2, topic: i3 });
      } catch (o2) {
        await this.sendError(n2, i3, o2), this.logger.error(o2);
      }
    }), d2(this, "onUnknownRpcMethodRequest", async (i3, s) => {
      const { id: n2, method: o2 } = s;
      try {
        if (this.registeredMethods.includes(o2)) return;
        const a2 = Kt("WC_METHOD_UNSUPPORTED", o2);
        await this.sendError(n2, i3, a2), this.logger.error(a2);
      } catch (a2) {
        await this.sendError(n2, i3, a2), this.logger.error(a2);
      }
    }), d2(this, "onUnknownRpcMethodResponse", (i3) => {
      this.registeredMethods.includes(i3) || this.logger.error(Kt("WC_METHOD_UNSUPPORTED", i3));
    }), d2(this, "isValidPair", (i3, s) => {
      var n2;
      if (!Aa(i3)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `pair() params: ${i3}`);
        throw s.setError(X2.malformed_pairing_uri), new Error(a2);
      }
      if (!ma(i3.uri)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `pair() uri: ${i3.uri}`);
        throw s.setError(X2.malformed_pairing_uri), new Error(a2);
      }
      const o2 = ra(i3 == null ? void 0 : i3.uri);
      if (!((n2 = o2 == null ? void 0 : o2.relay) != null && n2.protocol)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw s.setError(X2.malformed_pairing_uri), new Error(a2);
      }
      if (!(o2 != null && o2.symKey)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", "pair() uri#symKey");
        throw s.setError(X2.malformed_pairing_uri), new Error(a2);
      }
      if (o2 != null && o2.expiryTimestamp && (0, import_time2.toMiliseconds)(o2 == null ? void 0 : o2.expiryTimestamp) < Date.now()) {
        s.setError(X2.pairing_expired);
        const { message: a2 } = Et("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a2);
      }
    }), d2(this, "isValidPing", async (i3) => {
      if (!Aa(i3)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `ping() params: ${i3}`);
        throw new Error(n2);
      }
      const { topic: s } = i3;
      await this.isValidPairingTopic(s);
    }), d2(this, "isValidDisconnect", async (i3) => {
      if (!Aa(i3)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `disconnect() params: ${i3}`);
        throw new Error(n2);
      }
      const { topic: s } = i3;
      await this.isValidPairingTopic(s);
    }), d2(this, "isValidPairingTopic", async (i3) => {
      if (!it(i3, false)) {
        const { message: s } = Et("MISSING_OR_INVALID", `pairing topic should be a string: ${i3}`);
        throw new Error(s);
      }
      if (!this.pairings.keys.includes(i3)) {
        const { message: s } = Et("NO_MATCHING_KEY", `pairing topic doesn't exist: ${i3}`);
        throw new Error(s);
      }
      if (fi(this.pairings.get(i3).expiry)) {
        await this.deletePairing(i3);
        const { message: s } = Et("EXPIRED", `pairing topic: ${i3}`);
        throw new Error(s);
      }
    }), this.core = e, this.logger = E(t, this.name), this.pairings = new Ui2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C2.message, async (e) => {
      const { topic: t, message: i3, transportType: s } = e;
      if (this.pairings.keys.includes(t) && s !== ee2.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i3))) try {
        const n2 = await this.core.crypto.decode(t, i3);
        isJsonRpcRequest(n2) ? (this.core.history.set(t, n2), await this.onRelayEventRequest({ topic: t, payload: n2 })) : isJsonRpcResponse(n2) && (await this.core.history.resolve(n2), await this.onRelayEventResponse({ topic: t, payload: n2 }), this.core.history.delete(t, n2.id)), await this.core.relayer.messages.ack(t, i3);
      } catch (n2) {
        this.logger.error(n2);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(q.expired, async (e) => {
      const { topic: t } = si(e.target);
      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, true), this.events.emit(ae2.expire, { topic: t }));
    });
  }
};
var Mo2 = Object.defineProperty;
var Ko2 = (r2, e, t) => e in r2 ? Mo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var N3 = (r2, e, t) => Ko2(r2, typeof e != "symbol" ? e + "" : e, t);
var Mi2 = class extends I {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, N3(this, "records", /* @__PURE__ */ new Map()), N3(this, "events", new import_events4.EventEmitter()), N3(this, "name", qt2), N3(this, "version", Gt2), N3(this, "cached", []), N3(this, "initialized", false), N3(this, "storagePrefix", W2), N3(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.records.set(i3.id, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), N3(this, "set", (i3, s, n2) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: i3, request: s, chainId: n2 }), this.records.has(s.id)) return;
      const o2 = { id: s.id, topic: i3, request: { method: s.method, params: s.params || null }, chainId: n2, expiry: ii(import_time2.THIRTY_DAYS) };
      this.records.set(o2.id, o2), this.persist(), this.events.emit(V2.created, o2);
    }), N3(this, "resolve", async (i3) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: i3 }), !this.records.has(i3.id)) return;
      const s = await this.getRecord(i3.id);
      typeof s.response > "u" && (s.response = isJsonRpcError(i3) ? { error: i3.error } : { result: i3.result }, this.records.set(s.id, s), this.persist(), this.events.emit(V2.updated, s));
    }), N3(this, "get", async (i3, s) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: i3, id: s }), await this.getRecord(s))), N3(this, "delete", (i3, s) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: s }), this.values.forEach((n2) => {
        if (n2.topic === i3) {
          if (typeof s < "u" && n2.id !== s) return;
          this.records.delete(n2.id), this.events.emit(V2.deleted, n2);
        }
      }), this.persist();
    }), N3(this, "exists", async (i3, s) => (this.isInitialized(), this.records.has(s) ? (await this.getRecord(s)).topic === i3 : false)), N3(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), N3(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), N3(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), N3(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e = [];
    return this.values.forEach((t) => {
      if (typeof t.response < "u") return;
      const i3 = { topic: t.topic, request: formatJsonRpcRequest(t.request.method, t.request.params, t.id), chainId: t.chainId };
      return e.push(i3);
    }), e;
  }
  async setJsonRpcRecords(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e) {
    this.isInitialized();
    const t = this.records.get(e);
    if (!t) {
      const { message: i3 } = Et("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(V2.sync);
  }
  async restore() {
    try {
      const e = await this.getJsonRpcRecords();
      if (typeof e > "u" || !e.length) return;
      if (this.records.size) {
        const { message: t } = Et("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);
    }
  }
  registerEventListeners() {
    this.events.on(V2.created, (e) => {
      const t = V2.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.events.on(V2.updated, (e) => {
      const t = V2.updated;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.events.on(V2.deleted, (e) => {
      const t = V2.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e = false;
      this.records.forEach((t) => {
        (0, import_time2.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(V2.deleted, t, false), e = true);
      }), e && this.persist();
    } catch (e) {
      this.logger.warn(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Bo2 = Object.defineProperty;
var Vo2 = (r2, e, t) => e in r2 ? Bo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var z2 = (r2, e, t) => Vo2(r2, typeof e != "symbol" ? e + "" : e, t);
var Ki2 = class extends S {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, z2(this, "expirations", /* @__PURE__ */ new Map()), z2(this, "events", new import_events4.EventEmitter()), z2(this, "name", Wt2), z2(this, "version", Ht2), z2(this, "cached", []), z2(this, "initialized", false), z2(this, "storagePrefix", W2), z2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.expirations.set(i3.target, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), z2(this, "has", (i3) => {
      try {
        const s = this.formatTarget(i3);
        return typeof this.getExpiration(s) < "u";
      } catch {
        return false;
      }
    }), z2(this, "set", (i3, s) => {
      this.isInitialized();
      const n2 = this.formatTarget(i3), o2 = { target: n2, expiry: s };
      this.expirations.set(n2, o2), this.checkExpiry(n2, o2), this.events.emit(q.created, { target: n2, expiration: o2 });
    }), z2(this, "get", (i3) => {
      this.isInitialized();
      const s = this.formatTarget(i3);
      return this.getExpiration(s);
    }), z2(this, "del", (i3) => {
      if (this.isInitialized(), this.has(i3)) {
        const s = this.formatTarget(i3), n2 = this.getExpiration(s);
        this.expirations.delete(s), this.events.emit(q.deleted, { target: s, expiration: n2 });
      }
    }), z2(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), z2(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), z2(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), z2(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e) {
    if (typeof e == "string") return ri(e);
    if (typeof e == "number") return oi(e);
    const { message: t } = Et("UNKNOWN_TYPE", `Target type: ${typeof e}`);
    throw new Error(t);
  }
  async setExpirations(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(q.sync);
  }
  async restore() {
    try {
      const e = await this.getExpirations();
      if (typeof e > "u" || !e.length) return;
      if (this.expirations.size) {
        const { message: t } = Et("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);
    }
  }
  getExpiration(e) {
    const t = this.expirations.get(e);
    if (!t) {
      const { message: i3 } = Et("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.warn(i3), new Error(i3);
    }
    return t;
  }
  checkExpiry(e, t) {
    const { expiry: i3 } = t;
    (0, import_time2.toMiliseconds)(i3) - Date.now() <= 0 && this.expire(e, t);
  }
  expire(e, t) {
    this.expirations.delete(e), this.events.emit(q.expired, { target: e, expiration: t });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e, t) => this.checkExpiry(t, e));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(q.created, (e) => {
      const t = q.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(q.expired, (e) => {
      const t = q.expired;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(q.deleted, (e) => {
      const t = q.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var qo2 = Object.defineProperty;
var Go2 = (r2, e, t) => e in r2 ? qo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var P2 = (r2, e, t) => Go2(r2, typeof e != "symbol" ? e + "" : e, t);
var Bi2 = class extends M {
  constructor(e, t, i3) {
    super(e, t, i3), this.core = e, this.logger = t, this.store = i3, P2(this, "name", Yt2), P2(this, "abortController"), P2(this, "isDevEnv"), P2(this, "verifyUrlV3", Xt2), P2(this, "storagePrefix", W2), P2(this, "version", Fe2), P2(this, "publicKey"), P2(this, "fetchPromise"), P2(this, "init", async () => {
      var s;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time2.toMiliseconds)((s = this.publicKey) == null ? void 0 : s.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), P2(this, "register", async (s) => {
      if (!zt() || this.isDevEnv) return;
      const n2 = window.location.origin, { id: o2, decryptedId: a2 } = s, c4 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n2}&id=${o2}&decryptedId=${a2}`;
      try {
        const h3 = (0, import_window_getters2.getDocument)(), l3 = this.startAbortTimer(import_time2.ONE_SECOND * 5), p2 = await new Promise((y4, w) => {
          const u2 = () => {
            window.removeEventListener("message", D3), h3.body.removeChild(m2), w("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u2);
          const m2 = h3.createElement("iframe");
          m2.src = c4, m2.style.display = "none", m2.addEventListener("error", u2, { signal: this.abortController.signal });
          const D3 = (_2) => {
            if (_2.data && typeof _2.data == "string") try {
              const E3 = JSON.parse(_2.data);
              if (E3.type === "verify_attestation") {
                if (sn(E3.attestation).payload.id !== o2) return;
                clearInterval(l3), h3.body.removeChild(m2), this.abortController.signal.removeEventListener("abort", u2), window.removeEventListener("message", D3), y4(E3.attestation === null ? "" : E3.attestation);
              }
            } catch (E3) {
              this.logger.warn(E3);
            }
          };
          h3.body.appendChild(m2), window.addEventListener("message", D3, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", p2), p2;
      } catch (h3) {
        this.logger.warn(h3);
      }
      return "";
    }), P2(this, "resolve", async (s) => {
      if (this.isDevEnv) return "";
      const { attestationId: n2, hash: o2, encryptedId: a2 } = s;
      if (n2 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n2) {
        if (sn(n2).payload.id !== a2) return;
        const h3 = await this.isValidJwtAttestation(n2);
        if (h3) {
          if (!h3.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h3;
        }
      }
      if (!o2) return;
      const c4 = this.getVerifyUrl(s == null ? void 0 : s.verifyUrl);
      return this.fetchAttestation(o2, c4);
    }), P2(this, "fetchAttestation", async (s, n2) => {
      this.logger.debug(`resolving attestation: ${s} from url: ${n2}`);
      const o2 = this.startAbortTimer(import_time2.ONE_SECOND * 5), a2 = await fetch(`${n2}/attestation/${s}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o2), a2.status === 200 ? await a2.json() : void 0;
    }), P2(this, "getVerifyUrl", (s) => {
      let n2 = s || be2;
      return Zt2.includes(n2) || (this.logger.info(`verify url: ${n2}, not included in trusted list, assigning default: ${be2}`), n2 = be2), n2;
    }), P2(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const s = this.startAbortTimer(import_time2.FIVE_SECONDS), n2 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(s), await n2.json();
      } catch (s) {
        this.logger.warn(s);
      }
    }), P2(this, "persistPublicKey", async (s) => {
      this.logger.debug("persisting public key to local storage", s), await this.store.setItem(this.storeKey, s), this.publicKey = s;
    }), P2(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), P2(this, "isValidJwtAttestation", async (s) => {
      const n2 = await this.getPublicKey();
      try {
        if (n2) return this.validateAttestation(s, n2);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
      const o2 = await this.fetchAndPersistPublicKey();
      try {
        if (o2) return this.validateAttestation(s, o2);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
    }), P2(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), P2(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n2) => {
        const o2 = await this.fetchPublicKey();
        o2 && (await this.persistPublicKey(o2), n2(o2));
      });
      const s = await this.fetchPromise;
      return this.fetchPromise = void 0, s;
    }), P2(this, "validateAttestation", (s, n2) => {
      const o2 = ta(s, n2.publicKey), a2 = { hasExpired: (0, import_time2.toMiliseconds)(o2.exp) < Date.now(), payload: o2 };
      if (a2.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a2.payload.origin, isScam: a2.payload.isScam, isVerified: a2.payload.isVerified };
    }), this.logger = E(t, this.name), this.abortController = new AbortController(), this.isDevEnv = hi(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y(this.logger);
  }
  startAbortTimer(e) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time2.toMiliseconds)(e));
  }
};
var Wo2 = Object.defineProperty;
var Ho2 = (r2, e, t) => e in r2 ? Wo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Vi2 = (r2, e, t) => Ho2(r2, typeof e != "symbol" ? e + "" : e, t);
var qi2 = class extends O2 {
  constructor(e, t) {
    super(e, t), this.projectId = e, this.logger = t, Vi2(this, "context", Qt2), Vi2(this, "registerDeviceToken", async (i3) => {
      const { clientId: s, token: n2, notificationType: o2, enableEncrypted: a2 = false } = i3, c4 = `${ei2}/${this.projectId}/clients`;
      await fetch(c4, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: s, type: o2, token: n2, always_raw: a2 }) });
    }), this.logger = E(t, this.context);
  }
};
var Yo2 = Object.defineProperty;
var Gi2 = Object.getOwnPropertySymbols;
var Jo2 = Object.prototype.hasOwnProperty;
var Xo2 = Object.prototype.propertyIsEnumerable;
var et = (r2, e, t) => e in r2 ? Yo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var we2 = (r2, e) => {
  for (var t in e || (e = {})) Jo2.call(e, t) && et(r2, t, e[t]);
  if (Gi2) for (var t of Gi2(e)) Xo2.call(e, t) && et(r2, t, e[t]);
  return r2;
};
var R2 = (r2, e, t) => et(r2, typeof e != "symbol" ? e + "" : e, t);
var Wi2 = class extends R {
  constructor(e, t, i3 = true) {
    super(e, t, i3), this.core = e, this.logger = t, R2(this, "context", ii2), R2(this, "storagePrefix", W2), R2(this, "storageVersion", ti), R2(this, "events", /* @__PURE__ */ new Map()), R2(this, "shouldPersist", false), R2(this, "init", async () => {
      if (!hi()) try {
        const s = { eventId: di(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: cr(this.core.relayer.protocol, this.core.relayer.version, Pe2) } } };
        await this.sendEvent([s]);
      } catch (s) {
        this.logger.warn(s);
      }
    }), R2(this, "createEvent", (s) => {
      const { event: n2 = "ERROR", type: o2 = "", properties: { topic: a2, trace: c4 } } = s, h3 = di(), l3 = this.core.projectId || "", p2 = Date.now(), y4 = we2({ eventId: h3, timestamp: p2, props: { event: n2, type: o2, properties: { topic: a2, trace: c4 } }, bundleId: l3, domain: this.getAppDomain() }, this.setMethods(h3));
      return this.telemetryEnabled && (this.events.set(h3, y4), this.shouldPersist = true), y4;
    }), R2(this, "getEvent", (s) => {
      const { eventId: n2, topic: o2 } = s;
      if (n2) return this.events.get(n2);
      const a2 = Array.from(this.events.values()).find((c4) => c4.props.properties.topic === o2);
      if (a2) return we2(we2({}, a2), this.setMethods(a2.eventId));
    }), R2(this, "deleteEvent", (s) => {
      const { eventId: n2 } = s;
      this.events.delete(n2), this.shouldPersist = true;
    }), R2(this, "setEventListeners", () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((s) => {
          (0, import_time2.fromMiliseconds)(Date.now()) - (0, import_time2.fromMiliseconds)(s.timestamp) > si2 && (this.events.delete(s.eventId), this.shouldPersist = true);
        });
      });
    }), R2(this, "setMethods", (s) => ({ addTrace: (n2) => this.addTrace(s, n2), setError: (n2) => this.setError(s, n2) })), R2(this, "addTrace", (s, n2) => {
      const o2 = this.events.get(s);
      o2 && (o2.props.properties.trace.push(n2), this.events.set(s, o2), this.shouldPersist = true);
    }), R2(this, "setError", (s, n2) => {
      const o2 = this.events.get(s);
      o2 && (o2.props.type = n2, o2.timestamp = Date.now(), this.events.set(s, o2), this.shouldPersist = true);
    }), R2(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), R2(this, "restore", async () => {
      try {
        const s = await this.core.storage.getItem(this.storageKey) || [];
        if (!s.length) return;
        s.forEach((n2) => {
          this.events.set(n2.eventId, we2(we2({}, n2), this.setMethods(n2.eventId)));
        });
      } catch (s) {
        this.logger.warn(s);
      }
    }), R2(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const s = [];
      for (const [n2, o2] of this.events) o2.props.type && s.push(o2);
      if (s.length !== 0) try {
        if ((await this.sendEvent(s)).ok) for (const n2 of s) this.events.delete(n2.eventId), this.shouldPersist = true;
      } catch (n2) {
        this.logger.warn(n2);
      }
    }), R2(this, "sendEvent", async (s) => {
      const n2 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${ri2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${Pe2}${n2}`, { method: "POST", body: JSON.stringify(s) });
    }), R2(this, "getAppDomain", () => sr().url), this.logger = E(t, this.context), this.telemetryEnabled = i3, i3 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Zo2 = Object.defineProperty;
var Hi2 = Object.getOwnPropertySymbols;
var Qo3 = Object.prototype.hasOwnProperty;
var ea2 = Object.prototype.propertyIsEnumerable;
var tt2 = (r2, e, t) => e in r2 ? Zo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Yi2 = (r2, e) => {
  for (var t in e || (e = {})) Qo3.call(e, t) && tt2(r2, t, e[t]);
  if (Hi2) for (var t of Hi2(e)) ea2.call(e, t) && tt2(r2, t, e[t]);
  return r2;
};
var v2 = (r2, e, t) => tt2(r2, typeof e != "symbol" ? e + "" : e, t);
var Oe2 = class _Oe extends h2 {
  constructor(e) {
    var t;
    super(e), v2(this, "protocol", Ue2), v2(this, "version", Fe2), v2(this, "name", pe2), v2(this, "relayUrl"), v2(this, "projectId"), v2(this, "customStoragePrefix"), v2(this, "events", new import_events4.EventEmitter()), v2(this, "logger"), v2(this, "heartbeat"), v2(this, "relayer"), v2(this, "crypto"), v2(this, "storage"), v2(this, "history"), v2(this, "expirer"), v2(this, "pairing"), v2(this, "verify"), v2(this, "echoClient"), v2(this, "linkModeSupportedApps"), v2(this, "eventClient"), v2(this, "initialized", false), v2(this, "logChunkController"), v2(this, "on", (a2, c4) => this.events.on(a2, c4)), v2(this, "once", (a2, c4) => this.events.once(a2, c4)), v2(this, "off", (a2, c4) => this.events.off(a2, c4)), v2(this, "removeListener", (a2, c4) => this.events.removeListener(a2, c4)), v2(this, "dispatchEnvelope", ({ topic: a2, message: c4, sessionExists: h3 }) => {
      if (!a2 || !c4) return;
      const l3 = { topic: a2, message: c4, publishedAt: Date.now(), transportType: ee2.link_mode };
      this.relayer.onLinkMessageEvent(l3, { sessionExists: h3 });
    });
    const i3 = this.getGlobalCore(e == null ? void 0 : e.customStoragePrefix);
    if (i3) try {
      return this.customStoragePrefix = i3.customStoragePrefix, this.logger = i3.logger, this.heartbeat = i3.heartbeat, this.crypto = i3.crypto, this.history = i3.history, this.expirer = i3.expirer, this.storage = i3.storage, this.relayer = i3.relayer, this.pairing = i3.pairing, this.verify = i3.verify, this.echoClient = i3.echoClient, this.linkModeSupportedApps = i3.linkModeSupportedApps, this.eventClient = i3.eventClient, this.initialized = i3.initialized, this.logChunkController = i3.logChunkController, i3;
    } catch (a2) {
      console.warn("Failed to copy global core", a2);
    }
    this.projectId = e == null ? void 0 : e.projectId, this.relayUrl = (e == null ? void 0 : e.relayUrl) || Ke2, this.customStoragePrefix = e != null && e.customStoragePrefix ? `:${e.customStoragePrefix}` : "";
    const s = k({ level: typeof (e == null ? void 0 : e.logger) == "string" && e.logger ? e.logger : It2.logger, name: pe2 }), { logger: n2, chunkLoggerController: o2 } = A({ opts: s, maxSizeInBytes: e == null ? void 0 : e.maxLogBlobSizeInBytes, loggerOverride: e == null ? void 0 : e.logger });
    this.logChunkController = o2, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var a2, c4;
      (a2 = this.logChunkController) != null && a2.downloadLogsBlobInBrowser && ((c4 = this.logChunkController) == null || c4.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E(n2, this.name), this.heartbeat = new i(), this.crypto = new Ei2(this, this.logger, e == null ? void 0 : e.keychain), this.history = new Mi2(this, this.logger), this.expirer = new Ki2(this, this.logger), this.storage = e != null && e.storage ? e.storage : new h(Yi2(Yi2({}, Tt2), e == null ? void 0 : e.storageOptions)), this.relayer = new xi2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Fi2(this, this.logger), this.verify = new Bi2(this, this.logger, this.storage), this.echoClient = new qi2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Wi2(this, this.logger, e == null ? void 0 : e.telemetryEnabled), this.setGlobalCore(this);
  }
  static async init(e) {
    const t = new _Oe(e);
    await t.initialize();
    const i3 = await t.crypto.getClientId();
    return await t.storage.setItem(Ft, i3), t;
  }
  get context() {
    return y(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e;
    return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e) {
    this.linkModeSupportedApps.includes(e) || (this.linkModeSupportedApps.push(e), await this.storage.setItem(Be2, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Be2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;
    }
  }
  getGlobalCore(e = "") {
    try {
      if (this.isGlobalCoreDisabled()) return;
      const t = `_walletConnectCore_${e}`, i3 = `${t}_count`;
      return globalThis[i3] = (globalThis[i3] || 0) + 1, globalThis[i3] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i3]} times.`), globalThis[t];
    } catch (t) {
      console.warn("Failed to get global WalletConnect core", t);
      return;
    }
  }
  setGlobalCore(e) {
    var t;
    try {
      if (this.isGlobalCoreDisabled()) return;
      const i3 = `_walletConnectCore_${((t = e.opts) == null ? void 0 : t.customStoragePrefix) || ""}`;
      globalThis[i3] = e;
    } catch (i3) {
      console.warn("Failed to set global WalletConnect core", i3);
    }
  }
  isGlobalCoreDisabled() {
    try {
      return typeof process < "u" && process.env.DISABLE_GLOBAL_CORE === "true";
    } catch {
      return true;
    }
  }
};
var ta2 = Oe2;

// node_modules/@web3auth/no-modal/node_modules/@walletconnect/sign-client/dist/index.es.js
var import_events5 = __toESM(require_events());
var import_time3 = __toESM(require_cjs2());
var Ce2 = "wc";
var ke2 = 2;
var De3 = "client";
var we3 = `${Ce2}@${ke2}:${De3}:`;
var me3 = { name: De3, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Le2 = "WALLETCONNECT_DEEPLINK_CHOICE";
var dt2 = "proposal";
var Me3 = "Proposal expired";
var ut2 = "session";
var B = import_time3.SEVEN_DAYS;
var gt2 = "engine";
var P3 = { wc_sessionPropose: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time3.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time3.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e2 = { min: import_time3.FIVE_MINUTES, max: import_time3.SEVEN_DAYS };
var M3 = { idle: "IDLE", active: "ACTIVE" };
var yt = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" }, sui_signAndExecuteTransaction: { key: "digest" }, sui_signTransaction: { key: "" }, hedera_signAndExecuteTransaction: { key: "transactionId" }, hedera_executeTransaction: { key: "transactionId" }, near_signTransaction: { key: "" }, near_signTransactions: { key: "" }, tron_signTransaction: { key: "txID" }, xrpl_signTransaction: { key: "" }, xrpl_signTransactionFor: { key: "" }, algo_signTxn: { key: "" }, sendTransfer: { key: "txid" }, stacks_stxTransfer: { key: "txId" }, polkadot_signTransaction: { key: "" }, cosmos_signDirect: { key: "" } };
var wt2 = "request";
var mt2 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var _t2 = "wc";
var ft = "auth";
var Et2 = "authKeys";
var St3 = "pairingTopics";
var Rt3 = "requests";
var le3 = `${_t2}@${1.5}:${ft}:`;
var pe3 = `${le3}:PUB_KEY`;
var Os = Object.defineProperty;
var bs2 = Object.defineProperties;
var As = Object.getOwnPropertyDescriptors;
var vt2 = Object.getOwnPropertySymbols;
var xs2 = Object.prototype.hasOwnProperty;
var Vs2 = Object.prototype.propertyIsEnumerable;
var $e2 = (E3, o2, t) => o2 in E3 ? Os(E3, o2, { enumerable: true, configurable: true, writable: true, value: t }) : E3[o2] = t;
var R3 = (E3, o2) => {
  for (var t in o2 || (o2 = {})) xs2.call(o2, t) && $e2(E3, t, o2[t]);
  if (vt2) for (var t of vt2(o2)) Vs2.call(o2, t) && $e2(E3, t, o2[t]);
  return E3;
};
var O3 = (E3, o2) => bs2(E3, As(o2));
var c3 = (E3, o2, t) => $e2(E3, typeof o2 != "symbol" ? o2 + "" : o2, t);
var Cs2 = class extends V {
  constructor(o2) {
    super(o2), c3(this, "name", gt2), c3(this, "events", new import_events5.default()), c3(this, "initialized", false), c3(this, "requestQueue", { state: M3.idle, queue: [] }), c3(this, "sessionRequestQueue", { state: M3.idle, queue: [] }), c3(this, "emittedSessionRequests", new gi({ limit: 500 })), c3(this, "requestQueueDelay", import_time3.ONE_SECOND), c3(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c3(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c3(this, "recentlyDeletedLimit", 200), c3(this, "relayMessageCache", []), c3(this, "pendingSessions", /* @__PURE__ */ new Map()), c3(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(P3) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay)));
    }), c3(this, "connect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const e = O3(R3({}, t), { requiredNamespaces: t.requiredNamespaces || {}, optionalNamespaces: t.optionalNamespaces || {} });
      await this.isValidConnect(e), e.optionalNamespaces = ba(e.requiredNamespaces, e.optionalNamespaces), e.requiredNamespaces = {};
      const { pairingTopic: s, requiredNamespaces: i3, optionalNamespaces: r2, sessionProperties: n2, scopedProperties: a2, relays: l3 } = e;
      let p2 = s, h3, u2 = false;
      try {
        if (p2) {
          const T2 = this.client.core.pairing.pairings.get(p2);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u2 = T2.active;
        }
      } catch (T2) {
        throw this.client.logger.error(`connect() -> pairing.get(${p2}) failed`), T2;
      }
      if (!p2 || !u2) {
        const { topic: T2, uri: $2 } = await this.client.core.pairing.create({ internal: { skipSubscribe: true } });
        p2 = T2, h3 = $2;
      }
      if (!p2) {
        const { message: T2 } = Et("NO_MATCHING_KEY", `connect() pairing topic: ${p2}`);
        throw new Error(T2);
      }
      const d3 = await this.client.core.crypto.generateKeyPair(), y4 = P3.wc_sessionPropose.req.ttl || import_time3.FIVE_MINUTES, w = ii(y4), m2 = O3(R3(R3({ requiredNamespaces: i3, optionalNamespaces: r2, relays: l3 ?? [{ protocol: $t2 }], proposer: { publicKey: d3, metadata: this.client.metadata }, expiryTimestamp: w, pairingTopic: p2 }, n2 && { sessionProperties: n2 }), a2 && { scopedProperties: a2 }), { id: payloadId() }), S2 = ci("session_connect", m2.id), { reject: _2, resolve: b2, done: C3 } = ei(y4, Me3), I2 = ({ id: T2 }) => {
        T2 === m2.id && (this.client.events.off("proposal_expire", I2), this.pendingSessions.delete(m2.id), this.events.emit(S2, { error: { message: Me3, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", I2), this.events.once(S2, ({ error: T2, session: $2 }) => {
        this.client.events.off("proposal_expire", I2), T2 ? _2(T2) : $2 && b2($2);
      }), await this.sendProposeSession({ proposal: m2, publishOpts: { internal: { throwOnFailedPublish: true }, tvf: { correlationId: m2.id } } }), await this.setProposal(m2.id, m2), { uri: h3, approval: C3 };
    }), c3(this, "pair", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(t);
      } catch (e) {
        throw this.client.logger.error("pair() failed"), e;
      }
    }), c3(this, "approve", async (t) => {
      var e, s, i3;
      const r2 = this.client.core.eventClient.createEvent({ properties: { topic: (e = t == null ? void 0 : t.id) == null ? void 0 : e.toString(), trace: [rr2.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (N4) {
        throw r2.setError(nr.no_internet_connection), N4;
      }
      try {
        await this.isValidProposalId(t == null ? void 0 : t.id);
      } catch (N4) {
        throw this.client.logger.error(`approve() -> proposal.get(${t == null ? void 0 : t.id}) failed`), r2.setError(nr.proposal_not_found), N4;
      }
      try {
        await this.isValidApprove(t);
      } catch (N4) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r2.setError(nr.session_approve_namespace_validation_failure), N4;
      }
      const { id: n2, relayProtocol: a2, namespaces: l3, sessionProperties: p2, scopedProperties: h3, sessionConfig: u2 } = t, d3 = this.client.proposal.get(n2);
      this.client.core.eventClient.deleteEvent({ eventId: r2.eventId });
      const { pairingTopic: y4, proposer: w, requiredNamespaces: m2, optionalNamespaces: S2 } = d3;
      let _2 = (s = this.client.core.eventClient) == null ? void 0 : s.getEvent({ topic: y4 });
      _2 || (_2 = (i3 = this.client.core.eventClient) == null ? void 0 : i3.createEvent({ type: rr2.session_approve_started, properties: { topic: y4, trace: [rr2.session_approve_started, rr2.session_namespaces_validation_success] } }));
      const b2 = await this.client.core.crypto.generateKeyPair(), C3 = w.publicKey, I2 = await this.client.core.crypto.generateSharedKey(b2, C3), T2 = R3(R3(R3({ relay: { protocol: a2 ?? "irn" }, namespaces: l3, controller: { publicKey: b2, metadata: this.client.metadata }, expiry: ii(B) }, p2 && { sessionProperties: p2 }), h3 && { scopedProperties: h3 }), u2 && { sessionConfig: u2 }), $2 = ee2.relay;
      _2.addTrace(rr2.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(I2, { transportType: $2, internal: { skipSubscribe: true } });
      } catch (N4) {
        throw _2.setError(nr.subscribe_session_topic_failure), N4;
      }
      _2.addTrace(rr2.subscribe_session_topic_success);
      const Ee = O3(R3({}, T2), { topic: I2, requiredNamespaces: m2, optionalNamespaces: S2, pairingTopic: y4, acknowledged: false, self: T2.controller, peer: { publicKey: w.publicKey, metadata: w.metadata }, controller: b2, transportType: ee2.relay });
      await this.client.session.set(I2, Ee), _2.addTrace(rr2.store_session);
      try {
        await this.sendApproveSession({ sessionTopic: I2, proposal: d3, pairingProposalResponse: { relay: { protocol: a2 ?? "irn" }, responderPublicKey: b2 }, sessionSettleRequest: T2, publishOpts: { internal: { throwOnFailedPublish: true }, tvf: { correlationId: n2 } } }), _2.addTrace(rr2.session_approve_publish_success);
      } catch (N4) {
        throw this.client.logger.error(N4), this.client.session.delete(I2, Kt("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(I2), N4;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: _2.eventId }), await this.client.core.pairing.updateMetadata({ topic: y4, metadata: w.metadata }), await this.deleteProposal(n2), await this.client.core.pairing.activate({ topic: y4 }), await this.setExpiry(I2, ii(B)), { topic: I2, acknowledged: () => Promise.resolve(this.client.session.get(I2)) };
    }), c3(this, "reject", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(t);
      } catch (r2) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r2;
      }
      const { id: e, reason: s } = t;
      let i3;
      try {
        i3 = this.client.proposal.get(e).pairingTopic;
      } catch (r2) {
        throw this.client.logger.error(`reject() -> proposal.get(${e}) failed`), r2;
      }
      i3 && await this.sendError({ id: e, topic: i3, error: s, rpcOpts: P3.wc_sessionPropose.reject }), await this.deleteProposal(e);
    }), c3(this, "update", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(t);
      } catch (h3) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h3;
      }
      const { topic: e, namespaces: s } = t, { done: i3, resolve: r2, reject: n2 } = ei(), a2 = payloadId(), l3 = getBigIntRpcId().toString(), p2 = this.client.session.get(e).namespaces;
      return this.events.once(ci("session_update", a2), ({ error: h3 }) => {
        h3 ? n2(h3) : r2();
      }), await this.client.session.update(e, { namespaces: s }), await this.sendRequest({ topic: e, method: "wc_sessionUpdate", params: { namespaces: s }, throwOnFailedPublish: true, clientRpcId: a2, relayRpcId: l3 }).catch((h3) => {
        this.client.logger.error(h3), this.client.session.update(e, { namespaces: p2 }), n2(h3);
      }), { acknowledged: i3 };
    }), c3(this, "extend", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(t);
      } catch (a2) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a2;
      }
      const { topic: e } = t, s = payloadId(), { done: i3, resolve: r2, reject: n2 } = ei();
      return this.events.once(ci("session_extend", s), ({ error: a2 }) => {
        a2 ? n2(a2) : r2();
      }), await this.setExpiry(e, ii(B)), this.sendRequest({ topic: e, method: "wc_sessionExtend", params: {}, clientRpcId: s, throwOnFailedPublish: true }).catch((a2) => {
        n2(a2);
      }), { acknowledged: i3 };
    }), c3(this, "request", async (t) => {
      this.isInitialized();
      try {
        await this.isValidRequest(t);
      } catch (m2) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), m2;
      }
      const { chainId: e, request: s, topic: i3, expiry: r2 = P3.wc_sessionRequest.req.ttl } = t, n2 = this.client.session.get(i3);
      (n2 == null ? void 0 : n2.transportType) === ee2.relay && await this.confirmOnlineStateOrThrow();
      const a2 = payloadId(), l3 = getBigIntRpcId().toString(), { done: p2, resolve: h3, reject: u2 } = ei(r2, "Request expired. Please try again.");
      this.events.once(ci("session_request", a2), ({ error: m2, result: S2 }) => {
        m2 ? u2(m2) : h3(S2);
      });
      const d3 = "wc_sessionRequest", y4 = this.getAppLinkIfEnabled(n2.peer.metadata, n2.transportType);
      if (y4) return await this.sendRequest({ clientRpcId: a2, relayRpcId: l3, topic: i3, method: d3, params: { request: O3(R3({}, s), { expiryTimestamp: ii(r2) }), chainId: e }, expiry: r2, throwOnFailedPublish: true, appLink: y4 }).catch((m2) => u2(m2)), this.client.events.emit("session_request_sent", { topic: i3, request: s, chainId: e, id: a2 }), await p2();
      const w = { request: O3(R3({}, s), { expiryTimestamp: ii(r2) }), chainId: e };
      return await Promise.all([new Promise(async (m2) => {
        await this.sendRequest({ clientRpcId: a2, relayRpcId: l3, topic: i3, method: d3, params: w, expiry: r2, throwOnFailedPublish: true, tvf: this.getTVFParams(a2, w) }).catch((S2) => u2(S2)), this.client.events.emit("session_request_sent", { topic: i3, request: s, chainId: e, id: a2 }), m2();
      }), new Promise(async (m2) => {
        var S2;
        if (!((S2 = n2.sessionConfig) != null && S2.disableDeepLink)) {
          const _2 = await ui(this.client.core.storage, Le2);
          await ai({ id: a2, topic: i3, wcDeepLink: _2 });
        }
        m2();
      }), p2()]).then((m2) => m2[2]);
    }), c3(this, "respond", async (t) => {
      this.isInitialized(), await this.isValidRespond(t);
      const { topic: e, response: s } = t, { id: i3 } = s, r2 = this.client.session.get(e);
      r2.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const n2 = this.getAppLinkIfEnabled(r2.peer.metadata, r2.transportType);
      isJsonRpcResult(s) ? await this.sendResult({ id: i3, topic: e, result: s.result, throwOnFailedPublish: true, appLink: n2 }) : isJsonRpcError(s) && await this.sendError({ id: i3, topic: e, error: s.error, appLink: n2 }), this.cleanupAfterResponse(t);
    }), c3(this, "ping", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(t);
      } catch (s) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s;
      }
      const { topic: e } = t;
      if (this.client.session.keys.includes(e)) {
        const s = payloadId(), i3 = getBigIntRpcId().toString(), { done: r2, resolve: n2, reject: a2 } = ei();
        this.events.once(ci("session_ping", s), ({ error: l3 }) => {
          l3 ? a2(l3) : n2();
        }), await Promise.all([this.sendRequest({ topic: e, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s, relayRpcId: i3 }), r2()]);
      } else this.client.core.pairing.pairings.keys.includes(e) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: e }));
    }), c3(this, "emit", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(t);
      const { topic: e, event: s, chainId: i3 } = t, r2 = getBigIntRpcId().toString(), n2 = payloadId();
      await this.sendRequest({ topic: e, method: "wc_sessionEvent", params: { event: s, chainId: i3 }, throwOnFailedPublish: true, relayRpcId: r2, clientRpcId: n2 });
    }), c3(this, "disconnect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(t);
      const { topic: e } = t;
      if (this.client.session.keys.includes(e)) await this.sendRequest({ topic: e, method: "wc_sessionDelete", params: Kt("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: e, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(e)) await this.client.core.pairing.disconnect({ topic: e });
      else {
        const { message: s } = Et("MISMATCHED_TOPIC", `Session or pairing topic not found: ${e}`);
        throw new Error(s);
      }
    }), c3(this, "find", (t) => (this.isInitialized(), this.client.session.getAll().filter((e) => ya(e, t)))), c3(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c3(this, "authenticate", async (t, e) => {
      var s;
      this.isInitialized(), this.isValidAuthenticate(t);
      const i3 = e && this.client.core.linkModeSupportedApps.includes(e) && ((s = this.client.metadata.redirect) == null ? void 0 : s.linkMode), r2 = i3 ? ee2.link_mode : ee2.relay;
      r2 === ee2.relay && await this.confirmOnlineStateOrThrow();
      const { chains: n2, statement: a2 = "", uri: l3, domain: p2, nonce: h3, type: u2, exp: d3, nbf: y4, methods: w = [], expiry: m2 } = t, S2 = [...t.resources || []], { topic: _2, uri: b2 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r2 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: _2, uri: b2 } });
      const C3 = await this.client.core.crypto.generateKeyPair(), I2 = Fc(C3);
      if (await Promise.all([this.client.auth.authKeys.set(pe3, { responseTopic: I2, publicKey: C3 }), this.client.auth.pairingTopics.set(I2, { topic: I2, pairingTopic: _2 })]), await this.client.core.relayer.subscribe(I2, { transportType: r2 }), this.client.logger.info(`sending request to new pairing topic: ${_2}`), w.length > 0) {
        const { namespace: A3 } = Fe(n2[0]);
        let k4 = Ef(A3, "request", w);
        Oe(S2) && (k4 = Bf(k4, S2.pop())), S2.push(k4);
      }
      const T2 = m2 && m2 > P3.wc_sessionAuthenticate.req.ttl ? m2 : P3.wc_sessionAuthenticate.req.ttl, $2 = { authPayload: { type: u2 ?? "caip122", chains: n2, statement: a2, aud: l3, domain: p2, version: "1", nonce: h3, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d3, nbf: y4, resources: S2 }, requester: { publicKey: C3, metadata: this.client.metadata }, expiryTimestamp: ii(T2) }, Ee = { eip155: { chains: n2, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...w])], events: ["chainChanged", "accountsChanged"] } }, N4 = { requiredNamespaces: {}, optionalNamespaces: Ee, relays: [{ protocol: "irn" }], pairingTopic: _2, proposer: { publicKey: C3, metadata: this.client.metadata }, expiryTimestamp: ii(P3.wc_sessionPropose.req.ttl), id: payloadId() }, { done: Tt3, resolve: Ue3, reject: Se3 } = ei(T2, "Request expired"), se2 = payloadId(), he3 = ci("session_connect", N4.id), Re3 = ci("session_request", se2), de2 = async ({ error: A3, session: k4 }) => {
        this.events.off(Re3, ve3), A3 ? Se3(A3) : k4 && Ue3({ session: k4 });
      }, ve3 = async (A3) => {
        var k4, Ge2, je2;
        if (await this.deletePendingAuthRequest(se2, { message: "fulfilled", code: 0 }), A3.error) {
          const re2 = Kt("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return A3.error.code === re2.code ? void 0 : (this.events.off(he3, de2), Se3(A3.error.message));
        }
        await this.deleteProposal(N4.id), this.events.off(he3, de2);
        const { cacaos: Fe3, responder: H } = A3.result, Te2 = [], Qe4 = [];
        for (const re2 of Fe3) {
          await yf({ cacao: re2, projectId: this.client.core.projectId }) || (this.client.logger.error(re2, "Signature verification failed"), Se3(Kt("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe3 } = re2, Pe3 = Oe(qe3.resources), He3 = [Vr(qe3.iss)], qt3 = dn(qe3.iss);
          if (Pe3) {
            const Ne2 = If(Pe3), Pt3 = Af(Pe3);
            Te2.push(...Ne2), He3.push(...Pt3);
          }
          for (const Ne2 of He3) Qe4.push(`${Ne2}:${qt3}`);
        }
        const ie3 = await this.client.core.crypto.generateSharedKey(C3, H.publicKey);
        let ue2;
        Te2.length > 0 && (ue2 = { topic: ie3, acknowledged: true, self: { publicKey: C3, metadata: this.client.metadata }, peer: H, controller: H.publicKey, expiry: ii(B), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: _2, namespaces: ga([...new Set(Te2)], [...new Set(Qe4)]), transportType: r2 }, await this.client.core.relayer.subscribe(ie3, { transportType: r2 }), await this.client.session.set(ie3, ue2), _2 && await this.client.core.pairing.updateMetadata({ topic: _2, metadata: H.metadata }), ue2 = this.client.session.get(ie3)), (k4 = this.client.metadata.redirect) != null && k4.linkMode && (Ge2 = H.metadata.redirect) != null && Ge2.linkMode && (je2 = H.metadata.redirect) != null && je2.universal && e && (this.client.core.addLinkModeSupportedApp(H.metadata.redirect.universal), this.client.session.update(ie3, { transportType: ee2.link_mode })), Ue3({ auths: Fe3, session: ue2 });
      };
      this.events.once(he3, de2), this.events.once(Re3, ve3);
      let Ie2;
      try {
        if (i3) {
          const A3 = formatJsonRpcRequest("wc_sessionAuthenticate", $2, se2);
          this.client.core.history.set(_2, A3);
          const k4 = await this.client.core.crypto.encode("", A3, { type: ge, encoding: De });
          Ie2 = sa(e, _2, k4);
        } else await Promise.all([this.sendRequest({ topic: _2, method: "wc_sessionAuthenticate", params: $2, expiry: t.expiry, throwOnFailedPublish: true, clientRpcId: se2 }), this.sendRequest({ topic: _2, method: "wc_sessionPropose", params: N4, expiry: P3.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: N4.id })]);
      } catch (A3) {
        throw this.events.off(he3, de2), this.events.off(Re3, ve3), A3;
      }
      return await this.setProposal(N4.id, N4), await this.setAuthRequest(se2, { request: O3(R3({}, $2), { verifyContext: {} }), pairingTopic: _2, transportType: r2 }), { uri: Ie2 ?? b2, response: Tt3 };
    }), c3(this, "approveSessionAuthenticate", async (t) => {
      const { id: e, auths: s } = t, i3 = this.client.core.eventClient.createEvent({ properties: { topic: e.toString(), trace: [or2.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (m2) {
        throw i3.setError(ar.no_internet_connection), m2;
      }
      const r2 = this.getPendingAuthRequest(e);
      if (!r2) throw i3.setError(ar.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${e}`);
      const n2 = r2.transportType || ee2.relay;
      n2 === ee2.relay && await this.confirmOnlineStateOrThrow();
      const a2 = r2.requester.publicKey, l3 = await this.client.core.crypto.generateKeyPair(), p2 = Fc(a2), h3 = { type: ee, receiverPublicKey: a2, senderPublicKey: l3 }, u2 = [], d3 = [];
      for (const m2 of s) {
        if (!await yf({ cacao: m2, projectId: this.client.core.projectId })) {
          i3.setError(ar.invalid_cacao);
          const I2 = Kt("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: e, topic: p2, error: I2, encodeOpts: h3 }), new Error(I2.message);
        }
        i3.addTrace(or2.cacaos_verified);
        const { p: S2 } = m2, _2 = Oe(S2.resources), b2 = [Vr(S2.iss)], C3 = dn(S2.iss);
        if (_2) {
          const I2 = If(_2), T2 = Af(_2);
          u2.push(...I2), b2.push(...T2);
        }
        for (const I2 of b2) d3.push(`${I2}:${C3}`);
      }
      const y4 = await this.client.core.crypto.generateSharedKey(l3, a2);
      i3.addTrace(or2.create_authenticated_session_topic);
      let w;
      if ((u2 == null ? void 0 : u2.length) > 0) {
        w = { topic: y4, acknowledged: true, self: { publicKey: l3, metadata: this.client.metadata }, peer: { publicKey: a2, metadata: r2.requester.metadata }, controller: a2, expiry: ii(B), authentication: s, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r2.pairingTopic, namespaces: ga([...new Set(u2)], [...new Set(d3)]), transportType: n2 }, i3.addTrace(or2.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(y4, { transportType: n2 });
        } catch (m2) {
          throw i3.setError(ar.subscribe_authenticated_session_topic_failure), m2;
        }
        i3.addTrace(or2.subscribe_authenticated_session_topic_success), await this.client.session.set(y4, w), i3.addTrace(or2.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r2.pairingTopic, metadata: r2.requester.metadata });
      }
      i3.addTrace(or2.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p2, id: e, result: { cacaos: s, responder: { publicKey: l3, metadata: this.client.metadata } }, encodeOpts: h3, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r2.requester.metadata, n2) });
      } catch (m2) {
        throw i3.setError(ar.authenticated_session_approve_publish_failure), m2;
      }
      return await this.client.auth.requests.delete(e, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r2.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i3.eventId }), { session: w };
    }), c3(this, "rejectSessionAuthenticate", async (t) => {
      this.isInitialized();
      const { id: e, reason: s } = t, i3 = this.getPendingAuthRequest(e);
      if (!i3) throw new Error(`Could not find pending auth request with id ${e}`);
      i3.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const r2 = i3.requester.publicKey, n2 = await this.client.core.crypto.generateKeyPair(), a2 = Fc(r2), l3 = { type: ee, receiverPublicKey: r2, senderPublicKey: n2 };
      await this.sendError({ id: e, topic: a2, error: s, encodeOpts: l3, rpcOpts: P3.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i3.requester.metadata, i3.transportType) }), await this.client.auth.requests.delete(e, { message: "rejected", code: 0 }), await this.deleteProposal(e);
    }), c3(this, "formatAuthMessage", (t) => {
      this.isInitialized();
      const { request: e, iss: s } = t;
      return qr(e, s);
    }), c3(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const t = this.relayMessageCache.shift();
          t && await this.onRelayMessage(t);
        } catch (t) {
          this.client.logger.error(t);
        }
      }, 50);
    }), c3(this, "cleanupDuplicatePairings", async (t) => {
      if (t.pairingTopic) try {
        const e = this.client.core.pairing.pairings.get(t.pairingTopic), s = this.client.core.pairing.pairings.getAll().filter((i3) => {
          var r2, n2;
          return ((r2 = i3.peerMetadata) == null ? void 0 : r2.url) && ((n2 = i3.peerMetadata) == null ? void 0 : n2.url) === t.peer.metadata.url && i3.topic && i3.topic !== e.topic;
        });
        if (s.length === 0) return;
        this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`), await Promise.all(s.map((i3) => this.client.core.pairing.disconnect({ topic: i3.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (e) {
        this.client.logger.error(e);
      }
    }), c3(this, "deleteSession", async (t) => {
      var e;
      const { topic: s, expirerHasDeleted: i3 = false, emitEvent: r2 = true, id: n2 = 0 } = t, { self: a2 } = this.client.session.get(s);
      await this.client.core.relayer.unsubscribe(s), await this.client.session.delete(s, Kt("USER_DISCONNECTED")), this.addToRecentlyDeleted(s, "session"), this.client.core.crypto.keychain.has(a2.publicKey) && await this.client.core.crypto.deleteKeyPair(a2.publicKey), this.client.core.crypto.keychain.has(s) && await this.client.core.crypto.deleteSymKey(s), i3 || this.client.core.expirer.del(s), this.client.core.storage.removeItem(Le2).catch((l3) => this.client.logger.warn(l3)), this.getPendingSessionRequests().forEach((l3) => {
        l3.topic === s && this.deletePendingSessionRequest(l3.id, Kt("USER_DISCONNECTED"));
      }), s === ((e = this.sessionRequestQueue.queue[0]) == null ? void 0 : e.topic) && (this.sessionRequestQueue.state = M3.idle), r2 && this.client.events.emit("session_delete", { id: n2, topic: s });
    }), c3(this, "deleteProposal", async (t, e) => {
      if (e) try {
        const s = this.client.proposal.get(t), i3 = this.client.core.eventClient.getEvent({ topic: s.pairingTopic });
        i3 == null ? void 0 : i3.setError(nr.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(t, Kt("USER_DISCONNECTED")), e ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "proposal");
    }), c3(this, "deletePendingSessionRequest", async (t, e, s = false) => {
      await Promise.all([this.client.pendingRequest.delete(t, e), s ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i3) => i3.id !== t), s && (this.sessionRequestQueue.state = M3.idle, this.client.events.emit("session_request_expire", { id: t }));
    }), c3(this, "deletePendingAuthRequest", async (t, e, s = false) => {
      await Promise.all([this.client.auth.requests.delete(t, e), s ? Promise.resolve() : this.client.core.expirer.del(t)]);
    }), c3(this, "setExpiry", async (t, e) => {
      this.client.session.keys.includes(t) && (this.client.core.expirer.set(t, e), await this.client.session.update(t, { expiry: e }));
    }), c3(this, "setProposal", async (t, e) => {
      this.client.core.expirer.set(t, ii(P3.wc_sessionPropose.req.ttl)), await this.client.proposal.set(t, e);
    }), c3(this, "setAuthRequest", async (t, e) => {
      const { request: s, pairingTopic: i3, transportType: r2 = ee2.relay } = e;
      this.client.core.expirer.set(t, s.expiryTimestamp), await this.client.auth.requests.set(t, { authPayload: s.authPayload, requester: s.requester, expiryTimestamp: s.expiryTimestamp, id: t, pairingTopic: i3, verifyContext: s.verifyContext, transportType: r2 });
    }), c3(this, "setPendingSessionRequest", async (t) => {
      const { id: e, topic: s, params: i3, verifyContext: r2 } = t, n2 = i3.request.expiryTimestamp || ii(P3.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(e, n2), await this.client.pendingRequest.set(e, { id: e, topic: s, params: i3, verifyContext: r2 });
    }), c3(this, "sendRequest", async (t) => {
      const { topic: e, method: s, params: i3, expiry: r2, relayRpcId: n2, clientRpcId: a2, throwOnFailedPublish: l3, appLink: p2, tvf: h3, publishOpts: u2 = {} } = t, d3 = formatJsonRpcRequest(s, i3, a2);
      let y4;
      const w = !!p2;
      try {
        const _2 = w ? De : Qt;
        y4 = await this.client.core.crypto.encode(e, d3, { encoding: _2 });
      } catch (_2) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${e} failed`), _2;
      }
      let m2;
      if (mt2.includes(s)) {
        const _2 = zc(JSON.stringify(d3)), b2 = zc(y4);
        m2 = await this.client.core.verify.register({ id: b2, decryptedId: _2 });
      }
      const S2 = R3(R3({}, P3[s].req), u2);
      if (S2.attestation = m2, r2 && (S2.ttl = r2), n2 && (S2.id = n2), this.client.core.history.set(e, d3), w) {
        const _2 = sa(p2, e, y4);
        await global.Linking.openURL(_2, this.client.name);
      } else S2.tvf = O3(R3({}, h3), { correlationId: d3.id }), l3 ? (S2.internal = O3(R3({}, S2.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(e, y4, S2)) : this.client.core.relayer.publish(e, y4, S2).catch((_2) => this.client.logger.error(_2));
      return d3.id;
    }), c3(this, "sendProposeSession", async (t) => {
      const { proposal: e, publishOpts: s } = t, i3 = formatJsonRpcRequest("wc_sessionPropose", e, e.id);
      this.client.core.history.set(e.pairingTopic, i3);
      const r2 = await this.client.core.crypto.encode(e.pairingTopic, i3, { encoding: Qt }), n2 = zc(JSON.stringify(i3)), a2 = zc(r2), l3 = await this.client.core.verify.register({ id: a2, decryptedId: n2 });
      await this.client.core.relayer.publishCustom({ payload: { pairingTopic: e.pairingTopic, sessionProposal: r2 }, opts: O3(R3({}, s), { publishMethod: "wc_proposeSession", attestation: l3 }) });
    }), c3(this, "sendApproveSession", async (t) => {
      const { sessionTopic: e, pairingProposalResponse: s, proposal: i3, sessionSettleRequest: r2, publishOpts: n2 } = t, a2 = formatJsonRpcResult(i3.id, s), l3 = await this.client.core.crypto.encode(i3.pairingTopic, a2, { encoding: Qt }), p2 = formatJsonRpcRequest("wc_sessionSettle", r2, n2 == null ? void 0 : n2.id), h3 = await this.client.core.crypto.encode(e, p2, { encoding: Qt });
      this.client.core.history.set(e, p2), await this.client.core.relayer.publishCustom({ payload: { sessionTopic: e, pairingTopic: i3.pairingTopic, sessionProposalResponse: l3, sessionSettlementRequest: h3 }, opts: O3(R3({}, n2), { publishMethod: "wc_approveSession" }) });
    }), c3(this, "sendResult", async (t) => {
      const { id: e, topic: s, result: i3, throwOnFailedPublish: r2, encodeOpts: n2, appLink: a2 } = t, l3 = formatJsonRpcResult(e, i3);
      let p2;
      const h3 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const y4 = h3 ? De : Qt;
        p2 = await this.client.core.crypto.encode(s, l3, O3(R3({}, n2 || {}), { encoding: y4 }));
      } catch (y4) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`), y4;
      }
      let u2, d3;
      try {
        u2 = await this.client.core.history.get(s, e);
        const y4 = u2.request;
        try {
          d3 = this.getTVFParams(e, y4.params, i3);
        } catch (w) {
          this.client.logger.warn(`sendResult() -> getTVFParams() failed: ${w == null ? void 0 : w.message}`);
        }
      } catch (y4) {
        throw this.client.logger.error(`sendResult() -> history.get(${s}, ${e}) failed`), y4;
      }
      if (h3) {
        const y4 = sa(a2, s, p2);
        await global.Linking.openURL(y4, this.client.name);
      } else {
        const y4 = u2.request.method, w = P3[y4].res;
        w.tvf = O3(R3({}, d3), { correlationId: e }), r2 ? (w.internal = O3(R3({}, w.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s, p2, w)) : this.client.core.relayer.publish(s, p2, w).catch((m2) => this.client.logger.error(m2));
      }
      await this.client.core.history.resolve(l3);
    }), c3(this, "sendError", async (t) => {
      const { id: e, topic: s, error: i3, encodeOpts: r2, rpcOpts: n2, appLink: a2 } = t, l3 = formatJsonRpcError(e, i3);
      let p2;
      const h3 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d3 = h3 ? De : Qt;
        p2 = await this.client.core.crypto.encode(s, l3, O3(R3({}, r2 || {}), { encoding: d3 }));
      } catch (d3) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`), d3;
      }
      let u2;
      try {
        u2 = await this.client.core.history.get(s, e);
      } catch (d3) {
        throw this.client.logger.error(`sendError() -> history.get(${s}, ${e}) failed`), d3;
      }
      if (h3) {
        const d3 = sa(a2, s, p2);
        await global.Linking.openURL(d3, this.client.name);
      } else {
        const d3 = u2.request.method, y4 = n2 || P3[d3].res;
        this.client.core.relayer.publish(s, p2, y4);
      }
      await this.client.core.history.resolve(l3);
    }), c3(this, "cleanup", async () => {
      const t = [], e = [];
      this.client.session.getAll().forEach((s) => {
        let i3 = false;
        fi(s.expiry) && (i3 = true), this.client.core.crypto.keychain.has(s.topic) || (i3 = true), i3 && t.push(s.topic);
      }), this.client.proposal.getAll().forEach((s) => {
        fi(s.expiryTimestamp) && e.push(s.id);
      }), await Promise.all([...t.map((s) => this.deleteSession({ topic: s })), ...e.map((s) => this.deleteProposal(s))]);
    }), c3(this, "onProviderMessageEvent", async (t) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(t) : await this.onRelayMessage(t);
    }), c3(this, "onRelayEventRequest", async (t) => {
      this.requestQueue.queue.push(t), await this.processRequestsQueue();
    }), c3(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === M3.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = M3.active;
        const t = this.requestQueue.queue.shift();
        if (t) try {
          await this.processRequest(t);
        } catch (e) {
          this.client.logger.warn(e);
        }
      }
      this.requestQueue.state = M3.idle;
    }), c3(this, "processRequest", async (t) => {
      const { topic: e, payload: s, attestation: i3, transportType: r2, encryptedId: n2 } = t, a2 = s.method;
      if (!this.shouldIgnorePairingRequest({ topic: e, requestMethod: a2 })) switch (a2) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: e, payload: s, attestation: i3, encryptedId: n2 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(e, s);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(e, s);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(e, s);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(e, s);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(e, s);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: e, payload: s, attestation: i3, encryptedId: n2, transportType: r2 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(e, s);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: e, payload: s, attestation: i3, encryptedId: n2, transportType: r2 });
        default:
          return this.client.logger.info(`Unsupported request method ${a2}`);
      }
    }), c3(this, "onRelayEventResponse", async (t) => {
      const { topic: e, payload: s, transportType: i3 } = t, r2 = (await this.client.core.history.get(e, s.id)).request.method;
      switch (r2) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(e, s, i3);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(e, s);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(e, s);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(e, s);
        case "wc_sessionPing":
          return this.onSessionPingResponse(e, s);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(e, s);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(e, s);
        default:
          return this.client.logger.info(`Unsupported response method ${r2}`);
      }
    }), c3(this, "onRelayEventUnknownPayload", (t) => {
      const { topic: e } = t, { message: s } = Et("MISSING_OR_INVALID", `Decoded payload on topic ${e} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s);
    }), c3(this, "shouldIgnorePairingRequest", (t) => {
      const { topic: e, requestMethod: s } = t, i3 = this.expectedPairingMethodMap.get(e);
      return !i3 || i3.includes(s) ? false : !!(i3.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c3(this, "onSessionProposeRequest", async (t) => {
      const { topic: e, payload: s, attestation: i3, encryptedId: r2 } = t, { params: n2, id: a2 } = s;
      try {
        const l3 = this.client.core.eventClient.getEvent({ topic: e });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l3 == null ? void 0 : l3.setError(X2.proposal_listener_not_found)), this.isValidConnect(R3({}, s.params));
        const p2 = n2.expiryTimestamp || ii(P3.wc_sessionPropose.req.ttl), h3 = R3({ id: a2, pairingTopic: e, expiryTimestamp: p2, attestation: i3, encryptedId: r2 }, n2);
        await this.setProposal(a2, h3);
        const u2 = await this.getVerifyContext({ attestationId: i3, hash: zc(JSON.stringify(s)), encryptedId: r2, metadata: h3.proposer.metadata });
        l3 == null ? void 0 : l3.addTrace(Y2.emit_session_proposal), this.client.events.emit("session_proposal", { id: a2, params: h3, verifyContext: u2 });
      } catch (l3) {
        await this.sendError({ id: a2, topic: e, error: l3, rpcOpts: P3.wc_sessionPropose.autoReject }), this.client.logger.error(l3);
      }
    }), c3(this, "onSessionProposeResponse", async (t, e, s) => {
      const { id: i3 } = e;
      if (isJsonRpcResult(e)) {
        const { result: r2 } = e;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r2 });
        const n2 = this.client.proposal.get(i3);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n2 });
        const a2 = n2.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a2 });
        const l3 = r2.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l3 });
        const p2 = await this.client.core.crypto.generateSharedKey(a2, l3);
        this.pendingSessions.set(i3, { sessionTopic: p2, pairingTopic: t, proposalId: i3, publicKey: a2 });
        const h3 = await this.client.core.relayer.subscribe(p2, { transportType: s });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h3 }), await this.client.core.pairing.activate({ topic: t });
      } else if (isJsonRpcError(e)) {
        await this.deleteProposal(i3);
        const r2 = ci("session_connect", i3);
        if (this.events.listenerCount(r2) === 0) throw new Error(`emitting ${r2} without any listeners, 954`);
        this.events.emit(r2, { error: e.error });
      }
    }), c3(this, "onSessionSettleRequest", async (t, e) => {
      const { id: s, params: i3 } = e;
      try {
        this.isValidSessionSettleRequest(i3);
        const { relay: r2, controller: n2, expiry: a2, namespaces: l3, sessionProperties: p2, scopedProperties: h3, sessionConfig: u2 } = e.params, d3 = [...this.pendingSessions.values()].find((m2) => m2.sessionTopic === t);
        if (!d3) return this.client.logger.error(`Pending session not found for topic ${t}`);
        const y4 = this.client.proposal.get(d3.proposalId), w = O3(R3(R3(R3({ topic: t, relay: r2, expiry: a2, namespaces: l3, acknowledged: true, pairingTopic: d3.pairingTopic, requiredNamespaces: y4.requiredNamespaces, optionalNamespaces: y4.optionalNamespaces, controller: n2.publicKey, self: { publicKey: d3.publicKey, metadata: this.client.metadata }, peer: { publicKey: n2.publicKey, metadata: n2.metadata } }, p2 && { sessionProperties: p2 }), h3 && { scopedProperties: h3 }), u2 && { sessionConfig: u2 }), { transportType: ee2.relay });
        await this.client.session.set(w.topic, w), await this.setExpiry(w.topic, w.expiry), await this.client.core.pairing.updateMetadata({ topic: d3.pairingTopic, metadata: w.peer.metadata }), this.client.events.emit("session_connect", { session: w }), this.events.emit(ci("session_connect", d3.proposalId), { session: w }), this.pendingSessions.delete(d3.proposalId), this.deleteProposal(d3.proposalId, false), this.cleanupDuplicatePairings(w), await this.sendResult({ id: e.id, topic: t, result: true });
      } catch (r2) {
        await this.sendError({ id: s, topic: t, error: r2 }), this.client.logger.error(r2);
      }
    }), c3(this, "onSessionSettleResponse", async (t, e) => {
      const { id: s } = e;
      isJsonRpcResult(e) ? (await this.client.session.update(t, { acknowledged: true }), this.events.emit(ci("session_approve", s), {})) : isJsonRpcError(e) && (await this.client.session.delete(t, Kt("USER_DISCONNECTED")), this.events.emit(ci("session_approve", s), { error: e.error }));
    }), c3(this, "onSessionUpdateRequest", async (t, e) => {
      const { params: s, id: i3 } = e;
      try {
        const r2 = `${t}_session_update`, n2 = Ha.get(r2);
        if (n2 && this.isRequestOutOfSync(n2, i3)) {
          this.client.logger.warn(`Discarding out of sync request - ${i3}`), this.sendError({ id: i3, topic: t, error: Kt("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(R3({ topic: t }, s));
        try {
          Ha.set(r2, i3), await this.client.session.update(t, { namespaces: s.namespaces }), await this.sendResult({ id: i3, topic: t, result: true });
        } catch (a2) {
          throw Ha.delete(r2), a2;
        }
        this.client.events.emit("session_update", { id: i3, topic: t, params: s });
      } catch (r2) {
        await this.sendError({ id: i3, topic: t, error: r2 }), this.client.logger.error(r2);
      }
    }), c3(this, "isRequestOutOfSync", (t, e) => e.toString().slice(0, -3) < t.toString().slice(0, -3)), c3(this, "onSessionUpdateResponse", (t, e) => {
      const { id: s } = e, i3 = ci("session_update", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e) ? this.events.emit(ci("session_update", s), {}) : isJsonRpcError(e) && this.events.emit(ci("session_update", s), { error: e.error });
    }), c3(this, "onSessionExtendRequest", async (t, e) => {
      const { id: s } = e;
      try {
        this.isValidExtend({ topic: t }), await this.setExpiry(t, ii(B)), await this.sendResult({ id: s, topic: t, result: true }), this.client.events.emit("session_extend", { id: s, topic: t });
      } catch (i3) {
        await this.sendError({ id: s, topic: t, error: i3 }), this.client.logger.error(i3);
      }
    }), c3(this, "onSessionExtendResponse", (t, e) => {
      const { id: s } = e, i3 = ci("session_extend", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e) ? this.events.emit(ci("session_extend", s), {}) : isJsonRpcError(e) && this.events.emit(ci("session_extend", s), { error: e.error });
    }), c3(this, "onSessionPingRequest", async (t, e) => {
      const { id: s } = e;
      try {
        this.isValidPing({ topic: t }), await this.sendResult({ id: s, topic: t, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s, topic: t });
      } catch (i3) {
        await this.sendError({ id: s, topic: t, error: i3 }), this.client.logger.error(i3);
      }
    }), c3(this, "onSessionPingResponse", (t, e) => {
      const { id: s } = e, i3 = ci("session_ping", s);
      setTimeout(() => {
        if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners 2176`);
        isJsonRpcResult(e) ? this.events.emit(ci("session_ping", s), {}) : isJsonRpcError(e) && this.events.emit(ci("session_ping", s), { error: e.error });
      }, 500);
    }), c3(this, "onSessionDeleteRequest", async (t, e) => {
      const { id: s } = e;
      try {
        this.isValidDisconnect({ topic: t, reason: e.params }), await Promise.all([new Promise((i3) => {
          this.client.core.relayer.once(C2.publish, async () => {
            i3(await this.deleteSession({ topic: t, id: s }));
          });
        }), this.sendResult({ id: s, topic: t, result: true }), this.cleanupPendingSentRequestsForTopic({ topic: t, error: Kt("USER_DISCONNECTED") })]).catch((i3) => this.client.logger.error(i3));
      } catch (i3) {
        this.client.logger.error(i3);
      }
    }), c3(this, "onSessionRequest", async (t) => {
      var e, s, i3;
      const { topic: r2, payload: n2, attestation: a2, encryptedId: l3, transportType: p2 } = t, { id: h3, params: u2 } = n2;
      try {
        await this.isValidRequest(R3({ topic: r2 }, u2));
        const d3 = this.client.session.get(r2), y4 = await this.getVerifyContext({ attestationId: a2, hash: zc(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u2, h3))), encryptedId: l3, metadata: d3.peer.metadata, transportType: p2 }), w = { id: h3, topic: r2, params: u2, verifyContext: y4 };
        await this.setPendingSessionRequest(w), p2 === ee2.link_mode && (e = d3.peer.metadata.redirect) != null && e.universal && this.client.core.addLinkModeSupportedApp((s = d3.peer.metadata.redirect) == null ? void 0 : s.universal), (i3 = this.client.signConfig) != null && i3.disableRequestQueue ? this.emitSessionRequest(w) : (this.addSessionRequestToSessionRequestQueue(w), this.processSessionRequestQueue());
      } catch (d3) {
        await this.sendError({ id: h3, topic: r2, error: d3 }), this.client.logger.error(d3);
      }
    }), c3(this, "onSessionRequestResponse", (t, e) => {
      const { id: s } = e, i3 = ci("session_request", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e) ? this.events.emit(ci("session_request", s), { result: e.result }) : isJsonRpcError(e) && this.events.emit(ci("session_request", s), { error: e.error });
    }), c3(this, "onSessionEventRequest", async (t, e) => {
      const { id: s, params: i3 } = e;
      try {
        const r2 = `${t}_session_event_${i3.event.name}`, n2 = Ha.get(r2);
        if (n2 && this.isRequestOutOfSync(n2, s)) {
          this.client.logger.info(`Discarding out of sync request - ${s}`);
          return;
        }
        this.isValidEmit(R3({ topic: t }, i3)), this.client.events.emit("session_event", { id: s, topic: t, params: i3 }), Ha.set(r2, s);
      } catch (r2) {
        await this.sendError({ id: s, topic: t, error: r2 }), this.client.logger.error(r2);
      }
    }), c3(this, "onSessionAuthenticateResponse", (t, e) => {
      const { id: s } = e;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: t, payload: e }), isJsonRpcResult(e) ? this.events.emit(ci("session_request", s), { result: e.result }) : isJsonRpcError(e) && this.events.emit(ci("session_request", s), { error: e.error });
    }), c3(this, "onSessionAuthenticateRequest", async (t) => {
      var e;
      const { topic: s, payload: i3, attestation: r2, encryptedId: n2, transportType: a2 } = t;
      try {
        const { requester: l3, authPayload: p2, expiryTimestamp: h3 } = i3.params, u2 = await this.getVerifyContext({ attestationId: r2, hash: zc(JSON.stringify(i3)), encryptedId: n2, metadata: l3.metadata, transportType: a2 }), d3 = { requester: l3, pairingTopic: s, id: i3.id, authPayload: p2, verifyContext: u2, expiryTimestamp: h3 };
        await this.setAuthRequest(i3.id, { request: d3, pairingTopic: s, transportType: a2 }), a2 === ee2.link_mode && (e = l3.metadata.redirect) != null && e.universal && this.client.core.addLinkModeSupportedApp(l3.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s, params: i3.params, id: i3.id, verifyContext: u2 });
      } catch (l3) {
        this.client.logger.error(l3);
        const p2 = i3.params.requester.publicKey, h3 = await this.client.core.crypto.generateKeyPair(), u2 = this.getAppLinkIfEnabled(i3.params.requester.metadata, a2), d3 = { type: ee, receiverPublicKey: p2, senderPublicKey: h3 };
        await this.sendError({ id: i3.id, topic: s, error: l3, encodeOpts: d3, rpcOpts: P3.wc_sessionAuthenticate.autoReject, appLink: u2 });
      }
    }), c3(this, "addSessionRequestToSessionRequestQueue", (t) => {
      this.sessionRequestQueue.queue.push(t);
    }), c3(this, "cleanupAfterResponse", (t) => {
      this.deletePendingSessionRequest(t.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = M3.idle, this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay));
    }), c3(this, "cleanupPendingSentRequestsForTopic", ({ topic: t, error: e }) => {
      const s = this.client.core.history.pending;
      s.length > 0 && s.filter((i3) => i3.topic === t && i3.request.method === "wc_sessionRequest").forEach((i3) => {
        const r2 = i3.request.id, n2 = ci("session_request", r2);
        if (this.events.listenerCount(n2) === 0) throw new Error(`emitting ${n2} without any listeners`);
        this.events.emit(ci("session_request", i3.request.id), { error: e });
      });
    }), c3(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === M3.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const t = this.sessionRequestQueue.queue[0];
      if (!t) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.emitSessionRequest(t);
      } catch (e) {
        this.client.logger.error(e);
      }
    }), c3(this, "emitSessionRequest", (t) => {
      if (this.emittedSessionRequests.has(t.id)) {
        this.client.logger.warn({ id: t.id }, `Skipping emitting \`session_request\` event for duplicate request. id: ${t.id}`);
        return;
      }
      this.sessionRequestQueue.state = M3.active, this.emittedSessionRequests.add(t.id), this.client.events.emit("session_request", t);
    }), c3(this, "onPairingCreated", (t) => {
      if (t.methods && this.expectedPairingMethodMap.set(t.topic, t.methods), t.active) return;
      const e = this.client.proposal.getAll().find((s) => s.pairingTopic === t.topic);
      e && this.onSessionProposeRequest({ topic: t.topic, payload: formatJsonRpcRequest("wc_sessionPropose", O3(R3({}, e), { requiredNamespaces: e.requiredNamespaces, optionalNamespaces: e.optionalNamespaces, relays: e.relays, proposer: e.proposer, sessionProperties: e.sessionProperties, scopedProperties: e.scopedProperties }), e.id), attestation: e.attestation, encryptedId: e.encryptedId });
    }), c3(this, "isValidConnect", async (t) => {
      if (!Aa(t)) {
        const { message: l3 } = Et("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(t)}`);
        throw new Error(l3);
      }
      const { pairingTopic: e, requiredNamespaces: s, optionalNamespaces: i3, sessionProperties: r2, scopedProperties: n2, relays: a2 } = t;
      if (kt(e) || await this.isValidPairingTopic(e), !Ba(a2, true)) {
        const { message: l3 } = Et("MISSING_OR_INVALID", `connect() relays: ${a2}`);
        throw new Error(l3);
      }
      if (!kt(s) && Ve(s) !== 0) {
        const l3 = "requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";
        ["fatal", "error", "silent"].includes(this.client.logger.level) ? console.warn(l3) : this.client.logger.warn(l3), this.validateNamespaces(s, "requiredNamespaces");
      }
      if (!kt(i3) && Ve(i3) !== 0 && this.validateNamespaces(i3, "optionalNamespaces"), kt(r2) || this.validateSessionProps(r2, "sessionProperties"), !kt(n2)) {
        this.validateSessionProps(n2, "scopedProperties");
        const l3 = Object.keys(s || {}).concat(Object.keys(i3 || {}));
        if (!Object.keys(n2).every((p2) => l3.includes(p2.split(":")[0]))) throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(n2)}, required/optional namespaces: ${JSON.stringify(l3)}`);
      }
    }), c3(this, "validateNamespaces", (t, e) => {
      const s = Ea(t, "connect()", e);
      if (s) throw new Error(s.message);
    }), c3(this, "isValidApprove", async (t) => {
      if (!Aa(t)) throw new Error(Et("MISSING_OR_INVALID", `approve() params: ${t}`).message);
      const { id: e, namespaces: s, relayProtocol: i3, sessionProperties: r2, scopedProperties: n2 } = t;
      this.checkRecentlyDeleted(e), await this.isValidProposalId(e);
      const a2 = this.client.proposal.get(e), l3 = is(s, "approve()");
      if (l3) throw new Error(l3.message);
      const p2 = cs(a2.requiredNamespaces, s, "approve()");
      if (p2) throw new Error(p2.message);
      if (!it(i3, true)) {
        const { message: h3 } = Et("MISSING_OR_INVALID", `approve() relayProtocol: ${i3}`);
        throw new Error(h3);
      }
      if (kt(r2) || this.validateSessionProps(r2, "sessionProperties"), !kt(n2)) {
        this.validateSessionProps(n2, "scopedProperties");
        const h3 = new Set(Object.keys(s));
        if (!Object.keys(n2).every((u2) => h3.has(u2.split(":")[0]))) throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(n2)}, approved namespaces: ${Array.from(h3).join(", ")}`);
      }
    }), c3(this, "isValidReject", async (t) => {
      if (!Aa(t)) {
        const { message: i3 } = Et("MISSING_OR_INVALID", `reject() params: ${t}`);
        throw new Error(i3);
      }
      const { id: e, reason: s } = t;
      if (this.checkRecentlyDeleted(e), await this.isValidProposalId(e), !Sa(s)) {
        const { message: i3 } = Et("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s)}`);
        throw new Error(i3);
      }
    }), c3(this, "isValidSessionSettleRequest", (t) => {
      if (!Aa(t)) {
        const { message: l3 } = Et("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${t}`);
        throw new Error(l3);
      }
      const { relay: e, controller: s, namespaces: i3, expiry: r2 } = t;
      if (!fs(e)) {
        const { message: l3 } = Et("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l3);
      }
      const n2 = va(s, "onSessionSettleRequest()");
      if (n2) throw new Error(n2.message);
      const a2 = is(i3, "onSessionSettleRequest()");
      if (a2) throw new Error(a2.message);
      if (fi(r2)) {
        const { message: l3 } = Et("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l3);
      }
    }), c3(this, "isValidUpdate", async (t) => {
      if (!Aa(t)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `update() params: ${t}`);
        throw new Error(a2);
      }
      const { topic: e, namespaces: s } = t;
      this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);
      const i3 = this.client.session.get(e), r2 = is(s, "update()");
      if (r2) throw new Error(r2.message);
      const n2 = cs(i3.requiredNamespaces, s, "update()");
      if (n2) throw new Error(n2.message);
    }), c3(this, "isValidExtend", async (t) => {
      if (!Aa(t)) {
        const { message: s } = Et("MISSING_OR_INVALID", `extend() params: ${t}`);
        throw new Error(s);
      }
      const { topic: e } = t;
      this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);
    }), c3(this, "isValidRequest", async (t) => {
      if (!Aa(t)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `request() params: ${t}`);
        throw new Error(a2);
      }
      const { topic: e, request: s, chainId: i3, expiry: r2 } = t;
      this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);
      const { namespaces: n2 } = this.client.session.get(e);
      if (!_a2(n2, i3)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `request() chainId: ${i3}`);
        throw new Error(a2);
      }
      if (!Na(s)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `request() ${JSON.stringify(s)}`);
        throw new Error(a2);
      }
      if (!Ta(n2, i3, s.method)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `request() method: ${s.method}`);
        throw new Error(a2);
      }
      if (r2 && !La(r2, _e2)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `request() expiry: ${r2}. Expiry must be a number (in seconds) between ${_e2.min} and ${_e2.max}`);
        throw new Error(a2);
      }
    }), c3(this, "isValidRespond", async (t) => {
      var e;
      if (!Aa(t)) {
        const { message: r2 } = Et("MISSING_OR_INVALID", `respond() params: ${t}`);
        throw new Error(r2);
      }
      const { topic: s, response: i3 } = t;
      try {
        await this.isValidSessionTopic(s);
      } catch (r2) {
        throw (e = t == null ? void 0 : t.response) != null && e.id && this.cleanupAfterResponse(t), r2;
      }
      if (!Oa(i3)) {
        const { message: r2 } = Et("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i3)}`);
        throw new Error(r2);
      }
    }), c3(this, "isValidPing", async (t) => {
      if (!Aa(t)) {
        const { message: s } = Et("MISSING_OR_INVALID", `ping() params: ${t}`);
        throw new Error(s);
      }
      const { topic: e } = t;
      await this.isValidSessionOrPairingTopic(e);
    }), c3(this, "isValidEmit", async (t) => {
      if (!Aa(t)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `emit() params: ${t}`);
        throw new Error(n2);
      }
      const { topic: e, event: s, chainId: i3 } = t;
      await this.isValidSessionTopic(e);
      const { namespaces: r2 } = this.client.session.get(e);
      if (!_a2(r2, i3)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `emit() chainId: ${i3}`);
        throw new Error(n2);
      }
      if (!Ua(s)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
        throw new Error(n2);
      }
      if (!Ra(r2, i3, s.name)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
        throw new Error(n2);
      }
    }), c3(this, "isValidDisconnect", async (t) => {
      if (!Aa(t)) {
        const { message: s } = Et("MISSING_OR_INVALID", `disconnect() params: ${t}`);
        throw new Error(s);
      }
      const { topic: e } = t;
      await this.isValidSessionOrPairingTopic(e);
    }), c3(this, "isValidAuthenticate", (t) => {
      const { chains: e, uri: s, domain: i3, nonce: r2 } = t;
      if (!Array.isArray(e) || e.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!it(s, false)) throw new Error("uri is required parameter");
      if (!it(i3, false)) throw new Error("domain is required parameter");
      if (!it(r2, false)) throw new Error("nonce is required parameter");
      if ([...new Set(e.map((a2) => Fe(a2).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: n2 } = Fe(e[0]);
      if (n2 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c3(this, "getVerifyContext", async (t) => {
      const { attestationId: e, hash: s, encryptedId: i3, metadata: r2, transportType: n2 } = t, a2 = { verified: { verifyUrl: r2.verifyUrl || be2, validation: "UNKNOWN", origin: r2.url || "" } };
      try {
        if (n2 === ee2.link_mode) {
          const p2 = this.getAppLinkIfEnabled(r2, n2);
          return a2.verified.validation = p2 && new URL(p2).origin === new URL(r2.url).origin ? "VALID" : "INVALID", a2;
        }
        const l3 = await this.client.core.verify.resolve({ attestationId: e, hash: s, encryptedId: i3, verifyUrl: r2.verifyUrl });
        l3 && (a2.verified.origin = l3.origin, a2.verified.isScam = l3.isScam, a2.verified.validation = l3.origin === new URL(r2.url).origin ? "VALID" : "INVALID");
      } catch (l3) {
        this.client.logger.warn(l3);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a2)}`), a2;
    }), c3(this, "validateSessionProps", (t, e) => {
      Object.values(t).forEach((s, i3) => {
        if (s == null) {
          const { message: r2 } = Et("MISSING_OR_INVALID", `${e} must contain an existing value for each key. Received: ${s} for key ${Object.keys(t)[i3]}`);
          throw new Error(r2);
        }
      });
    }), c3(this, "getPendingAuthRequest", (t) => {
      const e = this.client.auth.requests.get(t);
      return typeof e == "object" ? e : void 0;
    }), c3(this, "addToRecentlyDeleted", (t, e) => {
      if (this.recentlyDeletedMap.set(t, e), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s = 0;
        const i3 = this.recentlyDeletedLimit / 2;
        for (const r2 of this.recentlyDeletedMap.keys()) {
          if (s++ >= i3) break;
          this.recentlyDeletedMap.delete(r2);
        }
      }
    }), c3(this, "checkRecentlyDeleted", (t) => {
      const e = this.recentlyDeletedMap.get(t);
      if (e) {
        const { message: s } = Et("MISSING_OR_INVALID", `Record was recently deleted - ${e}: ${t}`);
        throw new Error(s);
      }
    }), c3(this, "isLinkModeEnabled", (t, e) => {
      var s, i3, r2, n2, a2, l3, p2, h3, u2;
      return !t || e !== ee2.link_mode ? false : ((i3 = (s = this.client.metadata) == null ? void 0 : s.redirect) == null ? void 0 : i3.linkMode) === true && ((n2 = (r2 = this.client.metadata) == null ? void 0 : r2.redirect) == null ? void 0 : n2.universal) !== void 0 && ((l3 = (a2 = this.client.metadata) == null ? void 0 : a2.redirect) == null ? void 0 : l3.universal) !== "" && ((p2 = t == null ? void 0 : t.redirect) == null ? void 0 : p2.universal) !== void 0 && ((h3 = t == null ? void 0 : t.redirect) == null ? void 0 : h3.universal) !== "" && ((u2 = t == null ? void 0 : t.redirect) == null ? void 0 : u2.linkMode) === true && this.client.core.linkModeSupportedApps.includes(t.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c3(this, "getAppLinkIfEnabled", (t, e) => {
      var s;
      return this.isLinkModeEnabled(t, e) ? (s = t == null ? void 0 : t.redirect) == null ? void 0 : s.universal : void 0;
    }), c3(this, "handleLinkModeMessage", ({ url: t }) => {
      if (!t || !t.includes("wc_ev") || !t.includes("topic")) return;
      const e = li(t, "topic") || "", s = decodeURIComponent(li(t, "wc_ev") || ""), i3 = this.client.session.keys.includes(e);
      i3 && this.client.session.update(e, { transportType: ee2.link_mode }), this.client.core.dispatchEnvelope({ topic: e, message: s, sessionExists: i3 });
    }), c3(this, "registerLinkModeListeners", async () => {
      var t;
      if (hi() || Bt() && (t = this.client.metadata.redirect) != null && t.linkMode) {
        const e = global == null ? void 0 : global.Linking;
        if (typeof e < "u") {
          e.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s = await e.getInitialURL();
          s && setTimeout(() => {
            this.handleLinkModeMessage({ url: s });
          }, 50);
        }
      }
    }), c3(this, "getTVFParams", (t, e, s) => {
      var i3, r2, n2;
      if (!((i3 = e.request) != null && i3.method)) return {};
      const a2 = { correlationId: t, rpcMethods: [e.request.method], chainId: e.chainId };
      try {
        const l3 = this.extractTxHashesFromResult(e.request, s);
        a2.txHashes = l3, a2.contractAddresses = this.isValidContractData(e.request.params) ? [(n2 = (r2 = e.request.params) == null ? void 0 : r2[0]) == null ? void 0 : n2.to] : [];
      } catch (l3) {
        this.client.logger.warn("Error getting TVF params", l3);
      }
      return a2;
    }), c3(this, "isValidContractData", (t) => {
      var e;
      if (!t) return false;
      try {
        const s = (t == null ? void 0 : t.data) || ((e = t == null ? void 0 : t[0]) == null ? void 0 : e.data);
        if (!s.startsWith("0x")) return false;
        const i3 = s.slice(2);
        return /^[0-9a-fA-F]*$/.test(i3) ? i3.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c3(this, "extractTxHashesFromResult", (t, e) => {
      var s;
      try {
        if (!e) return [];
        const i3 = t.method, r2 = yt[i3];
        if (i3 === "sui_signTransaction") return [ff(e.transactionBytes)];
        if (i3 === "near_signTransaction") return [cf(e)];
        if (i3 === "near_signTransactions") return e.map((a2) => cf(a2));
        if (i3 === "xrpl_signTransactionFor" || i3 === "xrpl_signTransaction") return [(s = e.tx_json) == null ? void 0 : s.hash];
        if (i3 === "polkadot_signTransaction") return [Ka({ transaction: t.params.transactionPayload, signature: e.signature })];
        if (i3 === "algo_signTxn") return me(e) ? e.map((a2) => af(a2)) : [af(e)];
        if (i3 === "cosmos_signDirect") return [uf(e)];
        if (typeof e == "string") return [e];
        const n2 = e[r2.key];
        if (me(n2)) return i3 === "solana_signAllTransactions" ? n2.map((a2) => sf(a2)) : n2;
        if (typeof n2 == "string") return [n2];
      } catch (i3) {
        this.client.logger.warn("Error extracting tx hashes from result", i3);
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const o2 = this.client.session.keys, t = this.client.core.relayer.messages.getWithoutAck(o2);
      for (const [e, s] of Object.entries(t)) for (const i3 of s) try {
        await this.onProviderMessageEvent({ topic: e, message: i3, publishedAt: Date.now() });
      } catch {
        this.client.logger.warn(`Error processing pending message event for topic: ${e}, message: ${i3}`);
      }
    } catch (o2) {
      this.client.logger.warn("processPendingMessageEvents failed", o2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: o2 } = Et("NOT_INITIALIZED", this.name);
      throw new Error(o2);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C2.message, (o2) => {
      this.onProviderMessageEvent(o2);
    });
  }
  async onRelayMessage(o2) {
    const { topic: t, message: e, attestation: s, transportType: i3 } = o2, { publicKey: r2 } = this.client.auth.authKeys.keys.includes(pe3) ? this.client.auth.authKeys.get(pe3) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const n2 = await this.client.core.crypto.decode(t, e, { receiverPublicKey: r2, encoding: i3 === ee2.link_mode ? De : Qt });
      isJsonRpcRequest(n2) ? (this.client.core.history.set(t, n2), await this.onRelayEventRequest({ topic: t, payload: n2, attestation: s, transportType: i3, encryptedId: zc(e) })) : isJsonRpcResponse(n2) ? (await this.client.core.history.resolve(n2), await this.onRelayEventResponse({ topic: t, payload: n2, transportType: i3 }), this.client.core.history.delete(t, n2.id)) : await this.onRelayEventUnknownPayload({ topic: t, payload: n2, transportType: i3 }), await this.client.core.relayer.messages.ack(t, e);
    } catch (n2) {
      this.client.logger.error(n2);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(q.expired, async (o2) => {
      const { topic: t, id: e } = si(o2.target);
      if (e && this.client.pendingRequest.keys.includes(e)) return await this.deletePendingSessionRequest(e, Et("EXPIRED"), true);
      if (e && this.client.auth.requests.keys.includes(e)) return await this.deletePendingAuthRequest(e, Et("EXPIRED"), true);
      t ? this.client.session.keys.includes(t) && (await this.deleteSession({ topic: t, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: t })) : e && (await this.deleteProposal(e, true), this.client.events.emit("proposal_expire", { id: e }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(ae2.create, (o2) => this.onPairingCreated(o2)), this.client.core.pairing.events.on(ae2.delete, (o2) => {
      this.addToRecentlyDeleted(o2.topic, "pairing");
    });
  }
  isValidPairingTopic(o2) {
    if (!it(o2, false)) {
      const { message: t } = Et("MISSING_OR_INVALID", `pairing topic should be a string: ${o2}`);
      throw new Error(t);
    }
    if (!this.client.core.pairing.pairings.keys.includes(o2)) {
      const { message: t } = Et("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o2}`);
      throw new Error(t);
    }
    if (fi(this.client.core.pairing.pairings.get(o2).expiry)) {
      const { message: t } = Et("EXPIRED", `pairing topic: ${o2}`);
      throw new Error(t);
    }
  }
  async isValidSessionTopic(o2) {
    if (!it(o2, false)) {
      const { message: t } = Et("MISSING_OR_INVALID", `session topic should be a string: ${o2}`);
      throw new Error(t);
    }
    if (this.checkRecentlyDeleted(o2), !this.client.session.keys.includes(o2)) {
      const { message: t } = Et("NO_MATCHING_KEY", `session topic doesn't exist: ${o2}`);
      throw new Error(t);
    }
    if (fi(this.client.session.get(o2).expiry)) {
      await this.deleteSession({ topic: o2 });
      const { message: t } = Et("EXPIRED", `session topic: ${o2}`);
      throw new Error(t);
    }
    if (!this.client.core.crypto.keychain.has(o2)) {
      const { message: t } = Et("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o2}`);
      throw await this.deleteSession({ topic: o2 }), new Error(t);
    }
  }
  async isValidSessionOrPairingTopic(o2) {
    if (this.checkRecentlyDeleted(o2), this.client.session.keys.includes(o2)) await this.isValidSessionTopic(o2);
    else if (this.client.core.pairing.pairings.keys.includes(o2)) this.isValidPairingTopic(o2);
    else if (it(o2, false)) {
      const { message: t } = Et("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o2}`);
      throw new Error(t);
    } else {
      const { message: t } = Et("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o2}`);
      throw new Error(t);
    }
  }
  async isValidProposalId(o2) {
    if (!Ia(o2)) {
      const { message: t } = Et("MISSING_OR_INVALID", `proposal id should be a number: ${o2}`);
      throw new Error(t);
    }
    if (!this.client.proposal.keys.includes(o2)) {
      const { message: t } = Et("NO_MATCHING_KEY", `proposal id doesn't exist: ${o2}`);
      throw new Error(t);
    }
    if (fi(this.client.proposal.get(o2).expiryTimestamp)) {
      await this.deleteProposal(o2);
      const { message: t } = Et("EXPIRED", `proposal id: ${o2}`);
      throw new Error(t);
    }
  }
};
var ks2 = class extends Ui2 {
  constructor(o2, t) {
    super(o2, t, dt2, we3), this.core = o2, this.logger = t;
  }
};
var It3 = class extends Ui2 {
  constructor(o2, t) {
    super(o2, t, ut2, we3), this.core = o2, this.logger = t;
  }
};
var Ds = class extends Ui2 {
  constructor(o2, t) {
    super(o2, t, wt2, we3, (e) => e.id), this.core = o2, this.logger = t;
  }
};
var Ls2 = class extends Ui2 {
  constructor(o2, t) {
    super(o2, t, Et2, le3, () => pe3), this.core = o2, this.logger = t;
  }
};
var Ms2 = class extends Ui2 {
  constructor(o2, t) {
    super(o2, t, St3, le3), this.core = o2, this.logger = t;
  }
};
var $s2 = class extends Ui2 {
  constructor(o2, t) {
    super(o2, t, Rt3, le3, (e) => e.id), this.core = o2, this.logger = t;
  }
};
var Ks2 = Object.defineProperty;
var Us = (E3, o2, t) => o2 in E3 ? Ks2(E3, o2, { enumerable: true, configurable: true, writable: true, value: t }) : E3[o2] = t;
var Ke3 = (E3, o2, t) => Us(E3, typeof o2 != "symbol" ? o2 + "" : o2, t);
var Gs = class {
  constructor(o2, t) {
    this.core = o2, this.logger = t, Ke3(this, "authKeys"), Ke3(this, "pairingTopics"), Ke3(this, "requests"), this.authKeys = new Ls2(this.core, this.logger), this.pairingTopics = new Ms2(this.core, this.logger), this.requests = new $s2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var js2 = Object.defineProperty;
var Fs = (E3, o2, t) => o2 in E3 ? js2(E3, o2, { enumerable: true, configurable: true, writable: true, value: t }) : E3[o2] = t;
var f4 = (E3, o2, t) => Fs(E3, typeof o2 != "symbol" ? o2 + "" : o2, t);
var fe3 = class _fe extends J2 {
  constructor(o2) {
    super(o2), f4(this, "protocol", Ce2), f4(this, "version", ke2), f4(this, "name", me3.name), f4(this, "metadata"), f4(this, "core"), f4(this, "logger"), f4(this, "events", new import_events5.EventEmitter()), f4(this, "engine"), f4(this, "session"), f4(this, "proposal"), f4(this, "pendingRequest"), f4(this, "auth"), f4(this, "signConfig"), f4(this, "on", (e, s) => this.events.on(e, s)), f4(this, "once", (e, s) => this.events.once(e, s)), f4(this, "off", (e, s) => this.events.off(e, s)), f4(this, "removeListener", (e, s) => this.events.removeListener(e, s)), f4(this, "removeAllListeners", (e) => this.events.removeAllListeners(e)), f4(this, "connect", async (e) => {
      try {
        return await this.engine.connect(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "pair", async (e) => {
      try {
        return await this.engine.pair(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "approve", async (e) => {
      try {
        return await this.engine.approve(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "reject", async (e) => {
      try {
        return await this.engine.reject(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "update", async (e) => {
      try {
        return await this.engine.update(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "extend", async (e) => {
      try {
        return await this.engine.extend(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "request", async (e) => {
      try {
        return await this.engine.request(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "respond", async (e) => {
      try {
        return await this.engine.respond(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "ping", async (e) => {
      try {
        return await this.engine.ping(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "emit", async (e) => {
      try {
        return await this.engine.emit(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "disconnect", async (e) => {
      try {
        return await this.engine.disconnect(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "find", (e) => {
      try {
        return this.engine.find(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (e) {
        throw this.logger.error(e.message), e;
      }
    }), f4(this, "authenticate", async (e, s) => {
      try {
        return await this.engine.authenticate(e, s);
      } catch (i3) {
        throw this.logger.error(i3.message), i3;
      }
    }), f4(this, "formatAuthMessage", (e) => {
      try {
        return this.engine.formatAuthMessage(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "approveSessionAuthenticate", async (e) => {
      try {
        return await this.engine.approveSessionAuthenticate(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "rejectSessionAuthenticate", async (e) => {
      try {
        return await this.engine.rejectSessionAuthenticate(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), this.name = (o2 == null ? void 0 : o2.name) || me3.name, this.metadata = Ks(o2 == null ? void 0 : o2.metadata), this.signConfig = o2 == null ? void 0 : o2.signConfig;
    const t = typeof (o2 == null ? void 0 : o2.logger) < "u" && typeof (o2 == null ? void 0 : o2.logger) != "string" ? o2.logger : (0, import_pino.default)(k({ level: (o2 == null ? void 0 : o2.logger) || me3.logger }));
    this.core = (o2 == null ? void 0 : o2.core) || new ta2(o2), this.logger = E(t, this.name), this.session = new It3(this.core, this.logger), this.proposal = new ks2(this.core, this.logger), this.pendingRequest = new Ds(this.core, this.logger), this.engine = new Cs2(this), this.auth = new Gs(this.core, this.logger);
  }
  static async init(o2) {
    const t = new _fe(o2);
    return await t.initialize(), t;
  }
  get context() {
    return y(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success");
    } catch (o2) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(o2.message), o2;
    }
  }
};

// node_modules/@web3auth/no-modal/dist/lib.esm/connectors/wallet-connect-v2-connector/walletConnectV2Connector.js
var import_deepmerge = __toESM(require_cjs());
var WalletConnectV2Connector = class extends BaseConnector {
  constructor(options) {
    var _this$connectorOption, _this$connectorOption2, _this$connectorOption3, _this$connectorOption4, _this$connectorOption5;
    super(options);
    _defineProperty(this, "name", WALLET_CONNECTORS.WALLET_CONNECT_V2);
    _defineProperty(this, "connectorNamespace", CONNECTOR_NAMESPACES.MULTICHAIN);
    _defineProperty(this, "currentChainNamespace", CHAIN_NAMESPACES.OTHER);
    _defineProperty(this, "type", CONNECTOR_CATEGORY.EXTERNAL);
    _defineProperty(this, "connectorOptions", void 0);
    _defineProperty(this, "status", CONNECTOR_STATUS.NOT_READY);
    _defineProperty(this, "connectorData", {
      uri: ""
    });
    _defineProperty(this, "connector", null);
    _defineProperty(this, "activeSession", null);
    _defineProperty(this, "wcProvider", null);
    _defineProperty(this, "analytics", void 0);
    this.connectorOptions = _objectSpread2({}, options);
    const {
      qrcodeModal,
      walletConnectInitOptions
    } = (options === null || options === void 0 ? void 0 : options.connectorSettings) || {};
    this.connectorOptions = _objectSpread2(_objectSpread2({}, this.connectorOptions), {}, {
      connectorSettings: (_this$connectorOption = (_this$connectorOption2 = this.connectorOptions) === null || _this$connectorOption2 === void 0 ? void 0 : _this$connectorOption2.connectorSettings) !== null && _this$connectorOption !== void 0 ? _this$connectorOption : {},
      loginSettings: (_this$connectorOption3 = (_this$connectorOption4 = this.connectorOptions) === null || _this$connectorOption4 === void 0 ? void 0 : _this$connectorOption4.loginSettings) !== null && _this$connectorOption3 !== void 0 ? _this$connectorOption3 : {}
    });
    this.analytics = options.analytics;
    if (qrcodeModal) this.connectorOptions.connectorSettings.qrcodeModal = qrcodeModal;
    if (walletConnectInitOptions) this.connectorOptions.connectorSettings.walletConnectInitOptions = _objectSpread2(_objectSpread2({}, (_this$connectorOption5 = this.connectorOptions.connectorSettings.walletConnectInitOptions) !== null && _this$connectorOption5 !== void 0 ? _this$connectorOption5 : {}), walletConnectInitOptions);
    const {
      loginSettings
    } = options;
    if (loginSettings) this.connectorOptions.loginSettings = _objectSpread2(_objectSpread2({}, this.connectorOptions.loginSettings || {}), loginSettings);
  }
  get connected() {
    return !!this.activeSession;
  }
  get provider() {
    if (this.status !== CONNECTOR_STATUS.NOT_READY && this.wcProvider) {
      return this.wcProvider;
    }
    return null;
  }
  set provider(_2) {
    throw new Error("Not implemented");
  }
  async init(options) {
    var _this$connectorOption6;
    const chainConfig = this.coreOptions.chains.find((x3) => x3.chainId === options.chainId);
    super.checkInitializationRequirements({
      chainConfig
    });
    const projectId = (_this$connectorOption6 = this.connectorOptions.connectorSettings) === null || _this$connectorOption6 === void 0 || (_this$connectorOption6 = _this$connectorOption6.walletConnectInitOptions) === null || _this$connectorOption6 === void 0 ? void 0 : _this$connectorOption6.projectId;
    const filteredChains = this.coreOptions.chains.filter((x3) => x3.chainNamespace === CHAIN_NAMESPACES.EIP155 || x3.chainNamespace === CHAIN_NAMESPACES.SOLANA);
    if (filteredChains.length === 0) {
      throw WalletInitializationError.invalidParams("No supported chains found");
    }
    const wc2Settings = await getWalletConnectV2Settings(filteredChains, projectId);
    if (!this.connectorOptions.loginSettings || Object.keys(this.connectorOptions.loginSettings).length === 0) {
      this.connectorOptions.loginSettings = wc2Settings.loginSettings;
    }
    this.connectorOptions.connectorSettings = (0, import_deepmerge.default)(wc2Settings.connectorSettings || {}, this.connectorOptions.connectorSettings || {});
    const {
      connectorSettings
    } = this.connectorOptions;
    this.connector = await fe3.init(connectorSettings === null || connectorSettings === void 0 ? void 0 : connectorSettings.walletConnectInitOptions);
    this.wcProvider = new WalletConnectV2Provider({
      config: {
        chain: chainConfig,
        chains: this.coreOptions.chains
      },
      connector: this.connector
    });
    this.emit(CONNECTOR_EVENTS.READY, WALLET_CONNECTORS.WALLET_CONNECT_V2);
    this.status = CONNECTOR_STATUS.READY;
    log.debug("initializing wallet connect v2 connector");
    if (options.autoConnect) {
      await this.checkForPersistedSession();
      if (this.connected) {
        this.rehydrated = true;
        try {
          await this.onConnectHandler({
            chain: chainConfig
          });
        } catch (error) {
          log.error("wallet auto connect", error);
          this.emit(CONNECTOR_EVENTS.REHYDRATION_ERROR, error);
        }
      } else {
        this.status = CONNECTOR_STATUS.NOT_READY;
        this.emit(CONNECTOR_EVENTS.CACHE_CLEAR);
      }
    }
  }
  async connect({
    chainId
  }) {
    super.checkConnectionRequirements();
    const chainConfig = this.coreOptions.chains.find((x3) => x3.chainId === chainId);
    if (!chainConfig) throw WalletLoginError.connectionError("Chain config is not available");
    if (!this.connector) throw WalletInitializationError.notReady("Wallet connector is not ready yet");
    const shouldTrack = !this.connected && !this.rehydrated;
    const startTime = Date.now();
    let eventData = {
      connector: this.name,
      connector_type: this.type,
      is_injected: this.isInjected,
      is_wallet_connect: true,
      chain_id: getCaipChainId(chainConfig),
      chain_name: chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.displayName,
      chain_namespace: chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainNamespace
    };
    try {
      const trackCompletionEvents = () => {
        if (shouldTrack) {
          var _this$activeSession, _this$analytics, _this$analytics2;
          const {
            name,
            url,
            redirect
          } = ((_this$activeSession = this.activeSession) === null || _this$activeSession === void 0 || (_this$activeSession = _this$activeSession.peer) === null || _this$activeSession === void 0 ? void 0 : _this$activeSession.metadata) || {};
          const {
            native,
            universal,
            linkMode
          } = redirect || {};
          eventData = _objectSpread2(_objectSpread2({}, eventData), {}, {
            connector: name || this.name,
            wallet_url: url,
            redirect_native: native,
            redirect_universal: universal,
            redirect_link_mode_enabled: linkMode
          });
          (_this$analytics = this.analytics) === null || _this$analytics === void 0 || _this$analytics.track(ANALYTICS_EVENTS.CONNECTION_STARTED, eventData);
          (_this$analytics2 = this.analytics) === null || _this$analytics2 === void 0 || _this$analytics2.track(ANALYTICS_EVENTS.CONNECTION_COMPLETED, _objectSpread2(_objectSpread2({}, eventData), {}, {
            duration: Date.now() - startTime
          }));
        }
      };
      if (this.connected) {
        await this.onConnectHandler({
          chain: chainConfig
        });
        return this.provider;
      }
      if (this.status !== CONNECTOR_STATUS.CONNECTING) {
        await this.createNewSession({
          chainConfig,
          trackCompletionEvents
        });
      }
      return this.provider;
    } catch (error) {
      log.error("Wallet connect v2 connector error while connecting", error);
      this.status = CONNECTOR_STATUS.READY;
      this.rehydrated = true;
      this.emit(CONNECTOR_EVENTS.ERRORED, error);
      if (shouldTrack) {
        var _this$analytics3, _this$analytics4;
        (_this$analytics3 = this.analytics) === null || _this$analytics3 === void 0 || _this$analytics3.track(ANALYTICS_EVENTS.CONNECTION_STARTED, eventData);
        (_this$analytics4 = this.analytics) === null || _this$analytics4 === void 0 || _this$analytics4.track(ANALYTICS_EVENTS.CONNECTION_FAILED, _objectSpread2(_objectSpread2(_objectSpread2({}, eventData), getErrorAnalyticsProperties(error)), {}, {
          duration: Date.now() - startTime
        }));
      }
      const finalError = error instanceof Web3AuthError ? error : WalletLoginError.connectionError(`Failed to login with wallet connect: ${(error === null || error === void 0 ? void 0 : error.message) || ""}`, error);
      throw finalError;
    }
  }
  async switchChain(params, init2 = false) {
    super.checkSwitchChainRequirements(params, init2);
    if (!this.wcProvider) throw WalletInitializationError.notReady("Wallet Connect provider is not ready yet");
    try {
      await this.wcProvider.switchChain({
        chainId: params.chainId
      });
    } catch (error) {
      log.error("error while switching chain", error);
      throw error;
    }
  }
  async getUserInfo() {
    if (!this.connected) throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }
  async disconnect(options = {
    cleanup: false,
    sessionRemovedByWallet: false
  }) {
    var _this$activeSession2, _this$activeSession3;
    const {
      cleanup
    } = options;
    if (!this.connector || !this.connected || !((_this$activeSession2 = this.activeSession) !== null && _this$activeSession2 !== void 0 && _this$activeSession2.topic)) throw WalletLoginError.notConnectedError("Not connected with wallet");
    if (!options.sessionRemovedByWallet) await this.connector.disconnect({
      topic: (_this$activeSession3 = this.activeSession) === null || _this$activeSession3 === void 0 ? void 0 : _this$activeSession3.topic,
      reason: Kt("USER_DISCONNECTED")
    });
    this.rehydrated = false;
    if (cleanup) {
      this.connector = null;
      this.status = CONNECTOR_STATUS.NOT_READY;
      this.wcProvider = null;
    } else {
      this.status = CONNECTOR_STATUS.READY;
    }
    this.activeSession = null;
    this.emit(CONNECTOR_EVENTS.DISCONNECTED);
  }
  async getIdentityToken() {
    if (!this.provider || this.status !== CONNECTOR_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();
    const {
      chainId
    } = this.provider;
    const currentChainConfig = this.coreOptions.chains.find((x3) => x3.chainId === chainId);
    if (!currentChainConfig) throw WalletLoginError.connectionError("Chain config is not available");
    const {
      chainNamespace
    } = currentChainConfig;
    const accounts = await this.provider.request({
      method: chainNamespace === CHAIN_NAMESPACES.EIP155 ? EVM_METHOD_TYPES.GET_ACCOUNTS : SOLANA_METHOD_TYPES.GET_ACCOUNTS
    });
    if (accounts && accounts.length > 0) {
      const existingToken = getSavedToken(accounts[0], this.name);
      if (existingToken) {
        const isExpired = checkIfTokenIsExpired(existingToken);
        if (!isExpired) {
          return {
            idToken: existingToken
          };
        }
      }
      const payload = {
        domain: window.location.origin,
        uri: window.location.href,
        address: accounts[0],
        chainId: parseInt(chainId, 16),
        version: "1",
        nonce: Math.random().toString(36).slice(2),
        issuedAt: (/* @__PURE__ */ new Date()).toISOString()
      };
      const challenge = await signChallenge(payload, chainNamespace);
      const signedMessage = await this._getSignedMessage(challenge, accounts, chainNamespace);
      const idToken = await verifySignedChallenge(chainNamespace, signedMessage, challenge, this.name, this.coreOptions.sessionTime, this.coreOptions.clientId, this.coreOptions.web3AuthNetwork);
      saveToken(accounts[0], this.name, idToken);
      return {
        idToken
      };
    }
    throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
  }
  async enableMFA() {
    throw new Error("Method Not implemented");
  }
  async manageMFA() {
    throw new Error("Method Not implemented");
  }
  cleanupPendingPairings() {
    if (!this.connector) throw WalletInitializationError.notReady("Wallet connector is not ready yet");
    const inactivePairings = this.connector.pairing.getAll({
      active: false
    });
    if (!me(inactivePairings)) return;
    inactivePairings.forEach((pairing) => {
      if (this.connector) {
        this.connector.pairing.delete(pairing.topic, Kt("USER_DISCONNECTED"));
      }
    });
  }
  async checkForPersistedSession() {
    if (!this.connector) throw WalletInitializationError.notReady("Wallet connector is not ready yet");
    if (this.connector.session.length) {
      const lastKeyIndex = this.connector.session.keys.length - 1;
      this.activeSession = this.connector.session.get(this.connector.session.keys[lastKeyIndex]);
    }
    return this.activeSession;
  }
  async createNewSession({
    forceNewSession = false,
    chainConfig,
    trackCompletionEvents
  }) {
    try {
      var _this$activeSession4, _this$connectorOption7;
      if (!this.connector) throw WalletInitializationError.notReady("Wallet connector is not ready yet");
      if (!this.connectorOptions.loginSettings || Object.keys(this.connectorOptions.loginSettings).length === 0) throw WalletInitializationError.notReady("login settings are not set yet");
      this.status = CONNECTOR_STATUS.CONNECTING;
      this.emit(CONNECTOR_EVENTS.CONNECTING, {
        connector: WALLET_CONNECTORS.WALLET_CONNECT_V2
      });
      if (forceNewSession && (_this$activeSession4 = this.activeSession) !== null && _this$activeSession4 !== void 0 && _this$activeSession4.topic) {
        var _this$activeSession5;
        await this.connector.disconnect({
          topic: (_this$activeSession5 = this.activeSession) === null || _this$activeSession5 === void 0 ? void 0 : _this$activeSession5.topic,
          reason: Kt("USER_DISCONNECTED")
        });
      }
      const {
        uri,
        approval
      } = await this.connector.connect(this.connectorOptions.loginSettings);
      const qrcodeModal = (_this$connectorOption7 = this.connectorOptions) === null || _this$connectorOption7 === void 0 || (_this$connectorOption7 = _this$connectorOption7.connectorSettings) === null || _this$connectorOption7 === void 0 ? void 0 : _this$connectorOption7.qrcodeModal;
      if (uri) {
        if (qrcodeModal) {
          try {
            await qrcodeModal.openModal({
              uri
            });
            log.debug("EVENT", "QR Code Modal closed");
            this.status = CONNECTOR_STATUS.READY;
            this.emit(CONNECTOR_EVENTS.READY, WALLET_CONNECTORS.WALLET_CONNECT_V2);
          } catch (error) {
            log.error("unable to open qr code modal", error);
          }
        } else {
          this.updateConnectorData({
            uri
          });
        }
      }
      log.info("awaiting session approval from wallet");
      const session = await approval();
      this.activeSession = session;
      await this.onConnectHandler({
        chain: chainConfig,
        trackCompletionEvents
      });
      if (qrcodeModal) {
        qrcodeModal.closeModal();
      }
    } catch (error) {
      var _message;
      if ((_message = error.message) !== null && _message !== void 0 && _message.toLowerCase().includes("proposal expired")) {
        log.info("current connector status: ", this.status);
        if (this.status === CONNECTOR_STATUS.CONNECTING) {
          log.info("retrying to create new wallet connect session since proposal expired");
          return this.createNewSession({
            forceNewSession: true,
            chainConfig
          });
        }
        if (this.status === CONNECTOR_STATUS.READY) {
          log.info("ignoring proposal expired error since some other connector is connected");
          return;
        }
      }
      log.error("error while creating new wallet connect session", error);
      this.emit(CONNECTOR_EVENTS.ERRORED, error);
      throw error;
    }
  }
  async onConnectHandler({
    chain,
    trackCompletionEvents
  }) {
    var _this$connectorOption8;
    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady("Wallet connect connector is not ready yet");
    this.subscribeEvents();
    if ((_this$connectorOption8 = this.connectorOptions.connectorSettings) !== null && _this$connectorOption8 !== void 0 && _this$connectorOption8.qrcodeModal) {
      this.wcProvider = new WalletConnectV2Provider({
        config: {
          chain,
          chains: this.coreOptions.chains,
          skipLookupNetwork: true
        },
        connector: this.connector
      });
    }
    await this.wcProvider.setupProvider(this.connector);
    this.cleanupPendingPairings();
    this.status = CONNECTOR_STATUS.CONNECTED;
    if (trackCompletionEvents) trackCompletionEvents();
    this.emit(CONNECTOR_EVENTS.CONNECTED, {
      connector: WALLET_CONNECTORS.WALLET_CONNECT_V2,
      reconnected: this.rehydrated,
      provider: this.provider
    });
  }
  subscribeEvents() {
    if (!this.connector) throw WalletInitializationError.notReady("Wallet connector is not ready yet");
    this.connector.events.on("session_update", ({
      topic,
      params
    }) => {
      if (!this.connector) return;
      const {
        namespaces
      } = params;
      const _session = this.connector.session.get(topic);
      const updatedSession = _objectSpread2(_objectSpread2({}, _session), {}, {
        namespaces
      });
      this.activeSession = updatedSession;
    });
    this.connector.events.on("session_delete", () => {
      this.disconnect({
        sessionRemovedByWallet: true
      });
    });
  }
  async _getSignedMessage(challenge, accounts, chainNamespace) {
    const signedMessage = await this.provider.request({
      method: chainNamespace === CHAIN_NAMESPACES.EIP155 ? EVM_METHOD_TYPES.PERSONAL_SIGN : SOLANA_METHOD_TYPES.SIGN_MESSAGE,
      params: chainNamespace === CHAIN_NAMESPACES.EIP155 ? [challenge, accounts[0]] : {
        data: challenge
      }
    });
    return signedMessage;
  }
};
var walletConnectV2Connector = (params) => {
  return ({
    coreOptions,
    projectConfig,
    analytics
  }) => {
    var _params$walletConnect;
    const projectId = (params === null || params === void 0 || (_params$walletConnect = params.walletConnectInitOptions) === null || _params$walletConnect === void 0 ? void 0 : _params$walletConnect.projectId) || (projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.walletConnectProjectId);
    const connectorSettings = _objectSpread2(_objectSpread2({}, params), {}, {
      walletConnectInitOptions: _objectSpread2(_objectSpread2({}, params === null || params === void 0 ? void 0 : params.walletConnectInitOptions), {}, {
        projectId
      })
    });
    return new WalletConnectV2Connector({
      connectorSettings,
      coreOptions,
      analytics
    });
  };
};

export {
  Analytics2 as Analytics,
  ANALYTICS_EVENTS,
  ANALYTICS_INTEGRATION_TYPE,
  ANALYTICS_SDK_TYPE,
  getSiteName,
  getSiteIcon,
  parseToken,
  DEFAULT_EIP155_METHODS,
  DEFAULT_SOLANA_METHODS,
  DEFAULT_EIP_155_EVENTS,
  DEFAULT_SOLANA_EVENTS,
  getNamespacesFromChains,
  getSupportedMethodsByNamespace,
  getSupportedEventsByNamespace,
  getRequiredNamespaces,
  getWalletConnectV2Settings,
  createWalletMiddleware,
  createEthMiddleware,
  createEthChainSwitchMiddleware,
  createEthChainIdMiddleware,
  createEthProviderConfigMiddleware,
  createEthJsonRpcClient,
  WalletConnectV2Provider,
  walletConnectV2Connector
};
/*! Bundled license information:

js-cookie/dist/js.cookie.mjs:
  (*! js-cookie v3.0.1 | MIT *)

@walletconnect/utils/dist/index.es.js:
  (*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-E37ZTJS5.js.map
