import {
  useWeb3Auth
} from "./chunk-NXA6LXAN.js";
import {
  SolanaWallet
} from "./chunk-D3TJF7RS.js";
import "./chunk-I6FMYGNX.js";
import "./chunk-MMSGLE56.js";
import "./chunk-XJJJAC74.js";
import "./chunk-E37ZTJS5.js";
import "./chunk-QEJAXTE2.js";
import "./chunk-ANJCMEYS.js";
import "./chunk-O2AZ2MYW.js";
import "./chunk-6BO67BC2.js";
import "./chunk-JI2BVKAP.js";
import "./chunk-P5PBSPNF.js";
import "./chunk-6XWWGOVT.js";
import "./chunk-W4XGBCC6.js";
import "./chunk-3NUX7GKE.js";
import "./chunk-JJ4R2GYE.js";
import "./chunk-T76UJC3V.js";
import {
  Connection
} from "./chunk-KVGG4UNH.js";
import "./chunk-64SD37WF.js";
import "./chunk-YZ25BAVE.js";
import "./chunk-JBLZOY4W.js";
import "./chunk-BXZIFEFM.js";
import "./chunk-7AISMB4O.js";
import "./chunk-A6MZY642.js";
import "./chunk-NSXL3SWJ.js";
import "./chunk-XLWISUI2.js";
import {
  WalletInitializationError
} from "./chunk-VBPUSRQJ.js";
import {
  CHAIN_NAMESPACES
} from "./chunk-B2N4C5QO.js";
import "./chunk-F57LR762.js";
import "./chunk-AQ6AFSCK.js";
import "./chunk-CQQ7RDSY.js";
import "./chunk-NPY75PGV.js";
import "./chunk-Z2JNO6L5.js";
import "./chunk-AV6CGRXD.js";
import "./chunk-4W5QYKQT.js";
import "./chunk-E7YZTEZA.js";
import "./chunk-FF6U6DXW.js";
import "./chunk-HVBN44Z7.js";
import "./chunk-OOI2S6FZ.js";
import "./chunk-RT3OGE7I.js";
import "./chunk-EQGYQIU5.js";
import "./chunk-I4LZO3IN.js";
import "./chunk-ZO7VJ2KK.js";
import "./chunk-FQ3RDL7Q.js";
import "./chunk-5WOPONXG.js";
import "./chunk-M2Y7NS7B.js";
import "./chunk-RJHKLZND.js";
import "./chunk-LWLUVSGB.js";
import "./chunk-6XNWDSHI.js";
import "./chunk-X5OROSC7.js";
import "./chunk-O3KV2FKV.js";
import "./chunk-LCA5K6LN.js";
import "./chunk-HXWRQBIO.js";
import "./chunk-NSFS2AGI.js";
import "./chunk-OCPNNEU4.js";
import "./chunk-3LQ52NAQ.js";
import "./chunk-3T47BPSV.js";
import "./chunk-TWULWKBH.js";
import "./chunk-J4YIASWV.js";
import "./chunk-TLG7CTPL.js";
import {
  require_react
} from "./chunk-VT65UQWK.js";
import {
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/solana/hooks/useSignAndSendTransaction.js
var import_react2 = __toESM(require_react());

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/solana/hooks/useSolanaWallet.js
var import_react = __toESM(require_react());
var useSolanaWallet = () => {
  const {
    provider,
    web3Auth
  } = useWeb3Auth();
  const [accounts, setAccounts] = (0, import_react.useState)(null);
  const solanaWallet = (0, import_react.useMemo)(() => {
    if (!provider) return null;
    return new SolanaWallet(provider);
  }, [provider]);
  const connection = (0, import_react.useMemo)(() => {
    if (!web3Auth || !provider) return null;
    return new Connection(web3Auth.currentChain.rpcTarget);
  }, [web3Auth, provider]);
  (0, import_react.useEffect)(() => {
    const init = async () => {
      var _web3Auth$currentChai;
      if (!(web3Auth !== null && web3Auth !== void 0 && (_web3Auth$currentChai = web3Auth.currentChain) !== null && _web3Auth$currentChai !== void 0 && _web3Auth$currentChai.chainNamespace) || web3Auth.currentChain.chainNamespace !== CHAIN_NAMESPACES.SOLANA) {
        return;
      }
      if (!solanaWallet) return;
      const accounts2 = await solanaWallet.getAccounts();
      if ((accounts2 === null || accounts2 === void 0 ? void 0 : accounts2.length) > 0) {
        setAccounts(accounts2);
      }
    };
    if (solanaWallet) init();
  }, [solanaWallet, web3Auth]);
  return {
    solanaWallet,
    accounts,
    connection
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/solana/hooks/useSignAndSendTransaction.js
var useSignAndSendTransaction = () => {
  const {
    solanaWallet
  } = useSolanaWallet();
  const [loading, setLoading] = (0, import_react2.useState)(false);
  const [error, setError] = (0, import_react2.useState)(null);
  const [data, setData] = (0, import_react2.useState)(null);
  const signAndSendTransaction = (0, import_react2.useCallback)(async (transaction) => {
    setLoading(true);
    setError(null);
    try {
      if (!solanaWallet) throw WalletInitializationError.notReady();
      const signature = await solanaWallet.signAndSendTransaction(transaction);
      setData(signature);
      return signature;
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [solanaWallet]);
  return {
    loading,
    error,
    data,
    signAndSendTransaction
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/solana/hooks/useSignMessage.js
var import_react3 = __toESM(require_react());
var useSignMessage = () => {
  const {
    solanaWallet,
    accounts
  } = useSolanaWallet();
  const [loading, setLoading] = (0, import_react3.useState)(false);
  const [error, setError] = (0, import_react3.useState)(null);
  const [data, setData] = (0, import_react3.useState)(null);
  const signMessage = (0, import_react3.useCallback)(async (message, from) => {
    setLoading(true);
    setError(null);
    try {
      if (!solanaWallet) throw WalletInitializationError.notReady();
      const signature = await solanaWallet.signMessage(message, from !== null && from !== void 0 ? from : accounts === null || accounts === void 0 ? void 0 : accounts[0]);
      setData(signature);
      return signature;
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [solanaWallet, accounts]);
  return {
    loading,
    error,
    data,
    signMessage
  };
};

// node_modules/@web3auth/modal/dist/lib.esm/packages/modal/src/react/solana/hooks/useSignTransaction.js
var import_react4 = __toESM(require_react());
var useSignTransaction = () => {
  const {
    solanaWallet
  } = useSolanaWallet();
  const [loading, setLoading] = (0, import_react4.useState)(false);
  const [error, setError] = (0, import_react4.useState)(null);
  const [data, setData] = (0, import_react4.useState)(null);
  const signTransaction = (0, import_react4.useCallback)(async (transaction) => {
    setLoading(true);
    setError(null);
    try {
      if (!solanaWallet) throw WalletInitializationError.notReady();
      const signedTransaction = await solanaWallet.signTransaction(transaction);
      setData(signedTransaction);
      return signedTransaction;
    } catch (error2) {
      setError(error2);
    } finally {
      setLoading(false);
    }
  }, [solanaWallet]);
  return {
    loading,
    error,
    data,
    signTransaction
  };
};
export {
  useSignAndSendTransaction,
  useSignMessage,
  useSignTransaction,
  useSolanaWallet
};
//# sourceMappingURL=@web3auth_modal_react_solana.js.map
